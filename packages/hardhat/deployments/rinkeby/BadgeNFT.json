{
  "address": "0xAd66EcCb5dc5a9D00A820FCf898fa72061539d52",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_projectNFTAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pathwayNFTAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_verifyAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "_badgeId",
          "type": "string"
        }
      ],
      "name": "BadgeApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "_badgeId",
          "type": "string"
        }
      ],
      "name": "NFTBadgeMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "ReceiveCalled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_badgeId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_ERC20Address",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "useNative",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addBadgeCreationReward",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "adventurerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "badgeMinted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_badgeId",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "native",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_ERC20Address",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "claimReward",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "claimBadgeRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_badgeId",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "native",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_ERC20Address",
          "type": "address"
        }
      ],
      "name": "claimRejectionRefund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_badgeId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_pathwayId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "numUsersRewarded",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "callRewards",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_ERC20Address",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "useNative",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "createBadge",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_badgeId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_pathwayId",
          "type": "string"
        },
        {
          "internalType": "bytes32[2]",
          "name": "r",
          "type": "bytes32[2]"
        },
        {
          "internalType": "bytes32[2]",
          "name": "s",
          "type": "bytes32[2]"
        },
        {
          "internalType": "uint8[2]",
          "name": "v",
          "type": "uint8[2]"
        },
        {
          "internalType": "uint256",
          "name": "votesNeeded",
          "type": "uint256"
        }
      ],
      "name": "createToken",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "currentNumUsersRewardPerBadgeERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "currentNumUsersRewardPerBadgeNative",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_badgeId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "getAllAddrsByBadgeIDVersion",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_badgeId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "getAllTokenIdsByBadgeIDVersion",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAppDiamond",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_badgeId",
          "type": "string"
        }
      ],
      "name": "getContributors",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "nativeRefundClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "nativeRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "numUsersRewardPerBadge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "pathwayIdforBadge",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "reviewerVotes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFactory",
          "type": "address"
        }
      ],
      "name": "setAdventureFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAppDiamond",
          "type": "address"
        }
      ],
      "name": "setAppDiamond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_badgeId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "newNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "name": "setNumberOfUsersRewarded",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "status",
      "outputs": [
        {
          "internalType": "enum BadgeNFT.BadgeStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "statusStrings",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardedForBadgeNative",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_contributors",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "_badgeId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_pathwayId",
          "type": "string"
        },
        {
          "internalType": "bytes32[2]",
          "name": "r",
          "type": "bytes32[2]"
        },
        {
          "internalType": "bytes32[2]",
          "name": "s",
          "type": "bytes32[2]"
        },
        {
          "internalType": "uint8[2]",
          "name": "v",
          "type": "uint8[2]"
        },
        {
          "internalType": "uint256",
          "name": "votesNeeded",
          "type": "uint256"
        }
      ],
      "name": "voteForApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_badgeId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_pathwayId",
          "type": "string"
        },
        {
          "internalType": "bytes32[2]",
          "name": "r",
          "type": "bytes32[2]"
        },
        {
          "internalType": "bytes32[2]",
          "name": "s",
          "type": "bytes32[2]"
        },
        {
          "internalType": "uint8[2]",
          "name": "v",
          "type": "uint8[2]"
        },
        {
          "internalType": "uint256",
          "name": "votesNeeded",
          "type": "uint256"
        }
      ],
      "name": "voteForRejection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "votesReject",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "walletOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x97519d468291d23c59d98acf439caef2bded45f960571849dc1dbed2bceb6851",
  "receipt": {
    "to": null,
    "from": "0x7E13623dd5D070967c8568066bE81a3E5bF75226",
    "contractAddress": "0xAd66EcCb5dc5a9D00A820FCf898fa72061539d52",
    "transactionIndex": 9,
    "gasUsed": "5350786",
    "logsBloom": "0x
    "blockHash": "0xa3f8f20306c427a45c626421058d955f311615d97f7f79ca9be885d221f88749",
    "transactionHash": "0x97519d468291d23c59d98acf439caef2bded45f960571849dc1dbed2bceb6851",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 10445074,
        "transactionHash": "0x97519d468291d23c59d98acf439caef2bded45f960571849dc1dbed2bceb6851",
        "address": "0xAd66EcCb5dc5a9D00A820FCf898fa72061539d52",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007e13623dd5d070967c8568066be81a3e5bf75226"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0xa3f8f20306c427a45c626421058d955f311615d97f7f79ca9be885d221f88749"
      }
    ],
    "blockNumber": 10445074,
    "cumulativeGasUsed": "8518831",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5CC387AeCba2Ac9c90fdBD8F51032D4e4DAf944c",
    "0xc6f5693C9741A4889870CbE361428Eb0Ba0c05e3",
    "0x859730c1e82ef01427f3a86Adf6AF89C6Df3C9F6",
    "0x40f40fb4d93D1133B8df8f87B6d48c2932559415"
  ],
  "numDeployments": 4,
  "solcInputHash": "c96d4a51ba43781cb0f93630e9a8ad99",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_projectNFTAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pathwayNFTAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verifyAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_badgeId\",\"type\":\"string\"}],\"name\":\"BadgeApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_badgeId\",\"type\":\"string\"}],\"name\":\"NFTBadgeMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ReceiveCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_badgeId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_ERC20Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useNative\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addBadgeCreationReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"adventurerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"badgeMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_badgeId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"native\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_ERC20Address\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"claimReward\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"claimBadgeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_badgeId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"native\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_ERC20Address\",\"type\":\"address\"}],\"name\":\"claimRejectionRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_badgeId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_pathwayId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"numUsersRewarded\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"callRewards\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_ERC20Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useNative\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createBadge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_badgeId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_pathwayId\",\"type\":\"string\"},{\"internalType\":\"bytes32[2]\",\"name\":\"r\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"s\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint8[2]\",\"name\":\"v\",\"type\":\"uint8[2]\"},{\"internalType\":\"uint256\",\"name\":\"votesNeeded\",\"type\":\"uint256\"}],\"name\":\"createToken\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currentNumUsersRewardPerBadgeERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"currentNumUsersRewardPerBadgeNative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_badgeId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"getAllAddrsByBadgeIDVersion\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_badgeId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"getAllTokenIdsByBadgeIDVersion\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAppDiamond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_badgeId\",\"type\":\"string\"}],\"name\":\"getContributors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nativeRefundClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nativeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"numUsersRewardPerBadge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"pathwayIdforBadge\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reviewerVotes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"setAdventureFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAppDiamond\",\"type\":\"address\"}],\"name\":\"setAppDiamond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_badgeId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"setNumberOfUsersRewarded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum BadgeNFT.BadgeStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"statusStrings\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardedForBadgeNative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_badgeId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_pathwayId\",\"type\":\"string\"},{\"internalType\":\"bytes32[2]\",\"name\":\"r\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"s\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint8[2]\",\"name\":\"v\",\"type\":\"uint8[2]\"},{\"internalType\":\"uint256\",\"name\":\"votesNeeded\",\"type\":\"uint256\"}],\"name\":\"voteForApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_badgeId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_pathwayId\",\"type\":\"string\"},{\"internalType\":\"bytes32[2]\",\"name\":\"r\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"s\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint8[2]\",\"name\":\"v\",\"type\":\"uint8[2]\"},{\"internalType\":\"uint256\",\"name\":\"votesNeeded\",\"type\":\"uint256\"}],\"name\":\"voteForRejection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"votesReject\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BadgeNFT.sol\":\"BadgeNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface internal immutable LINK;\\n  address private immutable vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\\n    private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0xff9e7d773545a1a5d73106e72bfb429da79c1cc4d893fb62051df801d2e61469\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  ) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x2bf1168e8fe548fa990e0aeaf89ef90680f80aa31eeaf901f485df60de51d51b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1cbe42915bc66227970fe99bc0f783eb1de30f2b48f984af01ad45edb9658698\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/BadgeNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title dCompassBadgeNFT\\n * @dev NFTs for creating badges\\n*/\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./RandomNumberConsumer.sol\\\";\\nimport \\\"./Verify.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BadgeNFT is ERC721URIStorage, ERC721Enumerable, Ownable{\\n    using Counters for Counters.Counter;\\n    \\n    Counters.Counter private _tokenIds;\\n\\n    RandomNumberConsumer vrfContract;//VRF Contract used for randomness\\n    Verify verifyContract;//Verify contract instance\\n    address projectNFTAddress; // address for the projectNFTs\\n    address pathwayNFTAddress; // address for the pathwayNFTs\\n    address appDiamond;//address needed for checking valid erc20Addrs per chain\\n    address adventureFactory;//address of the adventure factory\\n    mapping (uint => string) public statusStrings;\\n    mapping (string => bool) public badgeMinted; // tracks if mint has been done\\n    mapping (string => address[]) internal contributors; //contributors to this quest\\n    mapping (string => string) public pathwayIdforBadge;//the pathwayId that is the parent\\n    mapping (string => BadgeStatus) public status;\\n    mapping (string => uint) public votes;//tally of approved votes per badgeId;\\n     mapping (string => uint) public votesReject;//tally of rejection votes per badgeId;\\n    mapping (string => mapping(address => bool)) public reviewerVotes;//vote record of approved voters for badgeId\\n    mapping (string => uint) public nativeRewards;//badge rewards in native token\\n    mapping (string => mapping(address => uint)) internal erc20Amounts;//badge reward Amts in other tokens\\n    mapping (string => bool) public nativeRefundClaimed;//badge refund claimed\\n    mapping (string => mapping(address => bool)) erc20RefundClaimed;//pathway erc20 refund claimed\\n    mapping (string => uint) public numUsersRewardPerBadge;//number of users rewarded per badge\\n    mapping (string => uint) public currentNumUsersRewardPerBadgeNative;//current number of users already claimed native reward per badge\\n    mapping (string => mapping(address => uint)) public nonces;//nonce for certain verify functions per address per badgeId\\n\\n    mapping (string => mapping ( address => uint)) public currentNumUsersRewardPerBadgeERC20;// current number of users already claimed reward per badge per ERC20 Address\\n    mapping (string => address) public adventurerAddress;//address of adventurer NFT\\n\\n    //local adventure mappings\\n    //_badgeID => version => minterAddress => boolean\\n    mapping (string => mapping(uint => mapping(address => bool))) internal mintTrackerByBadgeIdVersionMinter;\\n    //_badgeID => version => addresses of all minters...only used for getter when necessary\\n    mapping (string => mapping(uint => address[])) internal allMintersPerBadgeAndVersion;\\n    //_badgeID => version => tokenIds of all minters...only used for getter when necessary\\n    mapping (string => mapping(uint => uint[])) internal allTokenIdsPerBadgeAndVersion;\\n\\n    //pathwayId => ERC20Address => senderAddress => bool\\n    mapping (string => mapping(address => mapping (address => bool))) userRewardedForBadgeERC20;//has user received funds for this badge in ERC20Token Address\\n    mapping (string => mapping(address => bool)) public userRewardedForBadgeNative;//has user received funds for this badge in native token\\n    uint256 public fee = 1500; //number divided by 10000 for fee. for example 100 = 1%\\n\\n    enum BadgeStatus{ NONEXISTENT, PENDING, DENIED, APPROVED }\\n\\n    event ReceiveCalled(address _caller, uint _value);\\n    event BadgeApproved(string indexed _badgeId);\\n    event NFTBadgeMinted(address indexed _to, string indexed _tokenURI, string indexed _badgeId);\\n\\n    constructor(address _vrfAddress, address _projectNFTAddress, address _pathwayNFTAddress, address _verifyAddress)ERC721(\\\"dCompassBadge\\\", \\\"DCOMPB\\\"){\\n        vrfContract = RandomNumberConsumer(_vrfAddress);\\n        verifyContract = Verify(_verifyAddress);\\n        projectNFTAddress = _projectNFTAddress;\\n        pathwayNFTAddress = _pathwayNFTAddress;\\n        statusStrings[0] = \\\"NONEXISTENT\\\";\\n        statusStrings[1] = \\\"PENDING\\\";\\n        statusStrings[2] = \\\"DENIED\\\";\\n        statusStrings[3] = \\\"APPROVED\\\";\\n    }\\n\\n    receive() external payable {\\n        emit ReceiveCalled(msg.sender, msg.value);\\n    }\\n\\n    function createBadge(\\n        string memory _badgeId,\\n        string memory _pathwayId,\\n        uint numUsersRewarded,\\n        bool callRewards,\\n        address _ERC20Address,\\n        bool useNative,\\n        uint amount\\n    ) external payable {\\n            require(status[_badgeId] == BadgeStatus.NONEXISTENT);\\n            status[_badgeId] = BadgeStatus.PENDING;\\n            pathwayIdforBadge[_badgeId] = _pathwayId;\\n            numUsersRewardPerBadge[_badgeId] = numUsersRewarded;\\n            if (callRewards){\\n                addBadgeCreationReward(_badgeId, _ERC20Address, useNative, amount);\\n            }\\n    }\\n\\n    function voteForApproval(address[] memory _contributors, string memory _badgeId, string memory _pathwayId, bytes32[2] memory r, bytes32[2] memory s, uint8[2] memory v, uint votesNeeded) public {\\n        require(\\n            status[_badgeId] == BadgeStatus.PENDING,\\n            \\\"status not pending\\\"\\n        );\\n        require(\\n            !reviewerVotes[_badgeId][_msgSender()],\\n            \\\"already voted for this badge\\\"\\n        );\\n        require(\\n            keccak256(abi.encodePacked(pathwayIdforBadge[_badgeId])) == keccak256(abi.encodePacked(_pathwayId)),\\n            \\\"incorrect pathwayId\\\"\\n        );\\n        bool voteAllowed = verifyContract.metaDataVerify(_msgSender(), _badgeId, _pathwayId, r[0], s[0], v[0]);\\n        require(voteAllowed, \\\"sender is not approved pathway voter\\\");\\n        bool thresholdCheck = verifyContract.thresholdVerify(_msgSender(), _badgeId, votesNeeded, r[1], s[1], v[1]);\\n        require(thresholdCheck, \\\"incorrect votes needed sent\\\");\\n        votes[_badgeId]++;\\n        reviewerVotes[_badgeId][_msgSender()] = true;\\n        if(votes[_badgeId] == 1){\\n            require(_contributors.length >0, \\\"empty array\\\");\\n            contributors[_badgeId] = _contributors;\\n            if(votesNeeded <= votes[_badgeId]){\\n                status[_badgeId] = BadgeStatus.APPROVED;\\n                emit BadgeApproved(_badgeId);\\n                //vrfContract.getRandomNumber(_badgeId, contributors[_badgeId].length);\\n            }\\n        }\\n        else{\\n            if(votes[_badgeId] >= votesNeeded){\\n                status[_badgeId] = BadgeStatus.APPROVED;\\n                emit BadgeApproved(_badgeId);\\n                //vrfContract.getRandomNumber(_badgeId, contributors[_badgeId].length);\\n            }  \\n        }\\n    }\\n\\n    function voteForRejection(string memory _badgeId, string memory _pathwayId, bytes32[2] memory r, bytes32[2] memory s, uint8[2] memory v, uint256 votesNeeded) public {\\n        require(status[_badgeId] == BadgeStatus.PENDING, \\\"badge not pending\\\");\\n        require(!reviewerVotes[_badgeId][_msgSender()], \\\"already voted for this badge\\\");\\n        require(\\n            keccak256(abi.encodePacked(pathwayIdforBadge[_badgeId])) == keccak256(abi.encodePacked(_pathwayId)),\\n            \\\"incorrect pathwayId\\\"\\n        );\\n        bool voteAllowed = verifyContract.metaDataVerify(\\n            _msgSender(),\\n            _badgeId,\\n            _pathwayId,\\n            r[0],\\n            s[0],\\n            v[0]\\n        );\\n        require(voteAllowed, \\\"sender is not approved pathway voter\\\");\\n        bool thresholdCheck = verifyContract.thresholdVerify(\\n            _msgSender(),\\n            _badgeId,\\n            votesNeeded,\\n            r[1],\\n            s[1],\\n            v[1]\\n        );\\n        require(thresholdCheck, \\\"incorrect votes needed sent\\\");\\n        votesReject[_badgeId]++;\\n        reviewerVotes[_badgeId][_msgSender()] = true;        \\n        if(votesReject[_badgeId] >= votesNeeded){\\n            status[_badgeId] = BadgeStatus.DENIED;\\n            /*(bool success,) = appWallet.call{value : stakePerProject[_projectId]}(\\\"\\\");\\n            require(success, \\\"transfer failed\\\");*/\\n        }\\n    }\\n\\n    function addBadgeCreationReward(string memory _badgeId, address _ERC20Address, bool useNative, uint amount) public payable{\\n        require (status[_badgeId] == BadgeStatus.PENDING || status[_badgeId] == BadgeStatus.APPROVED, \\\"badge not pending/approved\\\");\\n        require (numUsersRewardPerBadge[_badgeId] > 0, \\\"no user rewards\\\");\\n        (bool success , bytes memory data) = projectNFTAddress.call(abi.encodeWithSelector(bytes4(keccak256(\\\"appWallet()\\\"))));\\n        require(success);\\n        address appWallet = abi.decode(data, (address));\\n        uint appPortion = (amount*fee)/10000;\\n        if(useNative){\\n            require(msg.value >= amount + appPortion, \\\"not enough sent\\\");\\n            (success,) = payable(appWallet).call{value : appPortion}(\\\"\\\");\\n            require(success);\\n            nativeRewards[_badgeId] += amount;\\n            if(msg.value > amount + appPortion){\\n                (success,) = payable(_msgSender()).call{value : msg.value - amount- appPortion}(\\\"\\\");\\n                require(success);\\n            }\\n        }\\n        else{\\n            require(_ERC20Address != address(0));\\n            (success, data) = pathwayNFTAddress.call(abi.encodeWithSelector(bytes4(keccak256(\\\"projectIdforPathway(string)\\\")), pathwayIdforBadge[_badgeId]));\\n            require(success);\\n            string memory projectId = abi.decode(data, (string));\\n            (success, data) = appDiamond.call(abi.encodeWithSelector(bytes4(keccak256(\\\"checkApprovedERC20PerProjectByChain(string,uint256,address)\\\")), projectId, block.chainid, _ERC20Address));\\n            require(success);\\n            success = abi.decode(data, (bool));\\n            require(success, \\\"ERC20 not approved\\\");\\n            IERC20(_ERC20Address).transferFrom(_msgSender(), appWallet, appPortion);\\n            IERC20(_ERC20Address).transferFrom(_msgSender(), address(this), amount);\\n            erc20Amounts[_badgeId][_ERC20Address] += amount;\\n        }\\n    }\\n\\n    function setNumberOfUsersRewarded(string memory _badgeId, uint256 newNumber, bytes32 r, bytes32 s, uint8 v) external {\\n        require(newNumber > numUsersRewardPerBadge[_badgeId] - 1, \\\"BadgeNFT : invalid number\\\");\\n        _verify(_msgSender(), _badgeId, newNumber, r, s, v);\\n        numUsersRewardPerBadge[_badgeId] = newNumber;\\n    }\\n\\n    function claimRejectionRefund(string memory _badgeId, bool native, address _ERC20Address) external {\\n        require(status[_badgeId] == BadgeStatus.DENIED, \\\"incorrect badge status\\\");\\n        (bool success, bytes memory data) = pathwayNFTAddress.call(abi.encodeWithSelector(bytes4(keccak256(\\\"projectIdforPathway(string)\\\")), pathwayIdforBadge[_badgeId]));\\n        require(success);\\n        string memory _projectId = abi.decode(data, (string));\\n        (success, data) = projectNFTAddress.call(abi.encodeWithSelector(bytes4(keccak256(\\\"projectWallets(string)\\\")), _projectId));\\n        require(success);\\n        address refundWallet = abi.decode(data, (address));\\n        require(refundWallet != address(0));\\n        if(native){\\n            require(!nativeRefundClaimed[_badgeId], \\\"native reward already claimed\\\");\\n            (success,) = payable(refundWallet).call{value : nativeRewards[_badgeId]}(\\\"\\\");\\n            require(success);\\n            nativeRefundClaimed[_badgeId] = true;\\n        }\\n        else{\\n            require(!erc20RefundClaimed[_badgeId][_ERC20Address], \\\"erc20 reward already claimed\\\");\\n            IERC20(_ERC20Address).transfer(refundWallet, erc20Amounts[_badgeId][_ERC20Address]);\\n            erc20RefundClaimed[_badgeId][_ERC20Address] = true;\\n        }\\n    }\\n\\n    function createToken(\\n        string memory _tokenURI,\\n        string memory _badgeId,\\n        string memory _pathwayId,\\n        bytes32[2] memory r,\\n        bytes32[2] memory s,\\n        uint8[2] memory v,\\n        uint256 votesNeeded\\n    ) public returns (uint256[] memory) {\\n        require(!badgeMinted[_badgeId], \\\"already minted\\\");\\n        bool allowed = verifyContract.metaDataVerify(\\n            _msgSender(),\\n            _badgeId,\\n            _pathwayId,\\n            r[0],\\n            s[0],\\n            v[0]\\n        );\\n        require(allowed, \\\"sender is not approved pathway minter\\\");\\n        if (status[_badgeId] == BadgeStatus.PENDING) {\\n            require(votesNeeded <= votes[_badgeId], \\\"not enough votes\\\");\\n            allowed = verifyContract.thresholdVerify(\\n                _msgSender(),\\n                _badgeId,\\n                votesNeeded,\\n                r[1],\\n                s[1],\\n                v[1]\\n            );\\n            require(allowed, \\\"incorrect votes needed sent\\\");\\n            status[_badgeId] = BadgeStatus.APPROVED;\\n        }\\n        require(\\n            status[_badgeId] == BadgeStatus.APPROVED,\\n            \\\"can only mint for badges in approved status\\\"\\n        );\\n\\n        //TODO : this can later be made a require instead of if statement?\\n        bytes memory data;\\n        (allowed, data) = pathwayNFTAddress.call(abi.encodeWithSelector(bytes4(keccak256(\\\"projectIdforPathway(string)\\\")), pathwayIdforBadge[_badgeId]));\\n        require(allowed);\\n        string memory _projectId = abi.decode(data, (string));\\n\\n        (allowed, data) = appDiamond.call(abi.encodeWithSelector(bytes4(keccak256(\\\"projectDiamondAddrs(string)\\\")), _projectId));\\n        require(allowed);\\n        //address projectDiamond = abi.decode(data, (address));\\n        /*if(projectDiamond != address(0)){\\n            (allowed, data) = projectDiamond.call(abi.encodeWithSelector(bytes4(keccak256(\\\"addPathwayId(string)\\\")), _pathwayId));\\n            require(allowed);\\n        }*/\\n\\n        //batch minting\\n        \\n        uint256[] memory newItems = new uint256[](\\n            contributors[_badgeId].length\\n        );\\n        uint256 newItemId;\\n        \\n        for (uint256 i = 0; i < contributors[_badgeId].length; i++) {\\n            _tokenIds.increment();\\n            newItemId = _tokenIds.current();\\n\\n            _mint(contributors[_badgeId][i], newItemId);\\n            _setTokenURI(newItemId, _tokenURI);\\n\\n            emit NFTBadgeMinted(\\n                contributors[_badgeId][i],\\n                _tokenURI,\\n                _pathwayId\\n            );\\n        }\\n        \\n        //_createAdventurerNFT(_badgeId, _pathwayId);\\n\\n        badgeMinted[_badgeId] = true;\\n        return newItems;\\n    }\\n\\n    function claimBadgeRewards(string memory _badgeId, bool native, address _ERC20Address, bytes32 r, bytes32 s, uint8 v, bool claimReward, string memory _tokenURI, uint256 version) external {\\n        uint amount;\\n        if(claimReward){\\n            if(native){\\n                require(!userRewardedForBadgeNative[_badgeId][_msgSender()]);\\n                require(currentNumUsersRewardPerBadgeNative[_badgeId] < numUsersRewardPerBadge[_badgeId]);\\n                amount = nativeRewards[_badgeId] / numUsersRewardPerBadge[_badgeId];\\n                require(amount > 0);\\n            }\\n            else{\\n                require(!userRewardedForBadgeERC20[_badgeId][_ERC20Address][_msgSender()]);\\n                require(currentNumUsersRewardPerBadgeERC20[_badgeId][_ERC20Address] < numUsersRewardPerBadge[_badgeId]);\\n                amount = erc20Amounts[_badgeId][_ERC20Address] / numUsersRewardPerBadge[_badgeId];\\n                require(amount > 0);\\n            }\\n        }\\n        _verify(_msgSender(), _badgeId, version, r, s, v);\\n        if(claimReward){\\n            if(native){\\n                (bool success, ) = payable(_msgSender()).call{value : amount}(\\\"\\\");\\n                require(success);\\n                userRewardedForBadgeNative[_badgeId][_msgSender()] = true;\\n                currentNumUsersRewardPerBadgeNative[_badgeId]++;\\n            }\\n            else{\\n                IERC20(_ERC20Address).transfer(_msgSender(), amount);\\n                userRewardedForBadgeERC20[_badgeId][_ERC20Address][_msgSender()] = true;\\n                currentNumUsersRewardPerBadgeERC20[_badgeId][_ERC20Address]++;\\n            }\\n        }\\n\\n        _localAdventureMint(_msgSender(), _badgeId, _tokenURI, version);\\n        //_mintAdventurerBadge(_msgSender(), _badgeId, _tokenURI);\\n    }\\n\\n    function walletOfOwner(address _owner) public view returns (uint256[] memory)\\n  {\\n    uint256 ownerTokenCount = balanceOf(_owner);\\n    uint256[] memory tokenIds = new uint256[](ownerTokenCount);\\n    for (uint256 i; i < ownerTokenCount; i++) {\\n      tokenIds[i] = tokenOfOwnerByIndex(_owner, i);\\n    }\\n    return tokenIds;\\n  }\\n\\n  function _mintAdventurerBadge(address _to, string memory _badgeId, string memory _tokenURI) internal {\\n      address adventurerBadgeAddress = adventurerAddress[_badgeId];\\n      require(adventurerBadgeAddress != address(0), \\\"invalid badge address\\\");\\n      (bool success, bytes memory data) = adventurerBadgeAddress.call(abi.encodeWithSelector(bytes4(keccak256(\\\"balanceOf(address)\\\")), _msgSender()));\\n      require(success);\\n      uint256 balance = abi.decode(data, (uint256));\\n      if(balance == 0){\\n          (success, data) = adventurerBadgeAddress.call(abi.encodeWithSelector(bytes4(keccak256(\\\"mint(address,uint256,string)\\\")), _msgSender(), 1, _tokenURI));\\n          require(success);\\n          (success, data) = adventureFactory.call(abi.encodeWithSelector(bytes4(keccak256(\\\"setUserInfo(address,string)\\\")), _msgSender(), _badgeId));\\n          require(success);\\n      }\\n  }\\n\\n  function _localAdventureMint(address _to, string memory _badgeId, string memory _tokenURI, uint256 version) internal {\\n      if(mintTrackerByBadgeIdVersionMinter[_badgeId][version][_to]){\\n          return;\\n      }\\n      uint256 newItemId;\\n      _tokenIds.increment();\\n      newItemId = _tokenIds.current();\\n      _mint(_msgSender(), newItemId);\\n      _setTokenURI(newItemId, _tokenURI);\\n      allMintersPerBadgeAndVersion[_badgeId][version].push(_to);\\n      allTokenIdsPerBadgeAndVersion[_badgeId][version].push(newItemId);\\n      mintTrackerByBadgeIdVersionMinter[_badgeId][version][_to] = true;\\n  }\\n\\n  function _createAdventurerNFT(string memory _badgeId, string memory _pathwayId) internal {\\n      (bool success , bytes memory data) = adventureFactory.call(abi.encodeWithSelector(bytes4(\\n          keccak256(\\\"createNFTToken(string,bool,string)\\\")\\n      ), _badgeId, false, _pathwayId));\\n      require(success);\\n      address newTokenAddr = abi.decode(data, (address));\\n      adventurerAddress[_badgeId] = newTokenAddr;\\n  }\\n\\n  function _verify(address from, string memory _badgeId, uint256 payload, bytes32 r, bytes32 s, uint8 v) internal returns (bool){\\n      bytes32 hashRecover = keccak256(\\n            abi.encodePacked(\\n                from,\\n                address(this),\\n                block.chainid,\\n                nonces[_badgeId][from],\\n                payload,\\n                _badgeId\\n            )\\n        );\\n        (bool success, bytes memory data) = appDiamond.call(abi.encodeWithSelector(bytes4(keccak256(\\\"appSigningAddr()\\\"))));\\n        require(success);\\n        address signer = abi.decode(data, (address));\\n        require (signer == ecrecover(\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    hashRecover\\n                )\\n            ),\\n            v,\\n            r,\\n            s\\n        ), \\\"Incorrect signer\\\");\\n        nonces[_badgeId][from]++;\\n        return true;\\n  }\\n\\n    function getContributors(string memory _badgeId) external view returns(address[] memory){\\n        return contributors[_badgeId];\\n    }\\n\\n    function getAppDiamond() external view returns(address){\\n        return appDiamond;\\n    }\\n\\n    function getAllAddrsByBadgeIDVersion(string memory _badgeId, uint256 version) external view returns (address[] memory){\\n        return allMintersPerBadgeAndVersion[_badgeId][version];\\n    }\\n\\n    function getAllTokenIdsByBadgeIDVersion(string memory _badgeId, uint256 version) external view returns (uint256[] memory){\\n        return allTokenIdsPerBadgeAndVersion[_badgeId][version];\\n    }\\n\\n    function setAppDiamond(address newAppDiamond) external onlyOwner {\\n        appDiamond = newAppDiamond;\\n    }\\n\\n    function setAdventureFactory(address newFactory) external onlyOwner {\\n        adventureFactory = newFactory;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override(ERC721Enumerable, ERC721) {\\n        super._beforeTokenTransfer(from,to,tokenId);\\n    }\\n    \\n    function _burn(uint256 tokenId) internal override(ERC721URIStorage, ERC721) {\\n        super._burn(tokenId);\\n    }\\n    \\n     function supportsInterface(bytes4 interfaceId) public view override(ERC721Enumerable, ERC721) returns (bool){\\n         return super.supportsInterface(interfaceId);\\n     }\\n     \\n     function tokenURI(uint256 tokenId) public view virtual override(ERC721URIStorage, ERC721) returns (string memory){\\n         return super.tokenURI(tokenId);\\n     }\\n}\",\"keccak256\":\"0x27ae00a459857f493d071c62da54140f4dc217ec958ed0118213e79ce202cfe9\",\"license\":\"MIT\"},\"contracts/RandomNumberConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\ncontract RandomNumberConsumer is VRFConsumerBase, Ownable {\\n    \\n    bytes32 internal keyHash;\\n    uint256 internal fee;\\n    \\n    mapping(bytes32 => string) public objectRequests;//requestId to objectId (object is course or quest)\\n    mapping(bytes32 => uint) public numContributors;//requestId to num of contirbutors at time of approval\\n    mapping(string => uint8[]) internal objectRarities;//calculated rarities for course or quest\\n    mapping(string => uint256) public blockNumberResults;//block number request was fulfilled at\\n    mapping (string => uint256) public requestResults;\\n    mapping (address => bool) whiteList;//approved contracts and users that can call this will eventually be multi-sig holders\\n\\n    event RandomNumberFulfilled(string indexed _projectId);\\n\\n    modifier onlyWhiteList(){\\n        require(whiteList[_msgSender()], \\\"not authorized\\\");\\n        _;\\n    }\\n    \\n    /**\\n     * Constructor inherits VRFConsumerBase\\n     * \\n     * Network: Kovan\\n     * Chainlink VRF Coordinator address: 0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9\\n     * LINK token address:                0xa36085F69e2889c224210F603D836748e7dC0088\\n     * Key Hash: 0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4\\n     */\\n    constructor(address [] memory _reviewers) \\n        VRFConsumerBase(\\n            0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9, // VRF Coordinator\\n            0xa36085F69e2889c224210F603D836748e7dC0088  // LINK Token\\n        )\\n    {\\n        keyHash = 0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4;\\n        fee = 0.1 * 10 ** 18; // 0.1 LINK (Varies by network)\\n        for (uint i=0; i<_reviewers.length; i++){\\n            if(_reviewers[i]!= address(0) && !whiteList[_reviewers[i]]){\\n                whiteList[_reviewers[i]] = true;  \\n            }\\n        }\\n    }\\n    \\n    /** \\n     * Requests randomness \\n     */\\n    function getRandomNumber(string memory _objectId, uint _numContributors) public onlyWhiteList returns (bytes32 requestId){\\n        require(LINK.balanceOf(address(this)) >= fee, \\\"Not enough LINK - fill contract with faucet\\\");\\n        requestId = requestRandomness(keyHash, fee);\\n        objectRequests[requestId] = _objectId;\\n        numContributors[requestId] = _numContributors;\\n        return requestId;\\n    }\\n\\n    /**\\n     * Callback function used by VRF Coordinator\\n     */\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\n        string memory objectId = objectRequests[requestId];\\n        requestResults[objectId] = randomness;\\n        blockNumberResults[objectId] = block.number;\\n        uint currentIndex = 0;\\n        uint8[] memory rarities = new uint8[](numContributors[requestId]);\\n\\n        while(currentIndex < rarities.length){\\n            rarities[currentIndex] = uint8((uint256(keccak256(abi.encode(randomness, currentIndex))) % 100) + 1);\\n            currentIndex++;\\n        }\\n\\n        objectRarities[objectId] = rarities;\\n        emit RandomNumberFulfilled(objectId);\\n    }\\n    \\n    function addContractToWhiteList(address _newWhiteList) public onlyWhiteList{\\n        require(!whiteList[_newWhiteList], \\\"already approved\\\");\\n        whiteList[_newWhiteList] = true;\\n    }\\n    \\n    function getObjectRarities(string memory _objectId) public view returns(uint8[] memory){\\n        return objectRarities[_objectId];\\n    }\\n\\n    // function withdrawLink() external {} - Implement a withdraw function to avoid locking your LINK in the contract\\n}\",\"keccak256\":\"0x705ad5a33cb7d1f2f8f4103b4daf793b67a25d9cadcded6b3a4654b15479e014\",\"license\":\"MIT\"},\"contracts/Verify.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n//import '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\n\\ncontract Verify is Ownable {\\n    //using ECDSA for bytes32;\\n\\n    mapping(string => mapping(string => uint256)) public noncesParentIdChildId; //nonce for each parentId and childId (e.g. projectId and  courseId or CourseId and questId)\\n    mapping(string => uint256) public thresholdNoncesById; //nonce for each parentId Threshold (e.g. projectId for course and Course Id for quest)\\n    mapping(string => uint256) public deployNoncesById; //nonce for each projectId deploy of a diamond\\n    address public serverAddress;\\n    mapping(address => bool) public approvers;\\n\\n    constructor(address _serverAddress, address[] memory _approvers) {\\n        require(_serverAddress != address(0));\\n        serverAddress = _serverAddress;\\n        for (uint256 i = 0; i < _approvers.length; i++) {\\n            approvers[_approvers[i]] = true;\\n        }\\n    }\\n\\n    function getHash(\\n        address _senderAddress,\\n        string memory _objectId,\\n        string memory _parentId,\\n        address _contractAddress\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    noncesParentIdChildId[_parentId][_objectId],\\n                    _senderAddress,\\n                    _contractAddress,\\n                    address(this),\\n                    _objectId\\n                )\\n            );\\n    }\\n\\n    function metaDataVerify(\\n        address _senderAddress,\\n        string memory _objectId,\\n        string memory _parentId,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) public returns (bool) {\\n        bytes32 hashRecover = getHash(\\n            _senderAddress,\\n            _objectId,\\n            _parentId,\\n            _msgSender()\\n        );\\n        address signer = ecrecover(\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    hashRecover\\n                )\\n            ),\\n            v,\\n            r,\\n            s\\n        );\\n        require(signer == serverAddress, \\\"SIGNER MUST BE SERVER\\\");\\n        noncesParentIdChildId[_parentId][_objectId]++;\\n        return signer == serverAddress;\\n    }\\n\\n    function thresholdVerify(\\n        address _senderAddress,\\n        string memory _objectId,\\n        uint256 votesNeeded,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) public returns (bool) {\\n        bytes32 hashRecover = keccak256(\\n            abi.encodePacked(\\n                thresholdNoncesById[_objectId],\\n                votesNeeded,\\n                _senderAddress,\\n                _msgSender(),\\n                address(this),\\n                _objectId\\n            )\\n        );\\n        address signer = ecrecover(\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    hashRecover\\n                )\\n            ),\\n            v,\\n            r,\\n            s\\n        );\\n        require(signer == serverAddress, \\\"SIGNER MUST BE SERVER\\\");\\n        thresholdNoncesById[_objectId]++;\\n        return signer == serverAddress;\\n    }\\n\\n    function deployDiamondVerify(\\n        address _senderAddress,\\n        string memory _projectId,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) public returns (bool) {\\n        bytes32 hashRecover = keccak256(\\n            abi.encodePacked(\\n                deployNoncesById[_projectId],\\n                _senderAddress,\\n                _msgSender(),\\n                address(this),\\n                _projectId\\n            )\\n        );\\n        address signer = ecrecover(\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    hashRecover\\n                )\\n            ),\\n            v,\\n            r,\\n            s\\n        );\\n        require(signer == serverAddress, \\\"SIGNER MUST BE SERVER\\\");\\n        deployNoncesById[_projectId]++;\\n        return signer == serverAddress;\\n    }\\n\\n    function setServerAddress(address _newAddress) public {\\n        require(approvers[_msgSender()], \\\"must be approved\\\");\\n        require(_newAddress != address(0));\\n        serverAddress = _newAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xff27d83c509eb0eb33e5db4b26ace2686bea763c6056b518bd8ccaf0ad222890\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526105dc6029553480156200001757600080fd5b5060405162005edf38038062005edf8339810160408190526200003a9162000398565b604080518082018252600d81526c64436f6d70617373426164676560981b6020808301918252835180850190945260068452652221a7a6a82160d11b9084015281519192916200008d91600091620002d5565b508051620000a3906001906020840190620002d5565b505050620000c0620000ba6200027f60201b60201c565b62000283565b600d80546001600160a01b038087166001600160a01b031992831617909255600e8054848416908316179055600f8054868416908316179055601080549285169290911691909117905560408051808201909152600b81526a1393d391561254d511539560aa1b60208083019182526000805260139052905162000166917f8fa6efc3be94b5b348b21fea823fe8d100408cee9b7f90524494500445d8ff6c91620002d5565b5060408051808201909152600781526650454e44494e4760c81b60208083019182526001600052601390529051620001c0917f4155c2f711f2cdd34f8262ab8fb9b7020a700fe7b6948222152f7670d1fdf34d91620002d5565b5060408051808201909152600681526511115392515160d21b6020808301918252600260005260139052905162000219917f0b9d2c0c271bb30544eb78c59bdaebdae2728e5f65814c07768a0abe90ed192391620002d5565b506040805180820190915260088152671054141493d5915160c21b6020808301918252600360005260139052905162000274917f0d2a6872ef858a7f8ead18dc4f3f2e8d35c853d47e2816cbb9cdd49202554e0c91620002d5565b505050505062000432565b3390565b600b80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620002e390620003f5565b90600052602060002090601f01602090048101928262000307576000855562000352565b82601f106200032257805160ff191683800117855562000352565b8280016001018555821562000352579182015b828111156200035257825182559160200191906001019062000335565b506200036092915062000364565b5090565b5b8082111562000360576000815560010162000365565b80516001600160a01b03811681146200039357600080fd5b919050565b60008060008060808587031215620003af57600080fd5b620003ba856200037b565b9350620003ca602086016200037b565b9250620003da604086016200037b565b9150620003ea606086016200037b565b905092959194509250565b600181811c908216806200040a57607f821691505b602082108114156200042c57634e487b7160e01b600052602260045260246000fd5b50919050565b615a9d80620004426000396000f3fe6080604052600436106102cd5760003560e01c806370a0823111610175578063aaa545d0116100dc578063cef9fab711610095578063e985e9c51161006f578063e985e9c514610a4e578063ebcb309a14610a97578063f2fde38b14610ab7578063f4f5d02914610ad757600080fd5b8063cef9fab7146109a8578063ddca3f43146109f0578063e8ca64f414610a0657600080fd5b8063aaa545d0146108c2578063b2986b4c146108e2578063b88d4fde146108f5578063b99ef1fa14610915578063c87b56dd1461094d578063ce15ef811461096d57600080fd5b8063956f49bf1161012e578063956f49bf1461079d57806395d89b41146107de5780639a199401146107f35780639e1a90d51461082a5780639e1b567c14610857578063a22cb465146108a257600080fd5b806370a08231146106aa578063715018a6146106ca57806373a5d17c146106df57806376032f0e146107275780638360bcb11461075f5780638da5cb5b1461077f57600080fd5b806323b872dd116102345780634f6ccce7116101ed57806362fe4f86116101c757806362fe4f861461061f5780636352211e146106325780636810b4cf1461065257806368929b5c1461067257600080fd5b80634f6ccce7146105a9578063500b5bd6146105c95780635743d4f3146105e757600080fd5b806323b872dd146104ce5780632f745c59146104ee57806341038d191461050e57806342842e0e14610549578063438b630014610569578063471859571461058957600080fd5b80630d0654d9116102865780630d0654d9146104025780630e3c22cb1461042f57806310f7a7461461044f57806318160ddd1461046f5780631f6f3b741461048e5780631fd8b97e146104ae57600080fd5b806301ffc9a71461031157806304dcd3001461034657806306462b6f1461037357806306fdde0314610395578063081812fc146103aa578063095ea7b3146103e257600080fd5b3661030c57604080513381523460208201527f64c983f10188c30a885d77970aa5aae9a86e80ef9b459ad33cc620eb5999e070910160405180910390a1005b600080fd5b34801561031d57600080fd5b5061033161032c366004614dd4565b610b22565b60405190151581526020015b60405180910390f35b34801561035257600080fd5b5061036661036136600461532a565b610b33565b60405161033d9190615615565b34801561037f57600080fd5b5061039361038e366004614ae9565b610bcd565b005b3480156103a157600080fd5b50610366610c22565b3480156103b657600080fd5b506103ca6103c536600461532a565b610cb4565b6040516001600160a01b03909116815260200161033d565b3480156103ee57600080fd5b506103936103fd366004614c4a565b610d3c565b34801561040e57600080fd5b5061042261041d366004615138565b610e52565b60405161033d91906155b5565b34801561043b57600080fd5b5061039361044a366004614ae9565b61158c565b34801561045b57600080fd5b5061039361046a366004614fca565b6115d8565b34801561047b57600080fd5b506009545b60405190815260200161033d565b34801561049a57600080fd5b506104226104a936600461527c565b611a26565b3480156104ba57600080fd5b506103936104c93660046152c0565b611aa2565b3480156104da57600080fd5b506103936104e9366004614b5c565b611b52565b3480156104fa57600080fd5b50610480610509366004614c4a565b611b83565b34801561051a57600080fd5b50610331610529366004614e0e565b8051602081830181018051601d8252928201919093012091525460ff1681565b34801561055557600080fd5b50610393610564366004614b5c565b611c19565b34801561057557600080fd5b50610422610584366004614ae9565b611c34565b34801561059557600080fd5b506103936105a4366004614f67565b611cd5565b3480156105b557600080fd5b506104806105c436600461532a565b61221a565b3480156105d557600080fd5b506011546001600160a01b03166103ca565b3480156105f357600080fd5b50610480610602366004614e0e565b8051602081830181018051601f8252928201919093012091525481565b61039361062d366004614efe565b6122ad565b34801561063e57600080fd5b506103ca61064d36600461532a565b6129d5565b34801561065e57600080fd5b5061039361066d366004615096565b612a4c565b34801561067e57600080fd5b5061048061068d366004614e0e565b805160208183018101805160198252928201919093012091525481565b3480156106b657600080fd5b506104806106c5366004614ae9565b612e6a565b3480156106d657600080fd5b50610393612ef1565b3480156106eb57600080fd5b506104806106fa366004614eb8565b81516020818401810180516022825292820194820194909420919093529091526000908152604090205481565b34801561073357600080fd5b50610480610742366004614e0e565b8051602081830181018051601b8252928201919093012091525481565b34801561076b57600080fd5b5061036661077a366004614e0e565b612f27565b34801561078b57600080fd5b50600b546001600160a01b03166103ca565b3480156107a957600080fd5b506103ca6107b8366004614e0e565b80516020818301810180516023825292820191909301209152546001600160a01b031681565b3480156107ea57600080fd5b50610366612f4b565b3480156107ff57600080fd5b5061048061080e366004614e0e565b8051602081830181018051828252928201919093012091525481565b34801561083657600080fd5b5061084a61084536600461527c565b612f5a565b60405161033d9190615568565b34801561086357600080fd5b50610331610872366004614eb8565b8151602081840181018051601a825292820194820194909420919093529091526000908152604090205460ff1681565b3480156108ae57600080fd5b506103936108bd366004614c1c565b612fdf565b3480156108ce57600080fd5b5061084a6108dd366004614e0e565b612fee565b6103936108f03660046151cc565b613068565b34801561090157600080fd5b50610393610910366004614b9d565b61314e565b34801561092157600080fd5b50610480610930366004614e0e565b805160208183018101805160188252928201919093012091525481565b34801561095957600080fd5b5061036661096836600461532a565b613186565b34801561097957600080fd5b50610331610988366004614e0e565b805160208183018101805160148252928201919093012091525460ff1681565b3480156109b457600080fd5b506104806109c3366004614eb8565b81516020818401810180516021825292820194820194909420919093529091526000908152604090205481565b3480156109fc57600080fd5b5061048060295481565b348015610a1257600080fd5b50610a41610a21366004614e0e565b805160208183018101805160178252928201919093012091525460ff1681565b60405161033d91906155ed565b348015610a5a57600080fd5b50610331610a69366004614b23565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b348015610aa357600080fd5b50610393610ab2366004614c76565b613191565b348015610ac357600080fd5b50610393610ad2366004614ae9565b613725565b348015610ae357600080fd5b50610331610af2366004614eb8565b81516020818401810180516028825292820194820194909420919093529091526000908152604090205460ff1681565b6000610b2d826137c0565b92915050565b60136020526000908152604090208054610b4c90615940565b80601f0160208091040260200160405190810160405280929190818152602001828054610b7890615940565b8015610bc55780601f10610b9a57610100808354040283529160200191610bc5565b820191906000526020600020905b815481529060010190602001808311610ba857829003601f168201915b505050505081565b600b546001600160a01b03163314610c005760405162461bcd60e51b8152600401610bf790615776565b60405180910390fd5b601280546001600160a01b0319166001600160a01b0392909216919091179055565b606060008054610c3190615940565b80601f0160208091040260200160405190810160405280929190818152602001828054610c5d90615940565b8015610caa5780601f10610c7f57610100808354040283529160200191610caa565b820191906000526020600020905b815481529060010190602001808311610c8d57829003601f168201915b5050505050905090565b6000610cbf826137e5565b610d205760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610bf7565b506000908152600460205260409020546001600160a01b031690565b6000610d47826129d5565b9050806001600160a01b0316836001600160a01b03161415610db55760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610bf7565b336001600160a01b0382161480610dd15750610dd18133610a69565b610e435760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610bf7565b610e4d8383613802565b505050565b6060601487604051610e6491906153ca565b9081526040519081900360200190205460ff1615610eb55760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481b5a5b9d195960921b6044820152606401610bf7565b600e54855185518551604051630903288360e11b81526000946001600160a01b031693631206510693610ef49333938f938f93909290916004016154c4565b602060405180830381600087803b158015610f0e57600080fd5b505af1158015610f22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f469190614db7565b905080610fa35760405162461bcd60e51b815260206004820152602560248201527f73656e646572206973206e6f7420617070726f7665642070617468776179206d60448201526434b73a32b960d91b6064820152608401610bf7565b6001601789604051610fb591906153ca565b9081526040519081900360200190205460ff166003811115610fd957610fd96159d6565b141561113657601888604051610fef91906153ca565b9081526020016040518091039020548311156110405760405162461bcd60e51b815260206004820152601060248201526f6e6f7420656e6f75676820766f74657360801b6044820152606401610bf7565b600e546020878101518782015191870151604051632336629f60e11b81526001600160a01b039094169363466cc53e936110849333938f938b93919060040161551c565b602060405180830381600087803b15801561109e57600080fd5b505af11580156110b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d69190614db7565b9050806110f55760405162461bcd60e51b8152600401610bf7906157fc565b600360178960405161110791906153ca565b908152604051908190036020019020805460ff19166001836003811115611130576111306159d6565b02179055505b600360178960405161114891906153ca565b9081526040519081900360200190205460ff16600381111561116c5761116c6159d6565b146111cd5760405162461bcd60e51b815260206004820152602b60248201527f63616e206f6e6c79206d696e7420666f722062616467657320696e206170707260448201526a6f7665642073746174757360a81b6064820152608401610bf7565b6010546040516060916001600160a01b0316907f8b11cf8a4537c8abe6ddef215a5ad5cfd6c0d5f42e1e6c507a1e8f4d7e79ad5c90601690611210908d906153ca565b90815260405190819003602001812061122b9160240161565b565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161126991906153ca565b6000604051808303816000865af19150503d80600081146112a6576040519150601f19603f3d011682016040523d82523d6000602084013e6112ab565b606091505b509092509050816112bb57600080fd5b6000818060200190518101906112d19190614e42565b6011546040519192506001600160a01b0316907f65a35964691f73fd1604104300b719081f6abd939cb2fc62b713db949a3b240990611314908490602401615615565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161135291906153ca565b6000604051808303816000865af19150503d806000811461138f576040519150601f19603f3d011682016040523d82523d6000602084013e611394565b606091505b509093509150826113a457600080fd5b600060158b6040516113b691906153ca565b908152604051908190036020019020546001600160401b038111156113dd576113dd615a18565b604051908082528060200260200182016040528015611406578160200160208202803683370190505b5090506000805b60158d60405161141d91906153ca565b9081526040519081900360200190205481101561154857611442600c80546001019055565b600c54915061149460158e60405161145a91906153ca565b9081526020016040518091039020828154811061147957611479615a02565b6000918252602090912001546001600160a01b031683613870565b61149e828f6139af565b8b6040516114ac91906153ca565b60405180910390208e6040516114c291906153ca565b604051809103902060158f6040516114da91906153ca565b908152602001604051809103902083815481106114f9576114f9615a02565b60009182526020822001546040516001600160a01b03909116917fb1df09f7ba6c7da56f4dc0278f9fe78f4577bd6299ea8c339c7f5c3c02b6490791a4806115408161597b565b91505061140d565b50600160148d60405161155b91906153ca565b908152604051908190036020019020805491151560ff19909216919091179055509350505050979650505050505050565b600b546001600160a01b031633146115b65760405162461bcd60e51b8152600401610bf790615776565b601180546001600160a01b0319166001600160a01b0392909216919091179055565b600083156117ef5788156116d85760288a6040516115f691906153ca565b9081526020016040518091039020600061160d3390565b6001600160a01b0316815260208101919091526040016000205460ff161561163457600080fd5b601f8a60405161164491906153ca565b90815260200160405180910390205460208b60405161166391906153ca565b9081526020016040518091039020541061167c57600080fd5b601f8a60405161168c91906153ca565b908152602001604051809103902054601b8b6040516116ab91906153ca565b9081526020016040518091039020546116c491906158ca565b9050600081116116d357600080fd5b6117ef565b60278a6040516116e891906153ca565b90815260408051602092819003830190206001600160a01b038b16600090815290835281812033825290925290205460ff161561172457600080fd5b601f8a60405161173491906153ca565b90815260200160405180910390205460228b60405161175391906153ca565b90815260408051602092819003830190206001600160a01b038c16600090815292529020541061178257600080fd5b601f8a60405161179291906153ca565b908152602001604051809103902054601c8b6040516117b191906153ca565b90815260408051602092819003830190206001600160a01b038c16600090815292529020546117e091906158ca565b9050600081116117ef57600080fd5b6117fd338b848a8a8a613a3a565b508315611a0e5788156118e957604051600090339083908381818185875af1925050503d806000811461184c576040519150601f19603f3d011682016040523d82523d6000602084013e611851565b606091505b505090508061185f57600080fd5b600160288c60405161187191906153ca565b908152602001604051809103902060006118883390565b6001600160a01b031681526020808201929092526040908101600020805460ff19169315159390931790925590516118c1908d906153ca565b90815260405190819003602001902080549060006118de8361597b565b919050555050611a0e565b6001600160a01b03881663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b15801561194157600080fd5b505af1158015611955573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119799190614db7565b50600160278b60405161198c91906153ca565b90815260408051602092819003830181206001600160a01b038d1660009081529084528281203382529093529120805460ff1916921515929092179091556022906119d8908c906153ca565b90815260408051602092819003830190206001600160a01b038b16600090815292528120805491611a088361597b565b91905055505b611a1a338b8585613c9a565b50505050505050505050565b6060602683604051611a3891906153ca565b90815260408051918290036020908101832060008681529082528290208054808302850183019093528284529190830182828015611a9557602002820191906000526020600020905b815481526020019060010190808311611a81575b5050505050905092915050565b6001601f86604051611ab491906153ca565b908152602001604051809103902054611acd91906158fd565b8411611b1b5760405162461bcd60e51b815260206004820152601960248201527f42616467654e4654203a20696e76616c6964206e756d626572000000000000006044820152606401610bf7565b611b29338686868686613a3a565b5083601f86604051611b3b91906153ca565b908152604051908190036020019020555050505050565b611b5c3382613df6565b611b785760405162461bcd60e51b8152600401610bf7906157ab565b610e4d838383613ee0565b6000611b8e83612e6a565b8210611bf05760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610bf7565b506001600160a01b03919091166000908152600760209081526040808320938352929052205490565b610e4d8383836040518060200160405280600081525061314e565b60606000611c4183612e6a565b90506000816001600160401b03811115611c5d57611c5d615a18565b604051908082528060200260200182016040528015611c86578160200160208202803683370190505b50905060005b82811015611ccd57611c9e8582611b83565b828281518110611cb057611cb0615a02565b602090810291909101015280611cc58161597b565b915050611c8c565b509392505050565b6002601784604051611ce791906153ca565b9081526040519081900360200190205460ff166003811115611d0b57611d0b6159d6565b14611d515760405162461bcd60e51b8152602060048201526016602482015275696e636f72726563742062616467652073746174757360501b6044820152606401610bf7565b60105460405160009182916001600160a01b03909116907f8b11cf8a4537c8abe6ddef215a5ad5cfd6c0d5f42e1e6c507a1e8f4d7e79ad5c90601690611d989089906153ca565b908152604051908190036020018120611db39160240161565b565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611df191906153ca565b6000604051808303816000865af19150503d8060008114611e2e576040519150601f19603f3d011682016040523d82523d6000602084013e611e33565b606091505b509150915081611e4257600080fd5b600081806020019051810190611e589190614e42565b600f546040519192506001600160a01b0316907f0d58dd088cbe688b8c61e8f36a658aa45125fbcff8c7e7af836d3925770f01bc90611e9b908490602401615615565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611ed991906153ca565b6000604051808303816000865af19150503d8060008114611f16576040519150601f19603f3d011682016040523d82523d6000602084013e611f1b565b606091505b50909350915082611f2b57600080fd5b600082806020019051810190611f419190614b06565b90506001600160a01b038116611f5657600080fd5b851561207c57601d87604051611f6c91906153ca565b9081526040519081900360200190205460ff1615611fcc5760405162461bcd60e51b815260206004820152601d60248201527f6e61746976652072657761726420616c726561647920636c61696d65640000006044820152606401610bf7565b806001600160a01b0316601b88604051611fe691906153ca565b9081526040519081900360200181205490600081818185875af1925050503d8060008114612030576040519150601f19603f3d011682016040523d82523d6000602084013e612035565b606091505b5050809450508361204557600080fd5b6001601d8860405161205791906153ca565b908152604051908190036020019020805491151560ff19909216919091179055612211565b601e8760405161208c91906153ca565b90815260408051602092819003830190206001600160a01b0388166000908152925290205460ff16156121015760405162461bcd60e51b815260206004820152601c60248201527f65726332302072657761726420616c726561647920636c61696d6564000000006044820152606401610bf7565b846001600160a01b031663a9059cbb82601c8a60405161212191906153ca565b9081526040805191829003602090810183206001600160a01b038c166000908152915220546001600160e01b031960e085901b16825261217892916004016001600160a01b03929092168252602082015260400190565b602060405180830381600087803b15801561219257600080fd5b505af11580156121a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ca9190614db7565b506001601e886040516121dd91906153ca565b90815260408051602092819003830190206001600160a01b038916600090815292529020805460ff19169115159190911790555b50505050505050565b600061222560095490565b82106122885760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610bf7565b6009828154811061229b5761229b615a02565b90600052602060002001549050919050565b60016017856040516122bf91906153ca565b9081526040519081900360200190205460ff1660038111156122e3576122e36159d6565b1480612322575060036017856040516122fc91906153ca565b9081526040519081900360200190205460ff166003811115612320576123206159d6565b145b61236e5760405162461bcd60e51b815260206004820152601a60248201527f6261646765206e6f742070656e64696e672f617070726f7665640000000000006044820152606401610bf7565b6000601f8560405161238091906153ca565b908152602001604051809103902054116123ce5760405162461bcd60e51b815260206004820152600f60248201526e6e6f2075736572207265776172647360881b6044820152606401610bf7565b600f5460408051600481526024810182526020810180516001600160e01b0316631c3b702f60e11b179052905160009283926001600160a01b039091169161241691906153ca565b6000604051808303816000865af19150503d8060008114612453576040519150601f19603f3d011682016040523d82523d6000602084013e612458565b606091505b50915091508161246757600080fd5b60008180602001905181019061247d9190614b06565b905060006127106029548661249291906158de565b61249c91906158ca565b905085156125fe576124ae81866158b2565b3410156124ef5760405162461bcd60e51b815260206004820152600f60248201526e1b9bdd08195b9bdd59da081cd95b9d608a1b6044820152606401610bf7565b6040516001600160a01b038316908290600081818185875af1925050503d8060008114612538576040519150601f19603f3d011682016040523d82523d6000602084013e61253d565b606091505b5050809450508361254d57600080fd5b84601b8960405161255e91906153ca565b9081526020016040518091039020600082825461257b91906158b2565b9091555061258b905081866158b2565b3411156125f957338161259e87346158fd565b6125a891906158fd565b604051600081818185875af1925050503d80600081146125e4576040519150601f19603f3d011682016040523d82523d6000602084013e6125e9565b606091505b505080945050836125f957600080fd5b6129cb565b6001600160a01b03871661261157600080fd5b6010546040516001600160a01b03909116907f8b11cf8a4537c8abe6ddef215a5ad5cfd6c0d5f42e1e6c507a1e8f4d7e79ad5c90601690612653908c906153ca565b90815260405190819003602001812061266e9160240161565b565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516126ac91906153ca565b6000604051808303816000865af19150503d80600081146126e9576040519150601f19603f3d011682016040523d82523d6000602084013e6126ee565b606091505b509094509250836126fe57600080fd5b6000838060200190518101906127149190614e42565b6011546040519192506001600160a01b0316907f11f69039648f0dd87bd7c96fa7501d8c9b90ae27f5d68bb2f9adfc6ae113637a9061275b90849046908d90602401615628565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161279991906153ca565b6000604051808303816000865af19150503d80600081146127d6576040519150601f19603f3d011682016040523d82523d6000602084013e6127db565b606091505b509095509350846127eb57600080fd5b838060200190518101906127ff9190614db7565b9450846128435760405162461bcd60e51b8152602060048201526012602482015271115490cc8c081b9bdd08185c1c1c9bdd995960721b6044820152606401610bf7565b6001600160a01b0388166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b039182166004820152908616602482015260448101859052606401602060405180830381600087803b1580156128a357600080fd5b505af11580156128b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128db9190614db7565b506001600160a01b0388166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101899052606401602060405180830381600087803b15801561293a57600080fd5b505af115801561294e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129729190614db7565b5085601c8a60405161298491906153ca565b908152602001604051809103902060008a6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546129c491906158b2565b9091555050505b5050505050505050565b6000818152600260205260408120546001600160a01b031680610b2d5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610bf7565b6001601787604051612a5e91906153ca565b9081526040519081900360200190205460ff166003811115612a8257612a826159d6565b14612ac35760405162461bcd60e51b81526020600482015260116024820152706261646765206e6f742070656e64696e6760781b6044820152606401610bf7565b601a86604051612ad391906153ca565b90815260200160405180910390206000612aea3390565b6001600160a01b0316815260208101919091526040016000205460ff1615612b545760405162461bcd60e51b815260206004820152601c60248201527f616c726561647920766f74656420666f722074686973206261646765000000006044820152606401610bf7565b84604051602001612b6591906153ca565b60405160208183030381529060405280519060200120601687604051612b8b91906153ca565b9081526020016040518091039020604051602001612ba99190615415565b6040516020818303038152906040528051906020012014612c025760405162461bcd60e51b81526020600482015260136024820152721a5b98dbdc9c9958dd081c185d1a1dd85e5259606a1b6044820152606401610bf7565b600e54845184518451604051630903288360e11b81526000946001600160a01b031693631206510693612c419333938e938e93909290916004016154c4565b602060405180830381600087803b158015612c5b57600080fd5b505af1158015612c6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c939190614db7565b905080612cb25760405162461bcd60e51b8152600401610bf790615732565b600e546020868101518682015191860151604051632336629f60e11b81526000946001600160a01b03169363466cc53e93612cf89333938f938b9392909160040161551c565b602060405180830381600087803b158015612d1257600080fd5b505af1158015612d26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d4a9190614db7565b905080612d695760405162461bcd60e51b8152600401610bf7906157fc565b601988604051612d7991906153ca565b9081526040519081900360200190208054906000612d968361597b565b91905055506001601a89604051612dad91906153ca565b90815260200160405180910390206000612dc43390565b6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555082601989604051612e0c91906153ca565b908152602001604051809103902054106129cb576002601789604051612e3291906153ca565b908152604051908190036020019020805460ff19166001836003811115612e5b57612e5b6159d6565b02179055505050505050505050565b60006001600160a01b038216612ed55760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610bf7565b506001600160a01b031660009081526003602052604090205490565b600b546001600160a01b03163314612f1b5760405162461bcd60e51b8152600401610bf790615776565b612f256000614087565b565b805160208183018101805160168252928201919093012091528054610b4c90615940565b606060018054610c3190615940565b6060602583604051612f6c91906153ca565b90815260408051918290036020908101832060008681529082528290208054808302850183019093528284529190830182828015611a9557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612fb5575050505050905092915050565b612fea3383836140d9565b5050565b606060158260405161300091906153ca565b908152604080519182900360209081018320805480830285018301909352828452919083018282801561305c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161303e575b50505050509050919050565b600060178860405161307a91906153ca565b9081526040519081900360200190205460ff16600381111561309e5761309e6159d6565b146130a857600080fd5b60016017886040516130ba91906153ca565b908152604051908190036020019020805460ff191660018360038111156130e3576130e36159d6565b0217905550856016886040516130f991906153ca565b9081526020016040518091039020908051906020019061311a9291906148cf565b5084601f8860405161312c91906153ca565b90815260405190819003602001902055831561221157612211878484846122ad565b6131583383613df6565b6131745760405162461bcd60e51b8152600401610bf7906157ab565b613180848484846141a8565b50505050565b6060610b2d826141db565b60016017876040516131a391906153ca565b9081526040519081900360200190205460ff1660038111156131c7576131c76159d6565b146132095760405162461bcd60e51b8152602060048201526012602482015271737461747573206e6f742070656e64696e6760701b6044820152606401610bf7565b601a8660405161321991906153ca565b908152602001604051809103902060006132303390565b6001600160a01b0316815260208101919091526040016000205460ff161561329a5760405162461bcd60e51b815260206004820152601c60248201527f616c726561647920766f74656420666f722074686973206261646765000000006044820152606401610bf7565b846040516020016132ab91906153ca565b604051602081830303815290604052805190602001206016876040516132d191906153ca565b90815260200160405180910390206040516020016132ef9190615415565b60405160208183030381529060405280519060200120146133485760405162461bcd60e51b81526020600482015260136024820152721a5b98dbdc9c9958dd081c185d1a1dd85e5259606a1b6044820152606401610bf7565b600e54845184518451604051630903288360e11b81526000946001600160a01b0316936312065106936133879333938e938e93909290916004016154c4565b602060405180830381600087803b1580156133a157600080fd5b505af11580156133b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133d99190614db7565b9050806133f85760405162461bcd60e51b8152600401610bf790615732565b600e546020868101518682015191860151604051632336629f60e11b81526000946001600160a01b03169363466cc53e9361343e9333938f938b9392909160040161551c565b602060405180830381600087803b15801561345857600080fd5b505af115801561346c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134909190614db7565b9050806134af5760405162461bcd60e51b8152600401610bf7906157fc565b6018886040516134bf91906153ca565b90815260405190819003602001902080549060006134dc8361597b565b91905055506001601a896040516134f391906153ca565b9081526020016040518091039020600061350a3390565b6001600160a01b0316815260208101919091526040908101600020805460ff19169215159290921790915551601890613544908a906153ca565b9081526020016040518091039020546001141561367657600089511161359a5760405162461bcd60e51b815260206004820152600b60248201526a656d70747920617272617960a81b6044820152606401610bf7565b886015896040516135ab91906153ca565b908152602001604051809103902090805190602001906135cc929190614953565b506018886040516135dd91906153ca565b908152602001604051809103902054831161367157600360178960405161360491906153ca565b908152604051908190036020019020805460ff1916600183600381111561362d5761362d6159d6565b02179055508760405161364091906153ca565b604051908190038120907fcb7144701e8d0b3465bbe141996dd943a0458bba214e98eac12ba128ffe44c0890600090a25b61371a565b8260188960405161368791906153ca565b9081526020016040518091039020541061371a5760036017896040516136ad91906153ca565b908152604051908190036020019020805460ff191660018360038111156136d6576136d66159d6565b0217905550876040516136e991906153ca565b604051908190038120907fcb7144701e8d0b3465bbe141996dd943a0458bba214e98eac12ba128ffe44c0890600090a25b505050505050505050565b600b546001600160a01b0316331461374f5760405162461bcd60e51b8152600401610bf790615776565b6001600160a01b0381166137b45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610bf7565b6137bd81614087565b50565b60006001600160e01b0319821663780e9d6360e01b1480610b2d5750610b2d8261434a565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190613837826129d5565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6001600160a01b0382166138c65760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610bf7565b6138cf816137e5565b1561391c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610bf7565b6139286000838361439a565b6001600160a01b03821660009081526003602052604081208054600192906139519084906158b2565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6139b8826137e5565b613a1b5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610bf7565b60008281526006602090815260409091208251610e4d928401906148cf565b60008087304660218a604051613a5091906153ca565b90815260408051602092819003830181206001600160a01b038f1660009081529084529190912054613a8b9594939290918c918e910161536f565b60408051601f1981840301815282825280516020918201206011546004855260248501845291840180516001600160e01b031663a5207df560e01b179052915191935060009283926001600160a01b0390921691613ae991906153ca565b6000604051808303816000865af19150503d8060008114613b26576040519150601f19603f3d011682016040523d82523d6000602084013e613b2b565b606091505b509150915081613b3a57600080fd5b600081806020019051810190613b509190614b06565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101869052909150600190605c0160408051601f198184030181528282528051602091820120600084529083018083525260ff891690820152606081018a90526080810189905260a0016020604051602081039080840390855afa158015613be7573d6000803e3d6000fd5b505050602060405103516001600160a01b0316816001600160a01b031614613c445760405162461bcd60e51b815260206004820152601060248201526f24b731b7b93932b1ba1039b4b3b732b960811b6044820152606401610bf7565b60218a604051613c5491906153ca565b90815260408051602092819003830190206001600160a01b038e16600090815292528120805491613c848361597b565b9091555060019c9b505050505050505050505050565b602483604051613caa91906153ca565b908152604080516020928190038301902060008481529083528181206001600160a01b038816825290925290205460ff1615613ce557613180565b6000613cf5600c80546001019055565b50600c54613d033382613870565b613d0d81846139af565b602584604051613d1d91906153ca565b9081526040805191829003602090810183206000868152908252918220805460018101825590835291200180546001600160a01b0388166001600160a01b0319909116179055602690613d719086906153ca565b9081526040805191829003602090810183206000868152908252918220805460018181018355918452919092200183905590602490613db19087906153ca565b9081526040805160209281900383019020600095865282528085206001600160a01b0398909816855296905294909120805460ff191694151594909417909355505050565b6000613e01826137e5565b613e625760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610bf7565b6000613e6d836129d5565b9050806001600160a01b0316846001600160a01b03161480613ea85750836001600160a01b0316613e9d84610cb4565b6001600160a01b0316145b80613ed857506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316613ef3826129d5565b6001600160a01b031614613f575760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610bf7565b6001600160a01b038216613fb95760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610bf7565b613fc483838361439a565b613fcf600082613802565b6001600160a01b0383166000908152600360205260408120805460019290613ff89084906158fd565b90915550506001600160a01b03821660009081526003602052604081208054600192906140269084906158b2565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600b80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316141561413b5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610bf7565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6141b3848484613ee0565b6141bf848484846143a5565b6131805760405162461bcd60e51b8152600401610bf7906156e0565b60606141e6826137e5565b61424c5760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b6064820152608401610bf7565b6000828152600660205260408120805461426590615940565b80601f016020809104026020016040519081016040528092919081815260200182805461429190615940565b80156142de5780601f106142b3576101008083540402835291602001916142de565b820191906000526020600020905b8154815290600101906020018083116142c157829003601f168201915b5050505050905060006142fc60408051602081019091526000815290565b905080516000141561430f575092915050565b8151156143415780826040516020016143299291906153e6565b60405160208183030381529060405292505050919050565b613ed8846144b2565b60006001600160e01b031982166380ac58cd60e01b148061437b57506001600160e01b03198216635b5e139f60e01b145b80610b2d57506301ffc9a760e01b6001600160e01b0319831614610b2d565b610e4d83838361458a565b60006001600160a01b0384163b156144a757604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906143e9903390899088908890600401615487565b602060405180830381600087803b15801561440357600080fd5b505af1925050508015614433575060408051601f3d908101601f1916820190925261443091810190614df1565b60015b61448d573d808015614461576040519150601f19603f3d011682016040523d82523d6000602084013e614466565b606091505b5080516144855760405162461bcd60e51b8152600401610bf7906156e0565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050613ed8565b506001949350505050565b60606144bd826137e5565b6145215760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610bf7565b600061453860408051602081019091526000815290565b905060008151116145585760405180602001604052806000815250614583565b8061456284614642565b6040516020016145739291906153e6565b6040516020818303038152906040525b9392505050565b6001600160a01b0383166145e5576145e081600980546000838152600a60205260408120829055600182018355919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0155565b614608565b816001600160a01b0316836001600160a01b03161461460857614608838261473f565b6001600160a01b03821661461f57610e4d816147dc565b826001600160a01b0316826001600160a01b031614610e4d57610e4d828261488b565b6060816146665750506040805180820190915260018152600360fc1b602082015290565b8160005b8115614690578061467a8161597b565b91506146899050600a836158ca565b915061466a565b6000816001600160401b038111156146aa576146aa615a18565b6040519080825280601f01601f1916602001820160405280156146d4576020820181803683370190505b5090505b8415613ed8576146e96001836158fd565b91506146f6600a86615996565b6147019060306158b2565b60f81b81838151811061471657614716615a02565b60200101906001600160f81b031916908160001a905350614738600a866158ca565b94506146d8565b6000600161474c84612e6a565b61475691906158fd565b6000838152600860205260409020549091508082146147a9576001600160a01b03841660009081526007602090815260408083208584528252808320548484528184208190558352600890915290208190555b5060009182526008602090815260408084208490556001600160a01b039094168352600781528383209183525290812055565b6009546000906147ee906001906158fd565b6000838152600a60205260408120546009805493945090928490811061481657614816615a02565b90600052602060002001549050806009838154811061483757614837615a02565b6000918252602080832090910192909255828152600a9091526040808220849055858252812055600980548061486f5761486f6159ec565b6001900381819060005260206000200160009055905550505050565b600061489683612e6a565b6001600160a01b039093166000908152600760209081526040808320868452825280832085905593825260089052919091209190915550565b8280546148db90615940565b90600052602060002090601f0160209004810192826148fd5760008555614943565b82601f1061491657805160ff1916838001178555614943565b82800160010185558215614943579182015b82811115614943578251825591602001919060010190614928565b5061494f9291506149a8565b5090565b828054828255906000526020600020908101928215614943579160200282015b8281111561494357825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614973565b5b8082111561494f57600081556001016149a9565b60006149d06149cb8461588b565b61585b565b90508281528383830111156149e457600080fd5b828260208301376000602084830101529392505050565b600082601f830112614a0c57600080fd5b614a14615833565b808385604086011115614a2657600080fd5b60005b6002811015614a48578135845260209384019390910190600101614a29565b509095945050505050565b600082601f830112614a6457600080fd5b614a6c615833565b808385604086011115614a7e57600080fd5b60005b6002811015614a4857614a9382614ad8565b84526020938401939190910190600101614a81565b8035614ab381615a43565b919050565b600082601f830112614ac957600080fd5b614583838335602085016149bd565b803560ff81168114614ab357600080fd5b600060208284031215614afb57600080fd5b813561458381615a2e565b600060208284031215614b1857600080fd5b815161458381615a2e565b60008060408385031215614b3657600080fd5b8235614b4181615a2e565b91506020830135614b5181615a2e565b809150509250929050565b600080600060608486031215614b7157600080fd5b8335614b7c81615a2e565b92506020840135614b8c81615a2e565b929592945050506040919091013590565b60008060008060808587031215614bb357600080fd5b8435614bbe81615a2e565b93506020850135614bce81615a2e565b92506040850135915060608501356001600160401b03811115614bf057600080fd5b8501601f81018713614c0157600080fd5b614c10878235602084016149bd565b91505092959194509250565b60008060408385031215614c2f57600080fd5b8235614c3a81615a2e565b91506020830135614b5181615a43565b60008060408385031215614c5d57600080fd5b8235614c6881615a2e565b946020939093013593505050565b6000806000806000806000610140888a031215614c9257600080fd5b6001600160401b038089351115614ca857600080fd5b883589018a601f820112614cbb57600080fd5b803582811115614ccd57614ccd615a18565b8060051b614cdd6020820161585b565b80838252602082019150602085018f6020858801011115614cfd57600080fd5b600095505b84861015614d2b57614d148135615a2e565b803583526001959095019460209283019201614d02565b509b5050505060208a0135905081811115614d4557600080fd5b614d518b828c01614ab8565b975050604089013581811115614d6657600080fd5b614d728b828c01614ab8565b96505050614d838960608a016149fb565b9350614d928960a08a016149fb565b9250614da18960e08a01614a53565b9150610120880135905092959891949750929550565b600060208284031215614dc957600080fd5b815161458381615a43565b600060208284031215614de657600080fd5b813561458381615a51565b600060208284031215614e0357600080fd5b815161458381615a51565b600060208284031215614e2057600080fd5b81356001600160401b03811115614e3657600080fd5b613ed884828501614ab8565b600060208284031215614e5457600080fd5b81516001600160401b03811115614e6a57600080fd5b8201601f81018413614e7b57600080fd5b8051614e896149cb8261588b565b818152856020838501011115614e9e57600080fd5b614eaf826020830160208601615914565b95945050505050565b60008060408385031215614ecb57600080fd5b82356001600160401b03811115614ee157600080fd5b614eed85828601614ab8565b9250506020830135614b5181615a2e565b60008060008060808587031215614f1457600080fd5b84356001600160401b03811115614f2a57600080fd5b614f3687828801614ab8565b9450506020850135614f4781615a2e565b92506040850135614f5781615a43565b9396929550929360600135925050565b600080600060608486031215614f7c57600080fd5b83356001600160401b03811115614f9257600080fd5b614f9e86828701614ab8565b9350506020840135614faf81615a43565b91506040840135614fbf81615a2e565b809150509250925092565b60008060008060008060008060006101208a8c031215614fe957600080fd5b89356001600160401b038082111561500057600080fd5b61500c8d838e01614ab8565b9a5060208c0135915061501e82615a43565b90985060408b01359061503082615a2e565b81985060608c0135975060808c0135965061504d60a08d01614ad8565b955061505b60c08d01614aa8565b945060e08c013591508082111561507157600080fd5b5061507e8c828d01614ab8565b9250506101008a013590509295985092959850929598565b60008060008060008061012087890312156150b057600080fd5b86356001600160401b03808211156150c757600080fd5b6150d38a838b01614ab8565b975060208901359150808211156150e957600080fd5b506150f689828a01614ab8565b95505061510688604089016149fb565b935061511588608089016149fb565b92506151248860c08901614a53565b915061010087013590509295509295509295565b6000806000806000806000610140888a03121561515457600080fd5b87356001600160401b038082111561516b57600080fd5b6151778b838c01614ab8565b985060208a013591508082111561518d57600080fd5b6151998b838c01614ab8565b975060408a01359150808211156151af57600080fd5b506151bc8a828b01614ab8565b955050614d838960608a016149fb565b600080600080600080600060e0888a0312156151e757600080fd5b87356001600160401b03808211156151fe57600080fd5b61520a8b838c01614ab8565b985060208a013591508082111561522057600080fd5b5061522d8a828b01614ab8565b96505060408801359450606088013561524581615a43565b9350608088013561525581615a2e565b925060a088013561526581615a43565b8092505060c0880135905092959891949750929550565b6000806040838503121561528f57600080fd5b82356001600160401b038111156152a557600080fd5b6152b185828601614ab8565b95602094909401359450505050565b600080600080600060a086880312156152d857600080fd5b85356001600160401b038111156152ee57600080fd5b6152fa88828901614ab8565b95505060208601359350604086013592506060860135915061531e60808701614ad8565b90509295509295909350565b60006020828403121561533c57600080fd5b5035919050565b6000815180845261535b816020860160208601615914565b601f01601f19169290920160200192915050565b60006bffffffffffffffffffffffff19808960601b168352808860601b1660148401525085602883015284604883015283606883015282516153b8816088850160208701615914565b91909101608801979650505050505050565b600082516153dc818460208701615914565b9190910192915050565b600083516153f8818460208801615914565b83519083019061540c818360208801615914565b01949350505050565b600080835461542381615940565b6001828116801561543b576001811461544c5761547b565b60ff1984168752828701945061547b565b8760005260208060002060005b858110156154725781548a820152908401908201615459565b50505082870194505b50929695505050505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906154ba90830184615343565b9695505050505050565b6001600160a01b038716815260c0602082018190526000906154e890830188615343565b82810360408401526154fa8188615343565b60608401969096525050608081019290925260ff1660a0909101529392505050565b6001600160a01b038716815260c06020820181905260009061554090830188615343565b905085604083015284606083015283608083015260ff831660a0830152979650505050505050565b6020808252825182820181905260009190848201906040850190845b818110156155a95783516001600160a01b031683529284019291840191600101615584565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156155a9578351835292840192918401916001016155d1565b602081016004831061560f57634e487b7160e01b600052602160045260246000fd5b91905290565b6020815260006145836020830184615343565b60608152600061563b6060830186615343565b6020830194909452506001600160a01b0391909116604090910152919050565b600060208083526000845461566f81615940565b8084870152604060018084166000811461569057600181146156a4576156d2565b60ff198516898401526060890195506156d2565b896000528660002060005b858110156156ca5781548b82018601529083019088016156af565b8a0184019650505b509398975050505050505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526024908201527f73656e646572206973206e6f7420617070726f7665642070617468776179207660408201526337ba32b960e11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601b908201527f696e636f727265637420766f746573206e65656465642073656e740000000000604082015260600190565b604080519081016001600160401b038111828210171561585557615855615a18565b60405290565b604051601f8201601f191681016001600160401b038111828210171561588357615883615a18565b604052919050565b60006001600160401b038211156158a4576158a4615a18565b50601f01601f191660200190565b600082198211156158c5576158c56159aa565b500190565b6000826158d9576158d96159c0565b500490565b60008160001904831182151516156158f8576158f86159aa565b500290565b60008282101561590f5761590f6159aa565b500390565b60005b8381101561592f578181015183820152602001615917565b838111156131805750506000910152565b600181811c9082168061595457607f821691505b6020821081141561597557634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561598f5761598f6159aa565b5060010190565b6000826159a5576159a56159c0565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146137bd57600080fd5b80151581146137bd57600080fd5b6001600160e01b0319811681146137bd57600080fdfea2646970667358221220ecc4d61513f098b14e43da5769d91df51969cc401594d69fa7c45d742e0c0f3e64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106102cd5760003560e01c806370a0823111610175578063aaa545d0116100dc578063cef9fab711610095578063e985e9c51161006f578063e985e9c514610a4e578063ebcb309a14610a97578063f2fde38b14610ab7578063f4f5d02914610ad757600080fd5b8063cef9fab7146109a8578063ddca3f43146109f0578063e8ca64f414610a0657600080fd5b8063aaa545d0146108c2578063b2986b4c146108e2578063b88d4fde146108f5578063b99ef1fa14610915578063c87b56dd1461094d578063ce15ef811461096d57600080fd5b8063956f49bf1161012e578063956f49bf1461079d57806395d89b41146107de5780639a199401146107f35780639e1a90d51461082a5780639e1b567c14610857578063a22cb465146108a257600080fd5b806370a08231146106aa578063715018a6146106ca57806373a5d17c146106df57806376032f0e146107275780638360bcb11461075f5780638da5cb5b1461077f57600080fd5b806323b872dd116102345780634f6ccce7116101ed57806362fe4f86116101c757806362fe4f861461061f5780636352211e146106325780636810b4cf1461065257806368929b5c1461067257600080fd5b80634f6ccce7146105a9578063500b5bd6146105c95780635743d4f3146105e757600080fd5b806323b872dd146104ce5780632f745c59146104ee57806341038d191461050e57806342842e0e14610549578063438b630014610569578063471859571461058957600080fd5b80630d0654d9116102865780630d0654d9146104025780630e3c22cb1461042f57806310f7a7461461044f57806318160ddd1461046f5780631f6f3b741461048e5780631fd8b97e146104ae57600080fd5b806301ffc9a71461031157806304dcd3001461034657806306462b6f1461037357806306fdde0314610395578063081812fc146103aa578063095ea7b3146103e257600080fd5b3661030c57604080513381523460208201527f64c983f10188c30a885d77970aa5aae9a86e80ef9b459ad33cc620eb5999e070910160405180910390a1005b600080fd5b34801561031d57600080fd5b5061033161032c366004614dd4565b610b22565b60405190151581526020015b60405180910390f35b34801561035257600080fd5b5061036661036136600461532a565b610b33565b60405161033d9190615615565b34801561037f57600080fd5b5061039361038e366004614ae9565b610bcd565b005b3480156103a157600080fd5b50610366610c22565b3480156103b657600080fd5b506103ca6103c536600461532a565b610cb4565b6040516001600160a01b03909116815260200161033d565b3480156103ee57600080fd5b506103936103fd366004614c4a565b610d3c565b34801561040e57600080fd5b5061042261041d366004615138565b610e52565b60405161033d91906155b5565b34801561043b57600080fd5b5061039361044a366004614ae9565b61158c565b34801561045b57600080fd5b5061039361046a366004614fca565b6115d8565b34801561047b57600080fd5b506009545b60405190815260200161033d565b34801561049a57600080fd5b506104226104a936600461527c565b611a26565b3480156104ba57600080fd5b506103936104c93660046152c0565b611aa2565b3480156104da57600080fd5b506103936104e9366004614b5c565b611b52565b3480156104fa57600080fd5b50610480610509366004614c4a565b611b83565b34801561051a57600080fd5b50610331610529366004614e0e565b8051602081830181018051601d8252928201919093012091525460ff1681565b34801561055557600080fd5b50610393610564366004614b5c565b611c19565b34801561057557600080fd5b50610422610584366004614ae9565b611c34565b34801561059557600080fd5b506103936105a4366004614f67565b611cd5565b3480156105b557600080fd5b506104806105c436600461532a565b61221a565b3480156105d557600080fd5b506011546001600160a01b03166103ca565b3480156105f357600080fd5b50610480610602366004614e0e565b8051602081830181018051601f8252928201919093012091525481565b61039361062d366004614efe565b6122ad565b34801561063e57600080fd5b506103ca61064d36600461532a565b6129d5565b34801561065e57600080fd5b5061039361066d366004615096565b612a4c565b34801561067e57600080fd5b5061048061068d366004614e0e565b805160208183018101805160198252928201919093012091525481565b3480156106b657600080fd5b506104806106c5366004614ae9565b612e6a565b3480156106d657600080fd5b50610393612ef1565b3480156106eb57600080fd5b506104806106fa366004614eb8565b81516020818401810180516022825292820194820194909420919093529091526000908152604090205481565b34801561073357600080fd5b50610480610742366004614e0e565b8051602081830181018051601b8252928201919093012091525481565b34801561076b57600080fd5b5061036661077a366004614e0e565b612f27565b34801561078b57600080fd5b50600b546001600160a01b03166103ca565b3480156107a957600080fd5b506103ca6107b8366004614e0e565b80516020818301810180516023825292820191909301209152546001600160a01b031681565b3480156107ea57600080fd5b50610366612f4b565b3480156107ff57600080fd5b5061048061080e366004614e0e565b8051602081830181018051828252928201919093012091525481565b34801561083657600080fd5b5061084a61084536600461527c565b612f5a565b60405161033d9190615568565b34801561086357600080fd5b50610331610872366004614eb8565b8151602081840181018051601a825292820194820194909420919093529091526000908152604090205460ff1681565b3480156108ae57600080fd5b506103936108bd366004614c1c565b612fdf565b3480156108ce57600080fd5b5061084a6108dd366004614e0e565b612fee565b6103936108f03660046151cc565b613068565b34801561090157600080fd5b50610393610910366004614b9d565b61314e565b34801561092157600080fd5b50610480610930366004614e0e565b805160208183018101805160188252928201919093012091525481565b34801561095957600080fd5b5061036661096836600461532a565b613186565b34801561097957600080fd5b50610331610988366004614e0e565b805160208183018101805160148252928201919093012091525460ff1681565b3480156109b457600080fd5b506104806109c3366004614eb8565b81516020818401810180516021825292820194820194909420919093529091526000908152604090205481565b3480156109fc57600080fd5b5061048060295481565b348015610a1257600080fd5b50610a41610a21366004614e0e565b805160208183018101805160178252928201919093012091525460ff1681565b60405161033d91906155ed565b348015610a5a57600080fd5b50610331610a69366004614b23565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b348015610aa357600080fd5b50610393610ab2366004614c76565b613191565b348015610ac357600080fd5b50610393610ad2366004614ae9565b613725565b348015610ae357600080fd5b50610331610af2366004614eb8565b81516020818401810180516028825292820194820194909420919093529091526000908152604090205460ff1681565b6000610b2d826137c0565b92915050565b60136020526000908152604090208054610b4c90615940565b80601f0160208091040260200160405190810160405280929190818152602001828054610b7890615940565b8015610bc55780601f10610b9a57610100808354040283529160200191610bc5565b820191906000526020600020905b815481529060010190602001808311610ba857829003601f168201915b505050505081565b600b546001600160a01b03163314610c005760405162461bcd60e51b8152600401610bf790615776565b60405180910390fd5b601280546001600160a01b0319166001600160a01b0392909216919091179055565b606060008054610c3190615940565b80601f0160208091040260200160405190810160405280929190818152602001828054610c5d90615940565b8015610caa5780601f10610c7f57610100808354040283529160200191610caa565b820191906000526020600020905b815481529060010190602001808311610c8d57829003601f168201915b5050505050905090565b6000610cbf826137e5565b610d205760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610bf7565b506000908152600460205260409020546001600160a01b031690565b6000610d47826129d5565b9050806001600160a01b0316836001600160a01b03161415610db55760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610bf7565b336001600160a01b0382161480610dd15750610dd18133610a69565b610e435760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610bf7565b610e4d8383613802565b505050565b6060601487604051610e6491906153ca565b9081526040519081900360200190205460ff1615610eb55760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481b5a5b9d195960921b6044820152606401610bf7565b600e54855185518551604051630903288360e11b81526000946001600160a01b031693631206510693610ef49333938f938f93909290916004016154c4565b602060405180830381600087803b158015610f0e57600080fd5b505af1158015610f22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f469190614db7565b905080610fa35760405162461bcd60e51b815260206004820152602560248201527f73656e646572206973206e6f7420617070726f7665642070617468776179206d60448201526434b73a32b960d91b6064820152608401610bf7565b6001601789604051610fb591906153ca565b9081526040519081900360200190205460ff166003811115610fd957610fd96159d6565b141561113657601888604051610fef91906153ca565b9081526020016040518091039020548311156110405760405162461bcd60e51b815260206004820152601060248201526f6e6f7420656e6f75676820766f74657360801b6044820152606401610bf7565b600e546020878101518782015191870151604051632336629f60e11b81526001600160a01b039094169363466cc53e936110849333938f938b93919060040161551c565b602060405180830381600087803b15801561109e57600080fd5b505af11580156110b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d69190614db7565b9050806110f55760405162461bcd60e51b8152600401610bf7906157fc565b600360178960405161110791906153ca565b908152604051908190036020019020805460ff19166001836003811115611130576111306159d6565b02179055505b600360178960405161114891906153ca565b9081526040519081900360200190205460ff16600381111561116c5761116c6159d6565b146111cd5760405162461bcd60e51b815260206004820152602b60248201527f63616e206f6e6c79206d696e7420666f722062616467657320696e206170707260448201526a6f7665642073746174757360a81b6064820152608401610bf7565b6010546040516060916001600160a01b0316907f8b11cf8a4537c8abe6ddef215a5ad5cfd6c0d5f42e1e6c507a1e8f4d7e79ad5c90601690611210908d906153ca565b90815260405190819003602001812061122b9160240161565b565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161126991906153ca565b6000604051808303816000865af19150503d80600081146112a6576040519150601f19603f3d011682016040523d82523d6000602084013e6112ab565b606091505b509092509050816112bb57600080fd5b6000818060200190518101906112d19190614e42565b6011546040519192506001600160a01b0316907f65a35964691f73fd1604104300b719081f6abd939cb2fc62b713db949a3b240990611314908490602401615615565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161135291906153ca565b6000604051808303816000865af19150503d806000811461138f576040519150601f19603f3d011682016040523d82523d6000602084013e611394565b606091505b509093509150826113a457600080fd5b600060158b6040516113b691906153ca565b908152604051908190036020019020546001600160401b038111156113dd576113dd615a18565b604051908082528060200260200182016040528015611406578160200160208202803683370190505b5090506000805b60158d60405161141d91906153ca565b9081526040519081900360200190205481101561154857611442600c80546001019055565b600c54915061149460158e60405161145a91906153ca565b9081526020016040518091039020828154811061147957611479615a02565b6000918252602090912001546001600160a01b031683613870565b61149e828f6139af565b8b6040516114ac91906153ca565b60405180910390208e6040516114c291906153ca565b604051809103902060158f6040516114da91906153ca565b908152602001604051809103902083815481106114f9576114f9615a02565b60009182526020822001546040516001600160a01b03909116917fb1df09f7ba6c7da56f4dc0278f9fe78f4577bd6299ea8c339c7f5c3c02b6490791a4806115408161597b565b91505061140d565b50600160148d60405161155b91906153ca565b908152604051908190036020019020805491151560ff19909216919091179055509350505050979650505050505050565b600b546001600160a01b031633146115b65760405162461bcd60e51b8152600401610bf790615776565b601180546001600160a01b0319166001600160a01b0392909216919091179055565b600083156117ef5788156116d85760288a6040516115f691906153ca565b9081526020016040518091039020600061160d3390565b6001600160a01b0316815260208101919091526040016000205460ff161561163457600080fd5b601f8a60405161164491906153ca565b90815260200160405180910390205460208b60405161166391906153ca565b9081526020016040518091039020541061167c57600080fd5b601f8a60405161168c91906153ca565b908152602001604051809103902054601b8b6040516116ab91906153ca565b9081526020016040518091039020546116c491906158ca565b9050600081116116d357600080fd5b6117ef565b60278a6040516116e891906153ca565b90815260408051602092819003830190206001600160a01b038b16600090815290835281812033825290925290205460ff161561172457600080fd5b601f8a60405161173491906153ca565b90815260200160405180910390205460228b60405161175391906153ca565b90815260408051602092819003830190206001600160a01b038c16600090815292529020541061178257600080fd5b601f8a60405161179291906153ca565b908152602001604051809103902054601c8b6040516117b191906153ca565b90815260408051602092819003830190206001600160a01b038c16600090815292529020546117e091906158ca565b9050600081116117ef57600080fd5b6117fd338b848a8a8a613a3a565b508315611a0e5788156118e957604051600090339083908381818185875af1925050503d806000811461184c576040519150601f19603f3d011682016040523d82523d6000602084013e611851565b606091505b505090508061185f57600080fd5b600160288c60405161187191906153ca565b908152602001604051809103902060006118883390565b6001600160a01b031681526020808201929092526040908101600020805460ff19169315159390931790925590516118c1908d906153ca565b90815260405190819003602001902080549060006118de8361597b565b919050555050611a0e565b6001600160a01b03881663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b15801561194157600080fd5b505af1158015611955573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119799190614db7565b50600160278b60405161198c91906153ca565b90815260408051602092819003830181206001600160a01b038d1660009081529084528281203382529093529120805460ff1916921515929092179091556022906119d8908c906153ca565b90815260408051602092819003830190206001600160a01b038b16600090815292528120805491611a088361597b565b91905055505b611a1a338b8585613c9a565b50505050505050505050565b6060602683604051611a3891906153ca565b90815260408051918290036020908101832060008681529082528290208054808302850183019093528284529190830182828015611a9557602002820191906000526020600020905b815481526020019060010190808311611a81575b5050505050905092915050565b6001601f86604051611ab491906153ca565b908152602001604051809103902054611acd91906158fd565b8411611b1b5760405162461bcd60e51b815260206004820152601960248201527f42616467654e4654203a20696e76616c6964206e756d626572000000000000006044820152606401610bf7565b611b29338686868686613a3a565b5083601f86604051611b3b91906153ca565b908152604051908190036020019020555050505050565b611b5c3382613df6565b611b785760405162461bcd60e51b8152600401610bf7906157ab565b610e4d838383613ee0565b6000611b8e83612e6a565b8210611bf05760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610bf7565b506001600160a01b03919091166000908152600760209081526040808320938352929052205490565b610e4d8383836040518060200160405280600081525061314e565b60606000611c4183612e6a565b90506000816001600160401b03811115611c5d57611c5d615a18565b604051908082528060200260200182016040528015611c86578160200160208202803683370190505b50905060005b82811015611ccd57611c9e8582611b83565b828281518110611cb057611cb0615a02565b602090810291909101015280611cc58161597b565b915050611c8c565b509392505050565b6002601784604051611ce791906153ca565b9081526040519081900360200190205460ff166003811115611d0b57611d0b6159d6565b14611d515760405162461bcd60e51b8152602060048201526016602482015275696e636f72726563742062616467652073746174757360501b6044820152606401610bf7565b60105460405160009182916001600160a01b03909116907f8b11cf8a4537c8abe6ddef215a5ad5cfd6c0d5f42e1e6c507a1e8f4d7e79ad5c90601690611d989089906153ca565b908152604051908190036020018120611db39160240161565b565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611df191906153ca565b6000604051808303816000865af19150503d8060008114611e2e576040519150601f19603f3d011682016040523d82523d6000602084013e611e33565b606091505b509150915081611e4257600080fd5b600081806020019051810190611e589190614e42565b600f546040519192506001600160a01b0316907f0d58dd088cbe688b8c61e8f36a658aa45125fbcff8c7e7af836d3925770f01bc90611e9b908490602401615615565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611ed991906153ca565b6000604051808303816000865af19150503d8060008114611f16576040519150601f19603f3d011682016040523d82523d6000602084013e611f1b565b606091505b50909350915082611f2b57600080fd5b600082806020019051810190611f419190614b06565b90506001600160a01b038116611f5657600080fd5b851561207c57601d87604051611f6c91906153ca565b9081526040519081900360200190205460ff1615611fcc5760405162461bcd60e51b815260206004820152601d60248201527f6e61746976652072657761726420616c726561647920636c61696d65640000006044820152606401610bf7565b806001600160a01b0316601b88604051611fe691906153ca565b9081526040519081900360200181205490600081818185875af1925050503d8060008114612030576040519150601f19603f3d011682016040523d82523d6000602084013e612035565b606091505b5050809450508361204557600080fd5b6001601d8860405161205791906153ca565b908152604051908190036020019020805491151560ff19909216919091179055612211565b601e8760405161208c91906153ca565b90815260408051602092819003830190206001600160a01b0388166000908152925290205460ff16156121015760405162461bcd60e51b815260206004820152601c60248201527f65726332302072657761726420616c726561647920636c61696d6564000000006044820152606401610bf7565b846001600160a01b031663a9059cbb82601c8a60405161212191906153ca565b9081526040805191829003602090810183206001600160a01b038c166000908152915220546001600160e01b031960e085901b16825261217892916004016001600160a01b03929092168252602082015260400190565b602060405180830381600087803b15801561219257600080fd5b505af11580156121a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ca9190614db7565b506001601e886040516121dd91906153ca565b90815260408051602092819003830190206001600160a01b038916600090815292529020805460ff19169115159190911790555b50505050505050565b600061222560095490565b82106122885760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610bf7565b6009828154811061229b5761229b615a02565b90600052602060002001549050919050565b60016017856040516122bf91906153ca565b9081526040519081900360200190205460ff1660038111156122e3576122e36159d6565b1480612322575060036017856040516122fc91906153ca565b9081526040519081900360200190205460ff166003811115612320576123206159d6565b145b61236e5760405162461bcd60e51b815260206004820152601a60248201527f6261646765206e6f742070656e64696e672f617070726f7665640000000000006044820152606401610bf7565b6000601f8560405161238091906153ca565b908152602001604051809103902054116123ce5760405162461bcd60e51b815260206004820152600f60248201526e6e6f2075736572207265776172647360881b6044820152606401610bf7565b600f5460408051600481526024810182526020810180516001600160e01b0316631c3b702f60e11b179052905160009283926001600160a01b039091169161241691906153ca565b6000604051808303816000865af19150503d8060008114612453576040519150601f19603f3d011682016040523d82523d6000602084013e612458565b606091505b50915091508161246757600080fd5b60008180602001905181019061247d9190614b06565b905060006127106029548661249291906158de565b61249c91906158ca565b905085156125fe576124ae81866158b2565b3410156124ef5760405162461bcd60e51b815260206004820152600f60248201526e1b9bdd08195b9bdd59da081cd95b9d608a1b6044820152606401610bf7565b6040516001600160a01b038316908290600081818185875af1925050503d8060008114612538576040519150601f19603f3d011682016040523d82523d6000602084013e61253d565b606091505b5050809450508361254d57600080fd5b84601b8960405161255e91906153ca565b9081526020016040518091039020600082825461257b91906158b2565b9091555061258b905081866158b2565b3411156125f957338161259e87346158fd565b6125a891906158fd565b604051600081818185875af1925050503d80600081146125e4576040519150601f19603f3d011682016040523d82523d6000602084013e6125e9565b606091505b505080945050836125f957600080fd5b6129cb565b6001600160a01b03871661261157600080fd5b6010546040516001600160a01b03909116907f8b11cf8a4537c8abe6ddef215a5ad5cfd6c0d5f42e1e6c507a1e8f4d7e79ad5c90601690612653908c906153ca565b90815260405190819003602001812061266e9160240161565b565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516126ac91906153ca565b6000604051808303816000865af19150503d80600081146126e9576040519150601f19603f3d011682016040523d82523d6000602084013e6126ee565b606091505b509094509250836126fe57600080fd5b6000838060200190518101906127149190614e42565b6011546040519192506001600160a01b0316907f11f69039648f0dd87bd7c96fa7501d8c9b90ae27f5d68bb2f9adfc6ae113637a9061275b90849046908d90602401615628565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161279991906153ca565b6000604051808303816000865af19150503d80600081146127d6576040519150601f19603f3d011682016040523d82523d6000602084013e6127db565b606091505b509095509350846127eb57600080fd5b838060200190518101906127ff9190614db7565b9450846128435760405162461bcd60e51b8152602060048201526012602482015271115490cc8c081b9bdd08185c1c1c9bdd995960721b6044820152606401610bf7565b6001600160a01b0388166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b039182166004820152908616602482015260448101859052606401602060405180830381600087803b1580156128a357600080fd5b505af11580156128b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128db9190614db7565b506001600160a01b0388166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101899052606401602060405180830381600087803b15801561293a57600080fd5b505af115801561294e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129729190614db7565b5085601c8a60405161298491906153ca565b908152602001604051809103902060008a6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546129c491906158b2565b9091555050505b5050505050505050565b6000818152600260205260408120546001600160a01b031680610b2d5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610bf7565b6001601787604051612a5e91906153ca565b9081526040519081900360200190205460ff166003811115612a8257612a826159d6565b14612ac35760405162461bcd60e51b81526020600482015260116024820152706261646765206e6f742070656e64696e6760781b6044820152606401610bf7565b601a86604051612ad391906153ca565b90815260200160405180910390206000612aea3390565b6001600160a01b0316815260208101919091526040016000205460ff1615612b545760405162461bcd60e51b815260206004820152601c60248201527f616c726561647920766f74656420666f722074686973206261646765000000006044820152606401610bf7565b84604051602001612b6591906153ca565b60405160208183030381529060405280519060200120601687604051612b8b91906153ca565b9081526020016040518091039020604051602001612ba99190615415565b6040516020818303038152906040528051906020012014612c025760405162461bcd60e51b81526020600482015260136024820152721a5b98dbdc9c9958dd081c185d1a1dd85e5259606a1b6044820152606401610bf7565b600e54845184518451604051630903288360e11b81526000946001600160a01b031693631206510693612c419333938e938e93909290916004016154c4565b602060405180830381600087803b158015612c5b57600080fd5b505af1158015612c6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c939190614db7565b905080612cb25760405162461bcd60e51b8152600401610bf790615732565b600e546020868101518682015191860151604051632336629f60e11b81526000946001600160a01b03169363466cc53e93612cf89333938f938b9392909160040161551c565b602060405180830381600087803b158015612d1257600080fd5b505af1158015612d26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d4a9190614db7565b905080612d695760405162461bcd60e51b8152600401610bf7906157fc565b601988604051612d7991906153ca565b9081526040519081900360200190208054906000612d968361597b565b91905055506001601a89604051612dad91906153ca565b90815260200160405180910390206000612dc43390565b6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555082601989604051612e0c91906153ca565b908152602001604051809103902054106129cb576002601789604051612e3291906153ca565b908152604051908190036020019020805460ff19166001836003811115612e5b57612e5b6159d6565b02179055505050505050505050565b60006001600160a01b038216612ed55760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610bf7565b506001600160a01b031660009081526003602052604090205490565b600b546001600160a01b03163314612f1b5760405162461bcd60e51b8152600401610bf790615776565b612f256000614087565b565b805160208183018101805160168252928201919093012091528054610b4c90615940565b606060018054610c3190615940565b6060602583604051612f6c91906153ca565b90815260408051918290036020908101832060008681529082528290208054808302850183019093528284529190830182828015611a9557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612fb5575050505050905092915050565b612fea3383836140d9565b5050565b606060158260405161300091906153ca565b908152604080519182900360209081018320805480830285018301909352828452919083018282801561305c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161303e575b50505050509050919050565b600060178860405161307a91906153ca565b9081526040519081900360200190205460ff16600381111561309e5761309e6159d6565b146130a857600080fd5b60016017886040516130ba91906153ca565b908152604051908190036020019020805460ff191660018360038111156130e3576130e36159d6565b0217905550856016886040516130f991906153ca565b9081526020016040518091039020908051906020019061311a9291906148cf565b5084601f8860405161312c91906153ca565b90815260405190819003602001902055831561221157612211878484846122ad565b6131583383613df6565b6131745760405162461bcd60e51b8152600401610bf7906157ab565b613180848484846141a8565b50505050565b6060610b2d826141db565b60016017876040516131a391906153ca565b9081526040519081900360200190205460ff1660038111156131c7576131c76159d6565b146132095760405162461bcd60e51b8152602060048201526012602482015271737461747573206e6f742070656e64696e6760701b6044820152606401610bf7565b601a8660405161321991906153ca565b908152602001604051809103902060006132303390565b6001600160a01b0316815260208101919091526040016000205460ff161561329a5760405162461bcd60e51b815260206004820152601c60248201527f616c726561647920766f74656420666f722074686973206261646765000000006044820152606401610bf7565b846040516020016132ab91906153ca565b604051602081830303815290604052805190602001206016876040516132d191906153ca565b90815260200160405180910390206040516020016132ef9190615415565b60405160208183030381529060405280519060200120146133485760405162461bcd60e51b81526020600482015260136024820152721a5b98dbdc9c9958dd081c185d1a1dd85e5259606a1b6044820152606401610bf7565b600e54845184518451604051630903288360e11b81526000946001600160a01b0316936312065106936133879333938e938e93909290916004016154c4565b602060405180830381600087803b1580156133a157600080fd5b505af11580156133b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133d99190614db7565b9050806133f85760405162461bcd60e51b8152600401610bf790615732565b600e546020868101518682015191860151604051632336629f60e11b81526000946001600160a01b03169363466cc53e9361343e9333938f938b9392909160040161551c565b602060405180830381600087803b15801561345857600080fd5b505af115801561346c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134909190614db7565b9050806134af5760405162461bcd60e51b8152600401610bf7906157fc565b6018886040516134bf91906153ca565b90815260405190819003602001902080549060006134dc8361597b565b91905055506001601a896040516134f391906153ca565b9081526020016040518091039020600061350a3390565b6001600160a01b0316815260208101919091526040908101600020805460ff19169215159290921790915551601890613544908a906153ca565b9081526020016040518091039020546001141561367657600089511161359a5760405162461bcd60e51b815260206004820152600b60248201526a656d70747920617272617960a81b6044820152606401610bf7565b886015896040516135ab91906153ca565b908152602001604051809103902090805190602001906135cc929190614953565b506018886040516135dd91906153ca565b908152602001604051809103902054831161367157600360178960405161360491906153ca565b908152604051908190036020019020805460ff1916600183600381111561362d5761362d6159d6565b02179055508760405161364091906153ca565b604051908190038120907fcb7144701e8d0b3465bbe141996dd943a0458bba214e98eac12ba128ffe44c0890600090a25b61371a565b8260188960405161368791906153ca565b9081526020016040518091039020541061371a5760036017896040516136ad91906153ca565b908152604051908190036020019020805460ff191660018360038111156136d6576136d66159d6565b0217905550876040516136e991906153ca565b604051908190038120907fcb7144701e8d0b3465bbe141996dd943a0458bba214e98eac12ba128ffe44c0890600090a25b505050505050505050565b600b546001600160a01b0316331461374f5760405162461bcd60e51b8152600401610bf790615776565b6001600160a01b0381166137b45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610bf7565b6137bd81614087565b50565b60006001600160e01b0319821663780e9d6360e01b1480610b2d5750610b2d8261434a565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190613837826129d5565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6001600160a01b0382166138c65760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610bf7565b6138cf816137e5565b1561391c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610bf7565b6139286000838361439a565b6001600160a01b03821660009081526003602052604081208054600192906139519084906158b2565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6139b8826137e5565b613a1b5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610bf7565b60008281526006602090815260409091208251610e4d928401906148cf565b60008087304660218a604051613a5091906153ca565b90815260408051602092819003830181206001600160a01b038f1660009081529084529190912054613a8b9594939290918c918e910161536f565b60408051601f1981840301815282825280516020918201206011546004855260248501845291840180516001600160e01b031663a5207df560e01b179052915191935060009283926001600160a01b0390921691613ae991906153ca565b6000604051808303816000865af19150503d8060008114613b26576040519150601f19603f3d011682016040523d82523d6000602084013e613b2b565b606091505b509150915081613b3a57600080fd5b600081806020019051810190613b509190614b06565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101869052909150600190605c0160408051601f198184030181528282528051602091820120600084529083018083525260ff891690820152606081018a90526080810189905260a0016020604051602081039080840390855afa158015613be7573d6000803e3d6000fd5b505050602060405103516001600160a01b0316816001600160a01b031614613c445760405162461bcd60e51b815260206004820152601060248201526f24b731b7b93932b1ba1039b4b3b732b960811b6044820152606401610bf7565b60218a604051613c5491906153ca565b90815260408051602092819003830190206001600160a01b038e16600090815292528120805491613c848361597b565b9091555060019c9b505050505050505050505050565b602483604051613caa91906153ca565b908152604080516020928190038301902060008481529083528181206001600160a01b038816825290925290205460ff1615613ce557613180565b6000613cf5600c80546001019055565b50600c54613d033382613870565b613d0d81846139af565b602584604051613d1d91906153ca565b9081526040805191829003602090810183206000868152908252918220805460018101825590835291200180546001600160a01b0388166001600160a01b0319909116179055602690613d719086906153ca565b9081526040805191829003602090810183206000868152908252918220805460018181018355918452919092200183905590602490613db19087906153ca565b9081526040805160209281900383019020600095865282528085206001600160a01b0398909816855296905294909120805460ff191694151594909417909355505050565b6000613e01826137e5565b613e625760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610bf7565b6000613e6d836129d5565b9050806001600160a01b0316846001600160a01b03161480613ea85750836001600160a01b0316613e9d84610cb4565b6001600160a01b0316145b80613ed857506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316613ef3826129d5565b6001600160a01b031614613f575760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610bf7565b6001600160a01b038216613fb95760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610bf7565b613fc483838361439a565b613fcf600082613802565b6001600160a01b0383166000908152600360205260408120805460019290613ff89084906158fd565b90915550506001600160a01b03821660009081526003602052604081208054600192906140269084906158b2565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600b80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316141561413b5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610bf7565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6141b3848484613ee0565b6141bf848484846143a5565b6131805760405162461bcd60e51b8152600401610bf7906156e0565b60606141e6826137e5565b61424c5760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b6064820152608401610bf7565b6000828152600660205260408120805461426590615940565b80601f016020809104026020016040519081016040528092919081815260200182805461429190615940565b80156142de5780601f106142b3576101008083540402835291602001916142de565b820191906000526020600020905b8154815290600101906020018083116142c157829003601f168201915b5050505050905060006142fc60408051602081019091526000815290565b905080516000141561430f575092915050565b8151156143415780826040516020016143299291906153e6565b60405160208183030381529060405292505050919050565b613ed8846144b2565b60006001600160e01b031982166380ac58cd60e01b148061437b57506001600160e01b03198216635b5e139f60e01b145b80610b2d57506301ffc9a760e01b6001600160e01b0319831614610b2d565b610e4d83838361458a565b60006001600160a01b0384163b156144a757604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906143e9903390899088908890600401615487565b602060405180830381600087803b15801561440357600080fd5b505af1925050508015614433575060408051601f3d908101601f1916820190925261443091810190614df1565b60015b61448d573d808015614461576040519150601f19603f3d011682016040523d82523d6000602084013e614466565b606091505b5080516144855760405162461bcd60e51b8152600401610bf7906156e0565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050613ed8565b506001949350505050565b60606144bd826137e5565b6145215760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610bf7565b600061453860408051602081019091526000815290565b905060008151116145585760405180602001604052806000815250614583565b8061456284614642565b6040516020016145739291906153e6565b6040516020818303038152906040525b9392505050565b6001600160a01b0383166145e5576145e081600980546000838152600a60205260408120829055600182018355919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0155565b614608565b816001600160a01b0316836001600160a01b03161461460857614608838261473f565b6001600160a01b03821661461f57610e4d816147dc565b826001600160a01b0316826001600160a01b031614610e4d57610e4d828261488b565b6060816146665750506040805180820190915260018152600360fc1b602082015290565b8160005b8115614690578061467a8161597b565b91506146899050600a836158ca565b915061466a565b6000816001600160401b038111156146aa576146aa615a18565b6040519080825280601f01601f1916602001820160405280156146d4576020820181803683370190505b5090505b8415613ed8576146e96001836158fd565b91506146f6600a86615996565b6147019060306158b2565b60f81b81838151811061471657614716615a02565b60200101906001600160f81b031916908160001a905350614738600a866158ca565b94506146d8565b6000600161474c84612e6a565b61475691906158fd565b6000838152600860205260409020549091508082146147a9576001600160a01b03841660009081526007602090815260408083208584528252808320548484528184208190558352600890915290208190555b5060009182526008602090815260408084208490556001600160a01b039094168352600781528383209183525290812055565b6009546000906147ee906001906158fd565b6000838152600a60205260408120546009805493945090928490811061481657614816615a02565b90600052602060002001549050806009838154811061483757614837615a02565b6000918252602080832090910192909255828152600a9091526040808220849055858252812055600980548061486f5761486f6159ec565b6001900381819060005260206000200160009055905550505050565b600061489683612e6a565b6001600160a01b039093166000908152600760209081526040808320868452825280832085905593825260089052919091209190915550565b8280546148db90615940565b90600052602060002090601f0160209004810192826148fd5760008555614943565b82601f1061491657805160ff1916838001178555614943565b82800160010185558215614943579182015b82811115614943578251825591602001919060010190614928565b5061494f9291506149a8565b5090565b828054828255906000526020600020908101928215614943579160200282015b8281111561494357825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614973565b5b8082111561494f57600081556001016149a9565b60006149d06149cb8461588b565b61585b565b90508281528383830111156149e457600080fd5b828260208301376000602084830101529392505050565b600082601f830112614a0c57600080fd5b614a14615833565b808385604086011115614a2657600080fd5b60005b6002811015614a48578135845260209384019390910190600101614a29565b509095945050505050565b600082601f830112614a6457600080fd5b614a6c615833565b808385604086011115614a7e57600080fd5b60005b6002811015614a4857614a9382614ad8565b84526020938401939190910190600101614a81565b8035614ab381615a43565b919050565b600082601f830112614ac957600080fd5b614583838335602085016149bd565b803560ff81168114614ab357600080fd5b600060208284031215614afb57600080fd5b813561458381615a2e565b600060208284031215614b1857600080fd5b815161458381615a2e565b60008060408385031215614b3657600080fd5b8235614b4181615a2e565b91506020830135614b5181615a2e565b809150509250929050565b600080600060608486031215614b7157600080fd5b8335614b7c81615a2e565b92506020840135614b8c81615a2e565b929592945050506040919091013590565b60008060008060808587031215614bb357600080fd5b8435614bbe81615a2e565b93506020850135614bce81615a2e565b92506040850135915060608501356001600160401b03811115614bf057600080fd5b8501601f81018713614c0157600080fd5b614c10878235602084016149bd565b91505092959194509250565b60008060408385031215614c2f57600080fd5b8235614c3a81615a2e565b91506020830135614b5181615a43565b60008060408385031215614c5d57600080fd5b8235614c6881615a2e565b946020939093013593505050565b6000806000806000806000610140888a031215614c9257600080fd5b6001600160401b038089351115614ca857600080fd5b883589018a601f820112614cbb57600080fd5b803582811115614ccd57614ccd615a18565b8060051b614cdd6020820161585b565b80838252602082019150602085018f6020858801011115614cfd57600080fd5b600095505b84861015614d2b57614d148135615a2e565b803583526001959095019460209283019201614d02565b509b5050505060208a0135905081811115614d4557600080fd5b614d518b828c01614ab8565b975050604089013581811115614d6657600080fd5b614d728b828c01614ab8565b96505050614d838960608a016149fb565b9350614d928960a08a016149fb565b9250614da18960e08a01614a53565b9150610120880135905092959891949750929550565b600060208284031215614dc957600080fd5b815161458381615a43565b600060208284031215614de657600080fd5b813561458381615a51565b600060208284031215614e0357600080fd5b815161458381615a51565b600060208284031215614e2057600080fd5b81356001600160401b03811115614e3657600080fd5b613ed884828501614ab8565b600060208284031215614e5457600080fd5b81516001600160401b03811115614e6a57600080fd5b8201601f81018413614e7b57600080fd5b8051614e896149cb8261588b565b818152856020838501011115614e9e57600080fd5b614eaf826020830160208601615914565b95945050505050565b60008060408385031215614ecb57600080fd5b82356001600160401b03811115614ee157600080fd5b614eed85828601614ab8565b9250506020830135614b5181615a2e565b60008060008060808587031215614f1457600080fd5b84356001600160401b03811115614f2a57600080fd5b614f3687828801614ab8565b9450506020850135614f4781615a2e565b92506040850135614f5781615a43565b9396929550929360600135925050565b600080600060608486031215614f7c57600080fd5b83356001600160401b03811115614f9257600080fd5b614f9e86828701614ab8565b9350506020840135614faf81615a43565b91506040840135614fbf81615a2e565b809150509250925092565b60008060008060008060008060006101208a8c031215614fe957600080fd5b89356001600160401b038082111561500057600080fd5b61500c8d838e01614ab8565b9a5060208c0135915061501e82615a43565b90985060408b01359061503082615a2e565b81985060608c0135975060808c0135965061504d60a08d01614ad8565b955061505b60c08d01614aa8565b945060e08c013591508082111561507157600080fd5b5061507e8c828d01614ab8565b9250506101008a013590509295985092959850929598565b60008060008060008061012087890312156150b057600080fd5b86356001600160401b03808211156150c757600080fd5b6150d38a838b01614ab8565b975060208901359150808211156150e957600080fd5b506150f689828a01614ab8565b95505061510688604089016149fb565b935061511588608089016149fb565b92506151248860c08901614a53565b915061010087013590509295509295509295565b6000806000806000806000610140888a03121561515457600080fd5b87356001600160401b038082111561516b57600080fd5b6151778b838c01614ab8565b985060208a013591508082111561518d57600080fd5b6151998b838c01614ab8565b975060408a01359150808211156151af57600080fd5b506151bc8a828b01614ab8565b955050614d838960608a016149fb565b600080600080600080600060e0888a0312156151e757600080fd5b87356001600160401b03808211156151fe57600080fd5b61520a8b838c01614ab8565b985060208a013591508082111561522057600080fd5b5061522d8a828b01614ab8565b96505060408801359450606088013561524581615a43565b9350608088013561525581615a2e565b925060a088013561526581615a43565b8092505060c0880135905092959891949750929550565b6000806040838503121561528f57600080fd5b82356001600160401b038111156152a557600080fd5b6152b185828601614ab8565b95602094909401359450505050565b600080600080600060a086880312156152d857600080fd5b85356001600160401b038111156152ee57600080fd5b6152fa88828901614ab8565b95505060208601359350604086013592506060860135915061531e60808701614ad8565b90509295509295909350565b60006020828403121561533c57600080fd5b5035919050565b6000815180845261535b816020860160208601615914565b601f01601f19169290920160200192915050565b60006bffffffffffffffffffffffff19808960601b168352808860601b1660148401525085602883015284604883015283606883015282516153b8816088850160208701615914565b91909101608801979650505050505050565b600082516153dc818460208701615914565b9190910192915050565b600083516153f8818460208801615914565b83519083019061540c818360208801615914565b01949350505050565b600080835461542381615940565b6001828116801561543b576001811461544c5761547b565b60ff1984168752828701945061547b565b8760005260208060002060005b858110156154725781548a820152908401908201615459565b50505082870194505b50929695505050505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906154ba90830184615343565b9695505050505050565b6001600160a01b038716815260c0602082018190526000906154e890830188615343565b82810360408401526154fa8188615343565b60608401969096525050608081019290925260ff1660a0909101529392505050565b6001600160a01b038716815260c06020820181905260009061554090830188615343565b905085604083015284606083015283608083015260ff831660a0830152979650505050505050565b6020808252825182820181905260009190848201906040850190845b818110156155a95783516001600160a01b031683529284019291840191600101615584565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156155a9578351835292840192918401916001016155d1565b602081016004831061560f57634e487b7160e01b600052602160045260246000fd5b91905290565b6020815260006145836020830184615343565b60608152600061563b6060830186615343565b6020830194909452506001600160a01b0391909116604090910152919050565b600060208083526000845461566f81615940565b8084870152604060018084166000811461569057600181146156a4576156d2565b60ff198516898401526060890195506156d2565b896000528660002060005b858110156156ca5781548b82018601529083019088016156af565b8a0184019650505b509398975050505050505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526024908201527f73656e646572206973206e6f7420617070726f7665642070617468776179207660408201526337ba32b960e11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601b908201527f696e636f727265637420766f746573206e65656465642073656e740000000000604082015260600190565b604080519081016001600160401b038111828210171561585557615855615a18565b60405290565b604051601f8201601f191681016001600160401b038111828210171561588357615883615a18565b604052919050565b60006001600160401b038211156158a4576158a4615a18565b50601f01601f191660200190565b600082198211156158c5576158c56159aa565b500190565b6000826158d9576158d96159c0565b500490565b60008160001904831182151516156158f8576158f86159aa565b500290565b60008282101561590f5761590f6159aa565b500390565b60005b8381101561592f578181015183820152602001615917565b838111156131805750506000910152565b600181811c9082168061595457607f821691505b6020821081141561597557634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561598f5761598f6159aa565b5060010190565b6000826159a5576159a56159c0565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146137bd57600080fd5b80151581146137bd57600080fd5b6001600160e01b0319811681146137bd57600080fdfea2646970667358221220ecc4d61513f098b14e43da5769d91df51969cc401594d69fa7c45d742e0c0f3e64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1902,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1904,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1908,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1912,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1916,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1922,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3227,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2891,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2895,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2898,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "_allTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2902,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 273,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 5192,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Counter)3723_storage"
      },
      {
        "astId": 5195,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "vrfContract",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(RandomNumberConsumer)10941"
      },
      {
        "astId": 5198,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "verifyContract",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(Verify)11602"
      },
      {
        "astId": 5200,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "projectNFTAddress",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 5202,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "pathwayNFTAddress",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 5204,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "appDiamond",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 5206,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "adventureFactory",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 5210,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "statusStrings",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 5214,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "badgeMinted",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 5219,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "contributors",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 5223,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "pathwayIdforBadge",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_string_memory_ptr,t_string_storage)"
      },
      {
        "astId": 5228,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "status",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_string_memory_ptr,t_enum(BadgeStatus)5330)"
      },
      {
        "astId": 5232,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "votes",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 5236,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "votesReject",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 5242,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "reviewerVotes",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5246,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "nativeRewards",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 5252,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "erc20Amounts",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 5256,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "nativeRefundClaimed",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 5262,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "erc20RefundClaimed",
        "offset": 0,
        "slot": "30",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5266,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "numUsersRewardPerBadge",
        "offset": 0,
        "slot": "31",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 5270,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "currentNumUsersRewardPerBadgeNative",
        "offset": 0,
        "slot": "32",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 5276,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "nonces",
        "offset": 0,
        "slot": "33",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 5282,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "currentNumUsersRewardPerBadgeERC20",
        "offset": 0,
        "slot": "34",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 5286,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "adventurerAddress",
        "offset": 0,
        "slot": "35",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 5294,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "mintTrackerByBadgeIdVersionMinter",
        "offset": 0,
        "slot": "36",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_uint256,t_mapping(t_address,t_bool)))"
      },
      {
        "astId": 5301,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "allMintersPerBadgeAndVersion",
        "offset": 0,
        "slot": "37",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_uint256,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 5308,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "allTokenIdsPerBadgeAndVersion",
        "offset": 0,
        "slot": "38",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))"
      },
      {
        "astId": 5316,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "userRewardedForBadgeERC20",
        "offset": 0,
        "slot": "39",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_mapping(t_address,t_bool)))"
      },
      {
        "astId": 5322,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "userRewardedForBadgeNative",
        "offset": 0,
        "slot": "40",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5325,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "fee",
        "offset": 0,
        "slot": "41",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(RandomNumberConsumer)10941": {
        "encoding": "inplace",
        "label": "contract RandomNumberConsumer",
        "numberOfBytes": "20"
      },
      "t_contract(Verify)11602": {
        "encoding": "inplace",
        "label": "contract Verify",
        "numberOfBytes": "20"
      },
      "t_enum(BadgeStatus)5330": {
        "encoding": "inplace",
        "label": "enum BadgeNFT.BadgeStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_enum(BadgeStatus)5330)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => enum BadgeNFT.BadgeStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(BadgeStatus)5330"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_mapping(t_address,t_bool)))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(address => mapping(address => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_uint256,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(uint256 => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(uint256 => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_uint256,t_mapping(t_address,t_bool)))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(uint256 => mapping(address => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      "t_mapping(t_string_memory_ptr,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)3723_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 3722,
            "contract": "contracts/BadgeNFT.sol:BadgeNFT",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
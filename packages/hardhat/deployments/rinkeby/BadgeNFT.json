{
  "address": "0x66fd93419d12be82a1E8dd7e2d5D2230Cb75028d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_projectNFTAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pathwayNFTAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_verifyAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "_badgeId",
          "type": "string"
        }
      ],
      "name": "BadgeApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "_badgeId",
          "type": "string"
        }
      ],
      "name": "NFTBadgeMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "ReceiveCalled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_badgeId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_ERC20Address",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "useNative",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addBadgeCreationReward",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "adventurerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "badgeMinted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_badgeId",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "native",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_ERC20Address",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "claimReward",
          "type": "bool"
        }
      ],
      "name": "claimBadgeRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_badgeId",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "native",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_ERC20Address",
          "type": "address"
        }
      ],
      "name": "claimRejectionRefund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_badgeId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_pathwayId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "numUsersRewarded",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "callRewards",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_ERC20Address",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "useNative",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "createBadge",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_badgeId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_pathwayId",
          "type": "string"
        },
        {
          "internalType": "bytes32[2]",
          "name": "r",
          "type": "bytes32[2]"
        },
        {
          "internalType": "bytes32[2]",
          "name": "s",
          "type": "bytes32[2]"
        },
        {
          "internalType": "uint8[2]",
          "name": "v",
          "type": "uint8[2]"
        },
        {
          "internalType": "uint256",
          "name": "votesNeeded",
          "type": "uint256"
        }
      ],
      "name": "createToken",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "currentNumUsersRewardPerBadgeERC20",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "currentNumUsersRewardPerBadgeNative",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAppDiamond",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pathwayId",
          "type": "string"
        }
      ],
      "name": "getContributors",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "nativeRefundClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "nativeRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "numUsersRewardPerBadge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "pathwayIdforBadge",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "reviewerVotes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFactory",
          "type": "address"
        }
      ],
      "name": "setAdventureFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAppDiamond",
          "type": "address"
        }
      ],
      "name": "setAppDiamond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_badgeId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "newNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "name": "setNumberOfUsersRewarded",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "status",
      "outputs": [
        {
          "internalType": "enum BadgeNFT.BadgeStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "statusStrings",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardedForBadgeNative",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_contributors",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "_badgeId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_pathwayId",
          "type": "string"
        },
        {
          "internalType": "bytes32[2]",
          "name": "r",
          "type": "bytes32[2]"
        },
        {
          "internalType": "bytes32[2]",
          "name": "s",
          "type": "bytes32[2]"
        },
        {
          "internalType": "uint8[2]",
          "name": "v",
          "type": "uint8[2]"
        },
        {
          "internalType": "uint256",
          "name": "votesNeeded",
          "type": "uint256"
        }
      ],
      "name": "voteForApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_badgeId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_pathwayId",
          "type": "string"
        },
        {
          "internalType": "bytes32[2]",
          "name": "r",
          "type": "bytes32[2]"
        },
        {
          "internalType": "bytes32[2]",
          "name": "s",
          "type": "bytes32[2]"
        },
        {
          "internalType": "uint8[2]",
          "name": "v",
          "type": "uint8[2]"
        },
        {
          "internalType": "uint256",
          "name": "votesNeeded",
          "type": "uint256"
        }
      ],
      "name": "voteForRejection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "votesReject",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "walletOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3b0a611f84f56d93c58a99d66c3931ccebbb7bf898c0ff8dbedc890245badda4",
  "receipt": {
    "to": null,
    "from": "0x7E13623dd5D070967c8568066bE81a3E5bF75226",
    "contractAddress": "0x66fd93419d12be82a1E8dd7e2d5D2230Cb75028d",
    "transactionIndex": 7,
    "gasUsed": "5408010",
    "logsBloom": "0x
    "blockHash": "0x1b4d177efaf1d9aeb38f5aeddef5323ed94fc511f0c152134ee10d2836adb264",
    "transactionHash": "0x3b0a611f84f56d93c58a99d66c3931ccebbb7bf898c0ff8dbedc890245badda4",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 10405984,
        "transactionHash": "0x3b0a611f84f56d93c58a99d66c3931ccebbb7bf898c0ff8dbedc890245badda4",
        "address": "0x66fd93419d12be82a1E8dd7e2d5D2230Cb75028d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007e13623dd5d070967c8568066be81a3e5bf75226"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x1b4d177efaf1d9aeb38f5aeddef5323ed94fc511f0c152134ee10d2836adb264"
      }
    ],
    "blockNumber": 10405984,
    "cumulativeGasUsed": "6567031",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5CC387AeCba2Ac9c90fdBD8F51032D4e4DAf944c",
    "0xc6f5693C9741A4889870CbE361428Eb0Ba0c05e3",
    "0xD22b3C2fa85ED33464764189A5CB6d96b1481A8A",
    "0x51E8C04f096b0dcDA51bF887B90A28dfD24bb35d"
  ],
  "numDeployments": 1,
  "solcInputHash": "987e3e415ee3f416570c646306924229",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_projectNFTAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pathwayNFTAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verifyAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_badgeId\",\"type\":\"string\"}],\"name\":\"BadgeApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_badgeId\",\"type\":\"string\"}],\"name\":\"NFTBadgeMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ReceiveCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_badgeId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_ERC20Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useNative\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addBadgeCreationReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"adventurerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"badgeMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_badgeId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"native\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_ERC20Address\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"claimReward\",\"type\":\"bool\"}],\"name\":\"claimBadgeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_badgeId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"native\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_ERC20Address\",\"type\":\"address\"}],\"name\":\"claimRejectionRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_badgeId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_pathwayId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"numUsersRewarded\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"callRewards\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_ERC20Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useNative\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createBadge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_badgeId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_pathwayId\",\"type\":\"string\"},{\"internalType\":\"bytes32[2]\",\"name\":\"r\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"s\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint8[2]\",\"name\":\"v\",\"type\":\"uint8[2]\"},{\"internalType\":\"uint256\",\"name\":\"votesNeeded\",\"type\":\"uint256\"}],\"name\":\"createToken\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currentNumUsersRewardPerBadgeERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"currentNumUsersRewardPerBadgeNative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAppDiamond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pathwayId\",\"type\":\"string\"}],\"name\":\"getContributors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nativeRefundClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nativeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"numUsersRewardPerBadge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"pathwayIdforBadge\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reviewerVotes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"setAdventureFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAppDiamond\",\"type\":\"address\"}],\"name\":\"setAppDiamond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_badgeId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"setNumberOfUsersRewarded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum BadgeNFT.BadgeStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"statusStrings\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardedForBadgeNative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_badgeId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_pathwayId\",\"type\":\"string\"},{\"internalType\":\"bytes32[2]\",\"name\":\"r\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"s\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint8[2]\",\"name\":\"v\",\"type\":\"uint8[2]\"},{\"internalType\":\"uint256\",\"name\":\"votesNeeded\",\"type\":\"uint256\"}],\"name\":\"voteForApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_badgeId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_pathwayId\",\"type\":\"string\"},{\"internalType\":\"bytes32[2]\",\"name\":\"r\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"s\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint8[2]\",\"name\":\"v\",\"type\":\"uint8[2]\"},{\"internalType\":\"uint256\",\"name\":\"votesNeeded\",\"type\":\"uint256\"}],\"name\":\"voteForRejection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"votesReject\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BadgeNFT.sol\":\"BadgeNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface internal immutable LINK;\\n  address private immutable vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\\n    private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0xff9e7d773545a1a5d73106e72bfb429da79c1cc4d893fb62051df801d2e61469\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  ) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x2bf1168e8fe548fa990e0aeaf89ef90680f80aa31eeaf901f485df60de51d51b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1cbe42915bc66227970fe99bc0f783eb1de30f2b48f984af01ad45edb9658698\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/BadgeNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title dCompassBadgeNFT\\n * @dev NFTs for creating badges\\n*/\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./RandomNumberConsumer.sol\\\";\\nimport \\\"./Verify.sol\\\";\\n\\ncontract BadgeNFT is ERC721URIStorage, ERC721Enumerable, Ownable{\\n    using Counters for Counters.Counter;\\n    \\n    Counters.Counter private _tokenIds;\\n\\n    RandomNumberConsumer vrfContract;//VRF Contract used for randomness\\n    Verify verifyContract;//Verify contract instance\\n    address projectNFTAddress; // address for the projectNFTs\\n    address pathwayNFTAddress; // address for the pathwayNFTs\\n    address appDiamond;//address needed for checking valid erc20Addrs per chain\\n    address adventureFactory;//address of the adventure factory\\n    mapping (uint => string) public statusStrings;\\n    mapping (string => bool) public badgeMinted; // tracks if mint has been done\\n    mapping (string => address[]) internal contributors; //contributors to this quest\\n    mapping (string => string) public pathwayIdforBadge;//the pathwayId that is the parent\\n    mapping (string => BadgeStatus) public status;\\n    mapping (string => uint) public votes;//tally of approved votes per badgeId;\\n     mapping (string => uint) public votesReject;//tally of rejection votes per badgeId;\\n    mapping (string => mapping(address => bool)) public reviewerVotes;//vote record of approved voters for badgeId\\n    mapping (string => uint) public nativeRewards;//badge rewards in native token\\n    mapping (string => mapping(address => uint)) internal erc20Amounts;//badge reward Amts in other tokens\\n    mapping (string => bool) public nativeRefundClaimed;//badge refund claimed\\n    mapping (string => mapping(address => bool)) erc20RefundClaimed;//pathway erc20 refund claimed\\n    mapping (string => uint) public numUsersRewardPerBadge;//number of users rewarded per badge\\n    mapping (string => uint) public currentNumUsersRewardPerBadgeNative;//current number of users already claimed native reward per badge\\n    mapping (string => mapping(address => uint)) public nonces;//nonce for certain verify functions per address per badgeId\\n\\n    mapping (string => mapping ( address => uint)) public currentNumUsersRewardPerBadgeERC20;// current number of users already claimed reward per badge per ERC20 Address\\n    mapping (string => address) public adventurerAddress;//address of adventurer NFT\\n\\n    //pathwayId => ERC20Address => senderAddress => bool\\n    mapping (string => mapping(address => mapping (address => bool))) userRewardedForBadgeERC20;//has user received funds for this badge in ERC20Token Address\\n    mapping (string => mapping(address => bool)) public userRewardedForBadgeNative;//has user received funds for this badge in native token\\n    uint256 public fee = 1500; //number divided by 10000 for fee. for example 100 = 1%\\n\\n    enum BadgeStatus{ NONEXISTENT, PENDING, DENIED, APPROVED }\\n\\n    event ReceiveCalled(address _caller, uint _value);\\n    event BadgeApproved(string indexed _badgeId);\\n    event NFTBadgeMinted(address indexed _to, string indexed _tokenURI, string indexed _badgeId);\\n\\n    constructor(address _vrfAddress, address _projectNFTAddress, address _pathwayNFTAddress, address _verifyAddress)ERC721(\\\"dCompassBadge\\\", \\\"DCOMPB\\\"){\\n        vrfContract = RandomNumberConsumer(_vrfAddress);\\n        verifyContract = Verify(_verifyAddress);\\n        projectNFTAddress = _projectNFTAddress;\\n        pathwayNFTAddress = _pathwayNFTAddress;\\n        statusStrings[0] = \\\"NONEXISTENT\\\";\\n        statusStrings[1] = \\\"PENDING\\\";\\n        statusStrings[2] = \\\"DENIED\\\";\\n        statusStrings[3] = \\\"APPROVED\\\";\\n    }\\n\\n    receive() external payable {\\n        emit ReceiveCalled(msg.sender, msg.value);\\n    }\\n\\n    function createBadge(\\n        string memory _badgeId,\\n        string memory _pathwayId,\\n        uint numUsersRewarded,\\n        bool callRewards,\\n        address _ERC20Address,\\n        bool useNative,\\n        uint amount\\n    ) external payable {\\n            require(status[_badgeId] == BadgeStatus.NONEXISTENT);\\n            status[_badgeId] = BadgeStatus.PENDING;\\n            pathwayIdforBadge[_badgeId] = _pathwayId;\\n            numUsersRewardPerBadge[_badgeId] = numUsersRewarded;\\n            if (callRewards){\\n                addBadgeCreationReward(_badgeId, _ERC20Address, useNative, amount);\\n            }\\n    }\\n\\n    function voteForApproval(address[] memory _contributors, string memory _badgeId, string memory _pathwayId, bytes32[2] memory r, bytes32[2] memory s, uint8[2] memory v, uint votesNeeded) public {\\n        require(\\n            status[_badgeId] == BadgeStatus.PENDING,\\n            \\\"status not pending\\\"\\n        );\\n        require(\\n            !reviewerVotes[_badgeId][_msgSender()],\\n            \\\"already voted for this badge\\\"\\n        );\\n        require(\\n            keccak256(abi.encodePacked(pathwayIdforBadge[_badgeId])) == keccak256(abi.encodePacked(_pathwayId)),\\n            \\\"incorrect pathwayId\\\"\\n        );\\n        bool voteAllowed = verifyContract.metaDataVerify(_msgSender(), _badgeId, _pathwayId, r[0], s[0], v[0]);\\n        require(voteAllowed, \\\"sender is not approved pathway voter\\\");\\n        bool thresholdCheck = verifyContract.thresholdVerify(_msgSender(), _badgeId, votesNeeded, r[1], s[1], v[1]);\\n        require(thresholdCheck, \\\"incorrect votes needed sent\\\");\\n        votes[_badgeId]++;\\n        reviewerVotes[_badgeId][_msgSender()] = true;\\n        if(votes[_badgeId] == 1){\\n            require(_contributors.length >0, \\\"empty array\\\");\\n            contributors[_badgeId] = _contributors;\\n            if(votesNeeded <= votes[_badgeId]){\\n                status[_badgeId] = BadgeStatus.APPROVED;\\n                emit BadgeApproved(_badgeId);\\n                //vrfContract.getRandomNumber(_badgeId, contributors[_badgeId].length);\\n            }\\n        }\\n        else{\\n            if(votes[_badgeId] >= votesNeeded){\\n                status[_badgeId] = BadgeStatus.APPROVED;\\n                emit BadgeApproved(_badgeId);\\n                //vrfContract.getRandomNumber(_badgeId, contributors[_badgeId].length);\\n            }  \\n        }\\n    }\\n\\n    function voteForRejection(string memory _badgeId, string memory _pathwayId, bytes32[2] memory r, bytes32[2] memory s, uint8[2] memory v, uint256 votesNeeded) public {\\n        require(status[_badgeId] == BadgeStatus.PENDING, \\\"badge not pending\\\");\\n        require(!reviewerVotes[_badgeId][_msgSender()], \\\"already voted for this badge\\\");\\n        require(\\n            keccak256(abi.encodePacked(pathwayIdforBadge[_badgeId])) == keccak256(abi.encodePacked(_pathwayId)),\\n            \\\"incorrect pathwayId\\\"\\n        );\\n        bool voteAllowed = verifyContract.metaDataVerify(\\n            _msgSender(),\\n            _badgeId,\\n            _pathwayId,\\n            r[0],\\n            s[0],\\n            v[0]\\n        );\\n        require(voteAllowed, \\\"sender is not approved pathway voter\\\");\\n        bool thresholdCheck = verifyContract.thresholdVerify(\\n            _msgSender(),\\n            _badgeId,\\n            votesNeeded,\\n            r[1],\\n            s[1],\\n            v[1]\\n        );\\n        require(thresholdCheck, \\\"incorrect votes needed sent\\\");\\n        votesReject[_badgeId]++;\\n        reviewerVotes[_badgeId][_msgSender()] = true;        \\n        if(votesReject[_badgeId] >= votesNeeded){\\n            status[_badgeId] = BadgeStatus.DENIED;\\n            /*(bool success,) = appWallet.call{value : stakePerProject[_projectId]}(\\\"\\\");\\n            require(success, \\\"transfer failed\\\");*/\\n        }\\n    }\\n\\n    function addBadgeCreationReward(string memory _badgeId, address _ERC20Address, bool useNative, uint amount) public payable{\\n        require (status[_badgeId] == BadgeStatus.PENDING || status[_badgeId] == BadgeStatus.APPROVED, \\\"badge not pending/approved\\\");\\n        require (numUsersRewardPerBadge[_badgeId] > 0, \\\"no user rewards\\\");\\n        (bool success , bytes memory data) = projectNFTAddress.call(abi.encodeWithSelector(bytes4(keccak256(\\\"appWallet()\\\"))));\\n        require(success);\\n        address appWallet = abi.decode(data, (address));\\n        uint appPortion = (amount*fee)/10000;\\n        if(useNative){\\n            require(msg.value >= amount + appPortion, \\\"not enough sent\\\");\\n            (success,) = payable(appWallet).call{value : appPortion}(\\\"\\\");\\n            require(success);\\n            nativeRewards[_badgeId] += amount;\\n            if(msg.value > amount + appPortion){\\n                (success,) = payable(_msgSender()).call{value : msg.value - amount- appPortion}(\\\"\\\");\\n                require(success);\\n            }\\n        }\\n        else{\\n            require(_ERC20Address != address(0));\\n            (success, data) = pathwayNFTAddress.call(abi.encodeWithSelector(bytes4(keccak256(\\\"projectIdforPathway(string)\\\")), pathwayIdforBadge[_badgeId]));\\n            require(success);\\n            string memory projectId = abi.decode(data, (string));\\n            (success, data) = appDiamond.call(abi.encodeWithSelector(bytes4(keccak256(\\\"checkApprovedERC20PerProjectByChain(string,uint256,address)\\\")), projectId, block.chainid, _ERC20Address));\\n            require(success);\\n            success = abi.decode(data, (bool));\\n            require(success, \\\"ERC20 not approved\\\");\\n            IERC20(_ERC20Address).transferFrom(_msgSender(), appWallet, appPortion);\\n            IERC20(_ERC20Address).transferFrom(_msgSender(), address(this), amount);\\n            erc20Amounts[_badgeId][_ERC20Address] += amount;\\n        }\\n    }\\n\\n    function setNumberOfUsersRewarded(string memory _badgeId, uint256 newNumber, bytes32 r, bytes32 s, uint8 v) external {\\n        require(newNumber > numUsersRewardPerBadge[_badgeId] - 1, \\\"BadgeNFT : invalid number\\\");\\n        _verify(_msgSender(), _badgeId, newNumber, r, s, v);\\n        numUsersRewardPerBadge[_badgeId] = newNumber;\\n    }\\n\\n    function claimRejectionRefund(string memory _badgeId, bool native, address _ERC20Address) external {\\n        require(status[_badgeId] == BadgeStatus.DENIED, \\\"incorrect badge status\\\");\\n        (bool success, bytes memory data) = pathwayNFTAddress.call(abi.encodeWithSelector(bytes4(keccak256(\\\"projectIdforPathway(string)\\\")), pathwayIdforBadge[_badgeId]));\\n        require(success);\\n        string memory _projectId = abi.decode(data, (string));\\n        (success, data) = projectNFTAddress.call(abi.encodeWithSelector(bytes4(keccak256(\\\"projectWallets(string)\\\")), _projectId));\\n        require(success);\\n        address refundWallet = abi.decode(data, (address));\\n        require(refundWallet != address(0));\\n        if(native){\\n            require(!nativeRefundClaimed[_badgeId], \\\"native reward already claimed\\\");\\n            (success,) = payable(refundWallet).call{value : nativeRewards[_badgeId]}(\\\"\\\");\\n            require(success);\\n            nativeRefundClaimed[_badgeId] = true;\\n        }\\n        else{\\n            require(!erc20RefundClaimed[_badgeId][_ERC20Address], \\\"erc20 reward already claimed\\\");\\n            IERC20(_ERC20Address).transfer(refundWallet, erc20Amounts[_badgeId][_ERC20Address]);\\n            erc20RefundClaimed[_badgeId][_ERC20Address] = true;\\n        }\\n    }\\n\\n    function createToken(\\n        string memory _tokenURI,\\n        string memory _badgeId,\\n        string memory _pathwayId,\\n        bytes32[2] memory r,\\n        bytes32[2] memory s,\\n        uint8[2] memory v,\\n        uint256 votesNeeded\\n    ) public returns (uint256[] memory) {\\n        require(!badgeMinted[_badgeId], \\\"already minted\\\");\\n        bool allowed = verifyContract.metaDataVerify(\\n            _msgSender(),\\n            _badgeId,\\n            _pathwayId,\\n            r[0],\\n            s[0],\\n            v[0]\\n        );\\n        require(allowed, \\\"sender is not approved pathway minter\\\");\\n        if (status[_badgeId] == BadgeStatus.PENDING) {\\n            require(votesNeeded <= votes[_badgeId], \\\"not enough votes\\\");\\n            allowed = verifyContract.thresholdVerify(\\n                _msgSender(),\\n                _badgeId,\\n                votesNeeded,\\n                r[1],\\n                s[1],\\n                v[1]\\n            );\\n            require(allowed, \\\"incorrect votes needed sent\\\");\\n            status[_badgeId] = BadgeStatus.APPROVED;\\n        }\\n        require(\\n            status[_badgeId] == BadgeStatus.APPROVED,\\n            \\\"can only mint for badges in approved status\\\"\\n        );\\n\\n        //TODO : this can later be made a require instead of if statement?\\n        bytes memory data;\\n        (allowed, data) = pathwayNFTAddress.call(abi.encodeWithSelector(bytes4(keccak256(\\\"projectIdforPathway(string)\\\")), pathwayIdforBadge[_badgeId]));\\n        require(allowed);\\n        string memory _projectId = abi.decode(data, (string));\\n\\n        (allowed, data) = appDiamond.call(abi.encodeWithSelector(bytes4(keccak256(\\\"projectDiamondAddrs(string)\\\")), _projectId));\\n        require(allowed);\\n        //address projectDiamond = abi.decode(data, (address));\\n        /*if(projectDiamond != address(0)){\\n            (allowed, data) = projectDiamond.call(abi.encodeWithSelector(bytes4(keccak256(\\\"addPathwayId(string)\\\")), _pathwayId));\\n            require(allowed);\\n        }*/\\n\\n        //batch minting\\n        \\n        uint256[] memory newItems = new uint256[](\\n            contributors[_badgeId].length\\n        );\\n        uint256 newItemId;\\n        \\n        for (uint256 i = 0; i < contributors[_badgeId].length; i++) {\\n            _tokenIds.increment();\\n            newItemId = _tokenIds.current();\\n\\n            _mint(contributors[_badgeId][i], newItemId);\\n            _setTokenURI(newItemId, _tokenURI);\\n\\n            emit NFTBadgeMinted(\\n                contributors[_badgeId][i],\\n                _tokenURI,\\n                _pathwayId\\n            );\\n        }\\n        \\n        _createAdventurerNFT(_badgeId, _pathwayId);\\n\\n        badgeMinted[_badgeId] = true;\\n        return newItems;\\n    }\\n\\n    function claimBadgeRewards(string memory _badgeId, bool native, address _ERC20Address, bytes32 r, bytes32 s, uint8 v, bool claimReward) external {\\n        uint amount;\\n        if(claimReward){\\n            if(native){\\n                require(!userRewardedForBadgeNative[_badgeId][_msgSender()]);\\n                require(currentNumUsersRewardPerBadgeNative[_badgeId] < numUsersRewardPerBadge[_badgeId]);\\n                amount = nativeRewards[_badgeId] / numUsersRewardPerBadge[_badgeId];\\n                require(amount > 0);\\n            }\\n            else{\\n                require(!userRewardedForBadgeERC20[_badgeId][_ERC20Address][_msgSender()]);\\n                require(currentNumUsersRewardPerBadgeERC20[_badgeId][_ERC20Address] < numUsersRewardPerBadge[_badgeId]);\\n                amount = erc20Amounts[_badgeId][_ERC20Address] / numUsersRewardPerBadge[_badgeId];\\n                require(amount > 0);\\n            }\\n        }\\n        _verify(_msgSender(), _badgeId, 0, r, s, v);\\n        if(claimReward){\\n            if(native){\\n                (bool success, ) = payable(_msgSender()).call{value : amount}(\\\"\\\");\\n                require(success);\\n                userRewardedForBadgeNative[_badgeId][_msgSender()] = true;\\n                currentNumUsersRewardPerBadgeNative[_badgeId]++;\\n            }\\n            else{\\n                IERC20(_ERC20Address).transfer(_msgSender(), amount);\\n                userRewardedForBadgeERC20[_badgeId][_ERC20Address][_msgSender()] = true;\\n                currentNumUsersRewardPerBadgeERC20[_badgeId][_ERC20Address]++;\\n            }\\n        }\\n        _mintAdventurerBadge(_msgSender(), _badgeId);\\n    }\\n\\n    function walletOfOwner(address _owner) public view returns (uint256[] memory)\\n  {\\n    uint256 ownerTokenCount = balanceOf(_owner);\\n    uint256[] memory tokenIds = new uint256[](ownerTokenCount);\\n    for (uint256 i; i < ownerTokenCount; i++) {\\n      tokenIds[i] = tokenOfOwnerByIndex(_owner, i);\\n    }\\n    return tokenIds;\\n  }\\n\\n  function _mintAdventurerBadge(address _to, string memory _badgeId) internal {\\n      address adventurerBadgeAddress = adventurerAddress[_badgeId];\\n      require(adventurerBadgeAddress != address(0), \\\"invalid badge address\\\");\\n      (bool success, bytes memory data) = adventurerBadgeAddress.call(abi.encodeWithSelector(bytes4(keccak256(\\\"balanceOf(address)\\\")), _msgSender()));\\n      require(success);\\n      uint256 balance = abi.decode(data, (uint256));\\n      if(balance == 0){\\n          (success, data) = adventurerBadgeAddress.call(abi.encodeWithSelector(bytes4(keccak256(\\\"mint(address,uint256)\\\")), _msgSender(), 1));\\n          require(success);\\n          (success, data) = adventureFactory.call(abi.encodeWithSelector(bytes4(keccak256(\\\"setUserInfo(address,string)\\\")), _msgSender(), _badgeId));\\n          require(success);\\n      }\\n  }\\n\\n  function _createAdventurerNFT(string memory _badgeId, string memory _pathwayId) internal {\\n      (bool success , bytes memory data) = adventureFactory.call(abi.encodeWithSelector(bytes4(\\n          keccak256(\\\"createNFTToken(string,bool,string)\\\")\\n      ), _badgeId, false, _pathwayId));\\n      require(success);\\n      address newTokenAddr = abi.decode(data, (address));\\n      adventurerAddress[_badgeId] = newTokenAddr;\\n  }\\n\\n  function _verify(address from, string memory _badgeId, uint256 payload, bytes32 r, bytes32 s, uint8 v) internal returns (bool){\\n      bytes32 hashRecover = keccak256(\\n            abi.encodePacked(\\n                from,\\n                address(this),\\n                block.chainid,\\n                nonces[_badgeId][from],\\n                payload,\\n                _badgeId\\n            )\\n        );\\n        (bool success, bytes memory data) = appDiamond.call(abi.encodeWithSelector(bytes4(keccak256(\\\"appSigningAddr()\\\"))));\\n        require(success);\\n        address signer = abi.decode(data, (address));\\n        require (signer == ecrecover(\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    hashRecover\\n                )\\n            ),\\n            v,\\n            r,\\n            s\\n        ), \\\"Incorrect signer\\\");\\n        nonces[_badgeId][from]++;\\n        return true;\\n  }\\n\\n    function getContributors(string memory _pathwayId) external view returns(address[] memory){\\n        return contributors[_pathwayId];\\n    }\\n\\n    function getAppDiamond() external view returns(address){\\n        return appDiamond;\\n    }\\n\\n    function setAppDiamond(address newAppDiamond) external onlyOwner {\\n        appDiamond = newAppDiamond;\\n    }\\n\\n    function setAdventureFactory(address newFactory) external onlyOwner {\\n        adventureFactory = newFactory;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override(ERC721Enumerable, ERC721) {\\n        super._beforeTokenTransfer(from,to,tokenId);\\n    }\\n    \\n    function _burn(uint256 tokenId) internal override(ERC721URIStorage, ERC721) {\\n        super._burn(tokenId);\\n    }\\n    \\n     function supportsInterface(bytes4 interfaceId) public view override(ERC721Enumerable, ERC721) returns (bool){\\n         return super.supportsInterface(interfaceId);\\n     }\\n     \\n     function tokenURI(uint256 tokenId) public view virtual override(ERC721URIStorage, ERC721) returns (string memory){\\n         return super.tokenURI(tokenId);\\n     }\\n}\",\"keccak256\":\"0xcb7765229674823f12107f5f1263463dcd863add528b95fe5e504a5be428e952\",\"license\":\"MIT\"},\"contracts/RandomNumberConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\ncontract RandomNumberConsumer is VRFConsumerBase, Ownable {\\n    \\n    bytes32 internal keyHash;\\n    uint256 internal fee;\\n    \\n    mapping(bytes32 => string) public objectRequests;//requestId to objectId (object is course or quest)\\n    mapping(bytes32 => uint) public numContributors;//requestId to num of contirbutors at time of approval\\n    mapping(string => uint8[]) internal objectRarities;//calculated rarities for course or quest\\n    mapping(string => uint256) public blockNumberResults;//block number request was fulfilled at\\n    mapping (string => uint256) public requestResults;\\n    mapping (address => bool) whiteList;//approved contracts and users that can call this will eventually be multi-sig holders\\n\\n    event RandomNumberFulfilled(string indexed _projectId);\\n\\n    modifier onlyWhiteList(){\\n        require(whiteList[_msgSender()], \\\"not authorized\\\");\\n        _;\\n    }\\n    \\n    /**\\n     * Constructor inherits VRFConsumerBase\\n     * \\n     * Network: Kovan\\n     * Chainlink VRF Coordinator address: 0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9\\n     * LINK token address:                0xa36085F69e2889c224210F603D836748e7dC0088\\n     * Key Hash: 0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4\\n     */\\n    constructor(address [] memory _reviewers) \\n        VRFConsumerBase(\\n            0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9, // VRF Coordinator\\n            0xa36085F69e2889c224210F603D836748e7dC0088  // LINK Token\\n        )\\n    {\\n        keyHash = 0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4;\\n        fee = 0.1 * 10 ** 18; // 0.1 LINK (Varies by network)\\n        for (uint i=0; i<_reviewers.length; i++){\\n            if(_reviewers[i]!= address(0) && !whiteList[_reviewers[i]]){\\n                whiteList[_reviewers[i]] = true;  \\n            }\\n        }\\n    }\\n    \\n    /** \\n     * Requests randomness \\n     */\\n    function getRandomNumber(string memory _objectId, uint _numContributors) public onlyWhiteList returns (bytes32 requestId){\\n        require(LINK.balanceOf(address(this)) >= fee, \\\"Not enough LINK - fill contract with faucet\\\");\\n        requestId = requestRandomness(keyHash, fee);\\n        objectRequests[requestId] = _objectId;\\n        numContributors[requestId] = _numContributors;\\n        return requestId;\\n    }\\n\\n    /**\\n     * Callback function used by VRF Coordinator\\n     */\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\n        string memory objectId = objectRequests[requestId];\\n        requestResults[objectId] = randomness;\\n        blockNumberResults[objectId] = block.number;\\n        uint currentIndex = 0;\\n        uint8[] memory rarities = new uint8[](numContributors[requestId]);\\n\\n        while(currentIndex < rarities.length){\\n            rarities[currentIndex] = uint8((uint256(keccak256(abi.encode(randomness, currentIndex))) % 100) + 1);\\n            currentIndex++;\\n        }\\n\\n        objectRarities[objectId] = rarities;\\n        emit RandomNumberFulfilled(objectId);\\n    }\\n    \\n    function addContractToWhiteList(address _newWhiteList) public onlyWhiteList{\\n        require(!whiteList[_newWhiteList], \\\"already approved\\\");\\n        whiteList[_newWhiteList] = true;\\n    }\\n    \\n    function getObjectRarities(string memory _objectId) public view returns(uint8[] memory){\\n        return objectRarities[_objectId];\\n    }\\n\\n    // function withdrawLink() external {} - Implement a withdraw function to avoid locking your LINK in the contract\\n}\",\"keccak256\":\"0x705ad5a33cb7d1f2f8f4103b4daf793b67a25d9cadcded6b3a4654b15479e014\",\"license\":\"MIT\"},\"contracts/Verify.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n//import '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\n\\ncontract Verify is Ownable {\\n    //using ECDSA for bytes32;\\n\\n    mapping(string => mapping(string => uint256)) public noncesParentIdChildId; //nonce for each parentId and childid (e.g. projectId and  courseId or CourseId and questId)\\n    mapping(string => uint256) public thresholdNoncesById; //nonce for each parentId Threshold (e.g. projectId for course and Course Id for quest)\\n    mapping(string => uint256) public deployNoncesById; //nonce for each projectId deploy of a diamond\\n    address public serverAddress;\\n    mapping(address => bool) public approvers;\\n\\n    constructor(address _serverAddress, address[] memory _approvers) {\\n        require(_serverAddress != address(0));\\n        serverAddress = _serverAddress;\\n        for (uint256 i = 0; i < _approvers.length; i++) {\\n            approvers[_approvers[i]] = true;\\n        }\\n    }\\n\\n    function getHash(\\n        address _senderAddress,\\n        string memory _objectId,\\n        string memory _parentId,\\n        address _contractAddress\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    noncesParentIdChildId[_parentId][_objectId],\\n                    _senderAddress,\\n                    _contractAddress,\\n                    address(this),\\n                    _objectId\\n                )\\n            );\\n    }\\n\\n    function metaDataVerify(\\n        address _senderAddress,\\n        string memory _objectId,\\n        string memory _parentId,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) public returns (bool) {\\n        bytes32 hashRecover = getHash(\\n            _senderAddress,\\n            _objectId,\\n            _parentId,\\n            _msgSender()\\n        );\\n        address signer = ecrecover(\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    hashRecover\\n                )\\n            ),\\n            v,\\n            r,\\n            s\\n        );\\n        require(signer == serverAddress, \\\"SIGNER MUST BE SERVER\\\");\\n        noncesParentIdChildId[_parentId][_objectId]++;\\n        return signer == serverAddress;\\n    }\\n\\n    function thresholdVerify(\\n        address _senderAddress,\\n        string memory _objectId,\\n        uint256 votesNeeded,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) public returns (bool) {\\n        bytes32 hashRecover = keccak256(\\n            abi.encodePacked(\\n                thresholdNoncesById[_objectId],\\n                votesNeeded,\\n                _senderAddress,\\n                _msgSender(),\\n                address(this),\\n                _objectId\\n            )\\n        );\\n        address signer = ecrecover(\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    hashRecover\\n                )\\n            ),\\n            v,\\n            r,\\n            s\\n        );\\n        require(signer == serverAddress, \\\"SIGNER MUST BE SERVER\\\");\\n        thresholdNoncesById[_objectId]++;\\n        return signer == serverAddress;\\n    }\\n\\n    function deployDiamondVerify(\\n        address _senderAddress,\\n        string memory _projectId,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) public returns (bool) {\\n        bytes32 hashRecover = keccak256(\\n            abi.encodePacked(\\n                deployNoncesById[_projectId],\\n                _senderAddress,\\n                _msgSender(),\\n                address(this),\\n                _projectId\\n            )\\n        );\\n        address signer = ecrecover(\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    hashRecover\\n                )\\n            ),\\n            v,\\n            r,\\n            s\\n        );\\n        require(signer == serverAddress, \\\"SIGNER MUST BE SERVER\\\");\\n        deployNoncesById[_projectId]++;\\n        return signer == serverAddress;\\n    }\\n\\n    function setServerAddress(address _newAddress) public {\\n        require(approvers[_msgSender()], \\\"must be approved\\\");\\n        require(_newAddress != address(0));\\n        serverAddress = _newAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x4feabfae0dcd90a92408c6d250ed845411fd594c947cdf5243fdb2162eda186b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526105dc6026553480156200001757600080fd5b5060405162005fe838038062005fe88339810160408190526200003a9162000398565b604080518082018252600d81526c64436f6d70617373426164676560981b6020808301918252835180850190945260068452652221a7a6a82160d11b9084015281519192916200008d91600091620002d5565b508051620000a3906001906020840190620002d5565b505050620000c0620000ba6200027f60201b60201c565b62000283565b600d80546001600160a01b038087166001600160a01b031992831617909255600e8054848416908316179055600f8054868416908316179055601080549285169290911691909117905560408051808201909152600b81526a1393d391561254d511539560aa1b60208083019182526000805260139052905162000166917f8fa6efc3be94b5b348b21fea823fe8d100408cee9b7f90524494500445d8ff6c91620002d5565b5060408051808201909152600781526650454e44494e4760c81b60208083019182526001600052601390529051620001c0917f4155c2f711f2cdd34f8262ab8fb9b7020a700fe7b6948222152f7670d1fdf34d91620002d5565b5060408051808201909152600681526511115392515160d21b6020808301918252600260005260139052905162000219917f0b9d2c0c271bb30544eb78c59bdaebdae2728e5f65814c07768a0abe90ed192391620002d5565b506040805180820190915260088152671054141493d5915160c21b6020808301918252600360005260139052905162000274917f0d2a6872ef858a7f8ead18dc4f3f2e8d35c853d47e2816cbb9cdd49202554e0c91620002d5565b505050505062000432565b3390565b600b80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620002e390620003f5565b90600052602060002090601f01602090048101928262000307576000855562000352565b82601f106200032257805160ff191683800117855562000352565b8280016001018555821562000352579182015b828111156200035257825182559160200191906001019062000335565b506200036092915062000364565b5090565b5b8082111562000360576000815560010162000365565b80516001600160a01b03811681146200039357600080fd5b919050565b60008060008060808587031215620003af57600080fd5b620003ba856200037b565b9350620003ca602086016200037b565b9250620003da604086016200037b565b9150620003ea606086016200037b565b905092959194509250565b600181811c908216806200040a57607f821691505b602082108114156200042c57634e487b7160e01b600052602260045260246000fd5b50919050565b615ba680620004426000396000f3fe6080604052600436106102975760003560e01c806370a082311161015a578063b2986b4c116100c1578063ddca3f431161007a578063ddca3f431461097a578063e8ca64f414610990578063e985e9c5146109d8578063ebcb309a14610a21578063f2fde38b14610a41578063f4f5d02914610a6157600080fd5b8063b2986b4c1461086c578063b88d4fde1461087f578063b99ef1fa1461089f578063c87b56dd146108d7578063ce15ef81146108f7578063cef9fab71461093257600080fd5b8063956f49bf11610113578063956f49bf1461074757806395d89b41146107885780639a1994011461079d5780639e1b567c146107d4578063a22cb4651461081f578063aaa545d01461083f57600080fd5b806370a0823114610654578063715018a61461067457806373a5d17c1461068957806376032f0e146106d15780638360bcb1146107095780638da5cb5b1461072957600080fd5b806341038d19116101fe578063500b5bd6116101b7578063500b5bd6146105735780635743d4f31461059157806362fe4f86146105c95780636352211e146105dc5780636810b4cf146105fc57806368929b5c1461061c57600080fd5b806341038d191461049857806341b34250146104d357806342842e0e146104f3578063438b63001461051357806347185957146105335780634f6ccce71461055357600080fd5b80630d0654d9116102505780630d0654d9146103cc5780630e3c22cb146103f957806318160ddd146104195780631fd8b97e1461043857806323b872dd146104585780632f745c591461047857600080fd5b806301ffc9a7146102db57806304dcd3001461031057806306462b6f1461033d57806306fdde031461035f578063081812fc14610374578063095ea7b3146103ac57600080fd5b366102d657604080513381523460208201527f64c983f10188c30a885d77970aa5aae9a86e80ef9b459ad33cc620eb5999e070910160405180910390a1005b600080fd5b3480156102e757600080fd5b506102fb6102f6366004614ee9565b610aac565b60405190151581526020015b60405180910390f35b34801561031c57600080fd5b5061033061032b3660046153c9565b610abd565b60405161030791906156f1565b34801561034957600080fd5b5061035d610358366004614bfe565b610b57565b005b34801561036b57600080fd5b50610330610bac565b34801561038057600080fd5b5061039461038f3660046153c9565b610c3e565b6040516001600160a01b039091168152602001610307565b3480156103b857600080fd5b5061035d6103c7366004614d5f565b610cc6565b3480156103d857600080fd5b506103ec6103e736600461521b565b610ddc565b6040516103079190615691565b34801561040557600080fd5b5061035d610414366004614bfe565b611520565b34801561042557600080fd5b506009545b604051908152602001610307565b34801561044457600080fd5b5061035d61045336600461535f565b61156c565b34801561046457600080fd5b5061035d610473366004614c71565b61161c565b34801561048457600080fd5b5061042a610493366004614d5f565b61164d565b3480156104a457600080fd5b506102fb6104b3366004614f23565b8051602081830181018051601d8252928201919093012091525460ff1681565b3480156104df57600080fd5b5061035d6104ee3660046150df565b6116e3565b3480156104ff57600080fd5b5061035d61050e366004614c71565b611b2e565b34801561051f57600080fd5b506103ec61052e366004614bfe565b611b49565b34801561053f57600080fd5b5061035d61054e36600461507c565b611bea565b34801561055f57600080fd5b5061042a61056e3660046153c9565b61212f565b34801561057f57600080fd5b506011546001600160a01b0316610394565b34801561059d57600080fd5b5061042a6105ac366004614f23565b8051602081830181018051601f8252928201919093012091525481565b61035d6105d7366004615013565b6121c2565b3480156105e857600080fd5b506103946105f73660046153c9565b6128e9565b34801561060857600080fd5b5061035d610617366004615179565b612960565b34801561062857600080fd5b5061042a610637366004614f23565b805160208183018101805160198252928201919093012091525481565b34801561066057600080fd5b5061042a61066f366004614bfe565b612d7e565b34801561068057600080fd5b5061035d612e05565b34801561069557600080fd5b5061042a6106a4366004614fcd565b81516020818401810180516022825292820194820194909420919093529091526000908152604090205481565b3480156106dd57600080fd5b5061042a6106ec366004614f23565b8051602081830181018051601b8252928201919093012091525481565b34801561071557600080fd5b50610330610724366004614f23565b612e3b565b34801561073557600080fd5b50600b546001600160a01b0316610394565b34801561075357600080fd5b50610394610762366004614f23565b80516020818301810180516023825292820191909301209152546001600160a01b031681565b34801561079457600080fd5b50610330612e5f565b3480156107a957600080fd5b5061042a6107b8366004614f23565b8051602081830181018051828252928201919093012091525481565b3480156107e057600080fd5b506102fb6107ef366004614fcd565b8151602081840181018051601a825292820194820194909420919093529091526000908152604090205460ff1681565b34801561082b57600080fd5b5061035d61083a366004614d31565b612e6e565b34801561084b57600080fd5b5061085f61085a366004614f23565b612e7d565b6040516103079190615644565b61035d61087a3660046152af565b612ef7565b34801561088b57600080fd5b5061035d61089a366004614cb2565b612fdd565b3480156108ab57600080fd5b5061042a6108ba366004614f23565b805160208183018101805160188252928201919093012091525481565b3480156108e357600080fd5b506103306108f23660046153c9565b613015565b34801561090357600080fd5b506102fb610912366004614f23565b805160208183018101805160148252928201919093012091525460ff1681565b34801561093e57600080fd5b5061042a61094d366004614fcd565b81516020818401810180516021825292820194820194909420919093529091526000908152604090205481565b34801561098657600080fd5b5061042a60265481565b34801561099c57600080fd5b506109cb6109ab366004614f23565b805160208183018101805160178252928201919093012091525460ff1681565b60405161030791906156c9565b3480156109e457600080fd5b506102fb6109f3366004614c38565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b348015610a2d57600080fd5b5061035d610a3c366004614d8b565b613020565b348015610a4d57600080fd5b5061035d610a5c366004614bfe565b6135b4565b348015610a6d57600080fd5b506102fb610a7c366004614fcd565b81516020818401810180516025825292820194820194909420919093529091526000908152604090205460ff1681565b6000610ab78261364f565b92915050565b60136020526000908152604090208054610ad690615a49565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0290615a49565b8015610b4f5780601f10610b2457610100808354040283529160200191610b4f565b820191906000526020600020905b815481529060010190602001808311610b3257829003601f168201915b505050505081565b600b546001600160a01b03163314610b8a5760405162461bcd60e51b8152600401610b819061587f565b60405180910390fd5b601280546001600160a01b0319166001600160a01b0392909216919091179055565b606060008054610bbb90615a49565b80601f0160208091040260200160405190810160405280929190818152602001828054610be790615a49565b8015610c345780601f10610c0957610100808354040283529160200191610c34565b820191906000526020600020905b815481529060010190602001808311610c1757829003601f168201915b5050505050905090565b6000610c4982613674565b610caa5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610b81565b506000908152600460205260409020546001600160a01b031690565b6000610cd1826128e9565b9050806001600160a01b0316836001600160a01b03161415610d3f5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610b81565b336001600160a01b0382161480610d5b5750610d5b81336109f3565b610dcd5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610b81565b610dd78383613691565b505050565b6060601487604051610dee9190615482565b9081526040519081900360200190205460ff1615610e3f5760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481b5a5b9d195960921b6044820152606401610b81565b600e54855185518551604051630903288360e11b81526000946001600160a01b031693631206510693610e7e9333938f938f93909290916004016155a0565b602060405180830381600087803b158015610e9857600080fd5b505af1158015610eac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed09190614ecc565b905080610f2d5760405162461bcd60e51b815260206004820152602560248201527f73656e646572206973206e6f7420617070726f7665642070617468776179206d60448201526434b73a32b960d91b6064820152608401610b81565b6001601789604051610f3f9190615482565b9081526040519081900360200190205460ff166003811115610f6357610f63615adf565b14156110c057601888604051610f799190615482565b908152602001604051809103902054831115610fca5760405162461bcd60e51b815260206004820152601060248201526f6e6f7420656e6f75676820766f74657360801b6044820152606401610b81565b600e546020878101518782015191870151604051632336629f60e11b81526001600160a01b039094169363466cc53e9361100e9333938f938b9391906004016155f8565b602060405180830381600087803b15801561102857600080fd5b505af115801561103c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110609190614ecc565b90508061107f5760405162461bcd60e51b8152600401610b8190615905565b60036017896040516110919190615482565b908152604051908190036020019020805460ff191660018360038111156110ba576110ba615adf565b02179055505b60036017896040516110d29190615482565b9081526040519081900360200190205460ff1660038111156110f6576110f6615adf565b146111575760405162461bcd60e51b815260206004820152602b60248201527f63616e206f6e6c79206d696e7420666f722062616467657320696e206170707260448201526a6f7665642073746174757360a81b6064820152608401610b81565b6010546040516060916001600160a01b0316907f8b11cf8a4537c8abe6ddef215a5ad5cfd6c0d5f42e1e6c507a1e8f4d7e79ad5c9060169061119a908d90615482565b9081526040519081900360200181206111b591602401615764565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516111f39190615482565b6000604051808303816000865af19150503d8060008114611230576040519150601f19603f3d011682016040523d82523d6000602084013e611235565b606091505b5090925090508161124557600080fd5b60008180602001905181019061125b9190614f57565b6011546040519192506001600160a01b0316907f65a35964691f73fd1604104300b719081f6abd939cb2fc62b713db949a3b24099061129e9084906024016156f1565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516112dc9190615482565b6000604051808303816000865af19150503d8060008114611319576040519150601f19603f3d011682016040523d82523d6000602084013e61131e565b606091505b5090935091508261132e57600080fd5b600060158b6040516113409190615482565b908152604051908190036020019020546001600160401b0381111561136757611367615b21565b604051908082528060200260200182016040528015611390578160200160208202803683370190505b5090506000805b60158d6040516113a79190615482565b908152604051908190036020019020548110156114d2576113cc600c80546001019055565b600c54915061141e60158e6040516113e49190615482565b9081526020016040518091039020828154811061140357611403615b0b565b6000918252602090912001546001600160a01b0316836136ff565b611428828f61383e565b8b6040516114369190615482565b60405180910390208e60405161144c9190615482565b604051809103902060158f6040516114649190615482565b9081526020016040518091039020838154811061148357611483615b0b565b60009182526020822001546040516001600160a01b03909116917fb1df09f7ba6c7da56f4dc0278f9fe78f4577bd6299ea8c339c7f5c3c02b6490791a4806114ca81615a84565b915050611397565b506114dd8c8c6138c9565b600160148d6040516114ef9190615482565b908152604051908190036020019020805491151560ff19909216919091179055509350505050979650505050505050565b600b546001600160a01b0316331461154a5760405162461bcd60e51b8152600401610b819061587f565b601180546001600160a01b0319166001600160a01b0392909216919091179055565b6001601f8660405161157e9190615482565b9081526020016040518091039020546115979190615a06565b84116115e55760405162461bcd60e51b815260206004820152601960248201527f42616467654e4654203a20696e76616c6964206e756d626572000000000000006044820152606401610b81565b6115f3338686868686613a02565b5083601f866040516116059190615482565b908152604051908190036020019020555050505050565b6116263382613c62565b6116425760405162461bcd60e51b8152600401610b81906158b4565b610dd7838383613d4c565b600061165883612d7e565b82106116ba5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610b81565b506001600160a01b03919091166000908152600760209081526040808320938352929052205490565b600081156118fa5786156117e3576025886040516117019190615482565b908152602001604051809103902060006117183390565b6001600160a01b0316815260208101919091526040016000205460ff161561173f57600080fd5b601f8860405161174f9190615482565b90815260200160405180910390205460208960405161176e9190615482565b9081526020016040518091039020541061178757600080fd5b601f886040516117979190615482565b908152602001604051809103902054601b896040516117b69190615482565b9081526020016040518091039020546117cf91906159d3565b9050600081116117de57600080fd5b6118fa565b6024886040516117f39190615482565b90815260408051602092819003830190206001600160a01b038916600090815290835281812033825290925290205460ff161561182f57600080fd5b601f8860405161183f9190615482565b90815260200160405180910390205460228960405161185e9190615482565b90815260408051602092819003830190206001600160a01b038a16600090815292529020541061188d57600080fd5b601f8860405161189d9190615482565b908152602001604051809103902054601c896040516118bc9190615482565b90815260408051602092819003830190206001600160a01b038a16600090815292529020546118eb91906159d3565b9050600081116118fa57600080fd5b61190933896000888888613a02565b508115611b1a5786156119f557604051600090339083908381818185875af1925050503d8060008114611958576040519150601f19603f3d011682016040523d82523d6000602084013e61195d565b606091505b505090508061196b57600080fd5b600160258a60405161197d9190615482565b908152602001604051809103902060006119943390565b6001600160a01b031681526020808201929092526040908101600020805460ff19169315159390931790925590516119cd908b90615482565b90815260405190819003602001902080549060006119ea83615a84565b919050555050611b1a565b6001600160a01b03861663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b158015611a4d57600080fd5b505af1158015611a61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a859190614ecc565b506001602489604051611a989190615482565b90815260408051602092819003830181206001600160a01b038b1660009081529084528281203382529093529120805460ff191692151592909217909155602290611ae4908a90615482565b90815260408051602092819003830190206001600160a01b038916600090815292528120805491611b1483615a84565b91905055505b611b243389613ef3565b5050505050505050565b610dd783838360405180602001604052806000815250612fdd565b60606000611b5683612d7e565b90506000816001600160401b03811115611b7257611b72615b21565b604051908082528060200260200182016040528015611b9b578160200160208202803683370190505b50905060005b82811015611be257611bb3858261164d565b828281518110611bc557611bc5615b0b565b602090810291909101015280611bda81615a84565b915050611ba1565b509392505050565b6002601784604051611bfc9190615482565b9081526040519081900360200190205460ff166003811115611c2057611c20615adf565b14611c665760405162461bcd60e51b8152602060048201526016602482015275696e636f72726563742062616467652073746174757360501b6044820152606401610b81565b60105460405160009182916001600160a01b03909116907f8b11cf8a4537c8abe6ddef215a5ad5cfd6c0d5f42e1e6c507a1e8f4d7e79ad5c90601690611cad908990615482565b908152604051908190036020018120611cc891602401615764565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611d069190615482565b6000604051808303816000865af19150503d8060008114611d43576040519150601f19603f3d011682016040523d82523d6000602084013e611d48565b606091505b509150915081611d5757600080fd5b600081806020019051810190611d6d9190614f57565b600f546040519192506001600160a01b0316907f0d58dd088cbe688b8c61e8f36a658aa45125fbcff8c7e7af836d3925770f01bc90611db09084906024016156f1565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611dee9190615482565b6000604051808303816000865af19150503d8060008114611e2b576040519150601f19603f3d011682016040523d82523d6000602084013e611e30565b606091505b50909350915082611e4057600080fd5b600082806020019051810190611e569190614c1b565b90506001600160a01b038116611e6b57600080fd5b8515611f9157601d87604051611e819190615482565b9081526040519081900360200190205460ff1615611ee15760405162461bcd60e51b815260206004820152601d60248201527f6e61746976652072657761726420616c726561647920636c61696d65640000006044820152606401610b81565b806001600160a01b0316601b88604051611efb9190615482565b9081526040519081900360200181205490600081818185875af1925050503d8060008114611f45576040519150601f19603f3d011682016040523d82523d6000602084013e611f4a565b606091505b50508094505083611f5a57600080fd5b6001601d88604051611f6c9190615482565b908152604051908190036020019020805491151560ff19909216919091179055612126565b601e87604051611fa19190615482565b90815260408051602092819003830190206001600160a01b0388166000908152925290205460ff16156120165760405162461bcd60e51b815260206004820152601c60248201527f65726332302072657761726420616c726561647920636c61696d6564000000006044820152606401610b81565b846001600160a01b031663a9059cbb82601c8a6040516120369190615482565b9081526040805191829003602090810183206001600160a01b038c166000908152915220546001600160e01b031960e085901b16825261208d92916004016001600160a01b03929092168252602082015260400190565b602060405180830381600087803b1580156120a757600080fd5b505af11580156120bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120df9190614ecc565b506001601e886040516120f29190615482565b90815260408051602092819003830190206001600160a01b038916600090815292529020805460ff19169115159190911790555b50505050505050565b600061213a60095490565b821061219d5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610b81565b600982815481106121b0576121b0615b0b565b90600052602060002001549050919050565b60016017856040516121d49190615482565b9081526040519081900360200190205460ff1660038111156121f8576121f8615adf565b1480612237575060036017856040516122119190615482565b9081526040519081900360200190205460ff16600381111561223557612235615adf565b145b6122835760405162461bcd60e51b815260206004820152601a60248201527f6261646765206e6f742070656e64696e672f617070726f7665640000000000006044820152606401610b81565b6000601f856040516122959190615482565b908152602001604051809103902054116122e35760405162461bcd60e51b815260206004820152600f60248201526e6e6f2075736572207265776172647360881b6044820152606401610b81565b600f5460408051600481526024810182526020810180516001600160e01b0316631c3b702f60e11b179052905160009283926001600160a01b039091169161232b9190615482565b6000604051808303816000865af19150503d8060008114612368576040519150601f19603f3d011682016040523d82523d6000602084013e61236d565b606091505b50915091508161237c57600080fd5b6000818060200190518101906123929190614c1b565b90506000612710602654866123a791906159e7565b6123b191906159d3565b90508515612513576123c381866159bb565b3410156124045760405162461bcd60e51b815260206004820152600f60248201526e1b9bdd08195b9bdd59da081cd95b9d608a1b6044820152606401610b81565b6040516001600160a01b038316908290600081818185875af1925050503d806000811461244d576040519150601f19603f3d011682016040523d82523d6000602084013e612452565b606091505b5050809450508361246257600080fd5b84601b896040516124739190615482565b9081526020016040518091039020600082825461249091906159bb565b909155506124a0905081866159bb565b34111561250e5733816124b38734615a06565b6124bd9190615a06565b604051600081818185875af1925050503d80600081146124f9576040519150601f19603f3d011682016040523d82523d6000602084013e6124fe565b606091505b5050809450508361250e57600080fd5b611b24565b6001600160a01b03871661252657600080fd5b6010546040516001600160a01b03909116907f8b11cf8a4537c8abe6ddef215a5ad5cfd6c0d5f42e1e6c507a1e8f4d7e79ad5c90601690612568908c90615482565b90815260405190819003602001812061258391602401615764565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516125c19190615482565b6000604051808303816000865af19150503d80600081146125fe576040519150601f19603f3d011682016040523d82523d6000602084013e612603565b606091505b5090945092508361261357600080fd5b6000838060200190518101906126299190614f57565b6011546040519192506001600160a01b0316907f11f69039648f0dd87bd7c96fa7501d8c9b90ae27f5d68bb2f9adfc6ae113637a9061267090849046908d90602401615731565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516126ae9190615482565b6000604051808303816000865af19150503d80600081146126eb576040519150601f19603f3d011682016040523d82523d6000602084013e6126f0565b606091505b5090955093508461270057600080fd5b838060200190518101906127149190614ecc565b9450846127585760405162461bcd60e51b8152602060048201526012602482015271115490cc8c081b9bdd08185c1c1c9bdd995960721b6044820152606401610b81565b6001600160a01b0388166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b039182166004820152908616602482015260448101859052606401602060405180830381600087803b1580156127b857600080fd5b505af11580156127cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f09190614ecc565b506001600160a01b0388166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101899052606401602060405180830381600087803b15801561284f57600080fd5b505af1158015612863573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128879190614ecc565b5085601c8a6040516128999190615482565b908152602001604051809103902060008a6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546128d991906159bb565b9091555050505050505050505050565b6000818152600260205260408120546001600160a01b031680610ab75760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610b81565b60016017876040516129729190615482565b9081526040519081900360200190205460ff16600381111561299657612996615adf565b146129d75760405162461bcd60e51b81526020600482015260116024820152706261646765206e6f742070656e64696e6760781b6044820152606401610b81565b601a866040516129e79190615482565b908152602001604051809103902060006129fe3390565b6001600160a01b0316815260208101919091526040016000205460ff1615612a685760405162461bcd60e51b815260206004820152601c60248201527f616c726561647920766f74656420666f722074686973206261646765000000006044820152606401610b81565b84604051602001612a799190615482565b60405160208183030381529060405280519060200120601687604051612a9f9190615482565b9081526020016040518091039020604051602001612abd91906154cd565b6040516020818303038152906040528051906020012014612b165760405162461bcd60e51b81526020600482015260136024820152721a5b98dbdc9c9958dd081c185d1a1dd85e5259606a1b6044820152606401610b81565b600e54845184518451604051630903288360e11b81526000946001600160a01b031693631206510693612b559333938e938e93909290916004016155a0565b602060405180830381600087803b158015612b6f57600080fd5b505af1158015612b83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba79190614ecc565b905080612bc65760405162461bcd60e51b8152600401610b819061583b565b600e546020868101518682015191860151604051632336629f60e11b81526000946001600160a01b03169363466cc53e93612c0c9333938f938b939290916004016155f8565b602060405180830381600087803b158015612c2657600080fd5b505af1158015612c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5e9190614ecc565b905080612c7d5760405162461bcd60e51b8152600401610b8190615905565b601988604051612c8d9190615482565b9081526040519081900360200190208054906000612caa83615a84565b91905055506001601a89604051612cc19190615482565b90815260200160405180910390206000612cd83390565b6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555082601989604051612d209190615482565b90815260200160405180910390205410611b24576002601789604051612d469190615482565b908152604051908190036020019020805460ff19166001836003811115612d6f57612d6f615adf565b02179055505050505050505050565b60006001600160a01b038216612de95760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610b81565b506001600160a01b031660009081526003602052604090205490565b600b546001600160a01b03163314612e2f5760405162461bcd60e51b8152600401610b819061587f565b612e3960006141a7565b565b805160208183018101805160168252928201919093012091528054610ad690615a49565b606060018054610bbb90615a49565b612e793383836141f9565b5050565b6060601582604051612e8f9190615482565b9081526040805191829003602090810183208054808302850183019093528284529190830182828015612eeb57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612ecd575b50505050509050919050565b6000601788604051612f099190615482565b9081526040519081900360200190205460ff166003811115612f2d57612f2d615adf565b14612f3757600080fd5b6001601788604051612f499190615482565b908152604051908190036020019020805460ff19166001836003811115612f7257612f72615adf565b021790555085601688604051612f889190615482565b90815260200160405180910390209080519060200190612fa99291906149ef565b5084601f88604051612fbb9190615482565b90815260405190819003602001902055831561212657612126878484846121c2565b612fe73383613c62565b6130035760405162461bcd60e51b8152600401610b81906158b4565b61300f848484846142c8565b50505050565b6060610ab7826142fb565b60016017876040516130329190615482565b9081526040519081900360200190205460ff16600381111561305657613056615adf565b146130985760405162461bcd60e51b8152602060048201526012602482015271737461747573206e6f742070656e64696e6760701b6044820152606401610b81565b601a866040516130a89190615482565b908152602001604051809103902060006130bf3390565b6001600160a01b0316815260208101919091526040016000205460ff16156131295760405162461bcd60e51b815260206004820152601c60248201527f616c726561647920766f74656420666f722074686973206261646765000000006044820152606401610b81565b8460405160200161313a9190615482565b604051602081830303815290604052805190602001206016876040516131609190615482565b908152602001604051809103902060405160200161317e91906154cd565b60405160208183030381529060405280519060200120146131d75760405162461bcd60e51b81526020600482015260136024820152721a5b98dbdc9c9958dd081c185d1a1dd85e5259606a1b6044820152606401610b81565b600e54845184518451604051630903288360e11b81526000946001600160a01b0316936312065106936132169333938e938e93909290916004016155a0565b602060405180830381600087803b15801561323057600080fd5b505af1158015613244573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132689190614ecc565b9050806132875760405162461bcd60e51b8152600401610b819061583b565b600e546020868101518682015191860151604051632336629f60e11b81526000946001600160a01b03169363466cc53e936132cd9333938f938b939290916004016155f8565b602060405180830381600087803b1580156132e757600080fd5b505af11580156132fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061331f9190614ecc565b90508061333e5760405162461bcd60e51b8152600401610b8190615905565b60188860405161334e9190615482565b908152604051908190036020019020805490600061336b83615a84565b91905055506001601a896040516133829190615482565b908152602001604051809103902060006133993390565b6001600160a01b0316815260208101919091526040908101600020805460ff191692151592909217909155516018906133d3908a90615482565b908152602001604051809103902054600114156135055760008951116134295760405162461bcd60e51b815260206004820152600b60248201526a656d70747920617272617960a81b6044820152606401610b81565b8860158960405161343a9190615482565b9081526020016040518091039020908051906020019061345b929190614a73565b5060188860405161346c9190615482565b90815260200160405180910390205483116135005760036017896040516134939190615482565b908152604051908190036020019020805460ff191660018360038111156134bc576134bc615adf565b0217905550876040516134cf9190615482565b604051908190038120907fcb7144701e8d0b3465bbe141996dd943a0458bba214e98eac12ba128ffe44c0890600090a25b6135a9565b826018896040516135169190615482565b908152602001604051809103902054106135a957600360178960405161353c9190615482565b908152604051908190036020019020805460ff1916600183600381111561356557613565615adf565b0217905550876040516135789190615482565b604051908190038120907fcb7144701e8d0b3465bbe141996dd943a0458bba214e98eac12ba128ffe44c0890600090a25b505050505050505050565b600b546001600160a01b031633146135de5760405162461bcd60e51b8152600401610b819061587f565b6001600160a01b0381166136435760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b81565b61364c816141a7565b50565b60006001600160e01b0319821663780e9d6360e01b1480610ab75750610ab78261446a565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906136c6826128e9565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6001600160a01b0382166137555760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610b81565b61375e81613674565b156137ab5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610b81565b6137b7600083836144ba565b6001600160a01b03821660009081526003602052604081208054600192906137e09084906159bb565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b61384782613674565b6138aa5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610b81565b60008281526006602090815260409091208251610dd7928401906149ef565b60125460405160009182916001600160a01b03909116907f95d787a03c8361502a296ed0f1c0280cd66816439d88a467f0e63f8e7965038d9061391490879085908890602401615704565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516139529190615482565b6000604051808303816000865af19150503d806000811461398f576040519150601f19603f3d011682016040523d82523d6000602084013e613994565b606091505b5091509150816139a357600080fd5b6000818060200190518101906139b99190614c1b565b9050806023866040516139cc9190615482565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b03199092169190911790555050505050565b60008087304660218a604051613a189190615482565b90815260408051602092819003830181206001600160a01b038f1660009081529084529190912054613a539594939290918c918e9101615427565b60408051601f1981840301815282825280516020918201206011546004855260248501845291840180516001600160e01b031663a5207df560e01b179052915191935060009283926001600160a01b0390921691613ab19190615482565b6000604051808303816000865af19150503d8060008114613aee576040519150601f19603f3d011682016040523d82523d6000602084013e613af3565b606091505b509150915081613b0257600080fd5b600081806020019051810190613b189190614c1b565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101869052909150600190605c0160408051601f198184030181528282528051602091820120600084529083018083525260ff891690820152606081018a90526080810189905260a0016020604051602081039080840390855afa158015613baf573d6000803e3d6000fd5b505050602060405103516001600160a01b0316816001600160a01b031614613c0c5760405162461bcd60e51b815260206004820152601060248201526f24b731b7b93932b1ba1039b4b3b732b960811b6044820152606401610b81565b60218a604051613c1c9190615482565b90815260408051602092819003830190206001600160a01b038e16600090815292528120805491613c4c83615a84565b9091555060019c9b505050505050505050505050565b6000613c6d82613674565b613cce5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610b81565b6000613cd9836128e9565b9050806001600160a01b0316846001600160a01b03161480613d145750836001600160a01b0316613d0984610c3e565b6001600160a01b0316145b80613d4457506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316613d5f826128e9565b6001600160a01b031614613dc35760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610b81565b6001600160a01b038216613e255760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610b81565b613e308383836144ba565b613e3b600082613691565b6001600160a01b0383166000908152600360205260408120805460019290613e64908490615a06565b90915550506001600160a01b0382166000908152600360205260408120805460019290613e929084906159bb565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000602382604051613f059190615482565b908152604051908190036020019020546001600160a01b0316905080613f655760405162461bcd60e51b8152602060048201526015602482015274696e76616c6964206261646765206164647265737360581b6044820152606401610b81565b604080513360248083019190915282518083039091018152604490910182526020810180516001600160e01b03166370a0823160e01b179052905160009182916001600160a01b03851691613fb991615482565b6000604051808303816000865af19150503d8060008114613ff6576040519150601f19603f3d011682016040523d82523d6000602084013e613ffb565b606091505b50915091508161400a57600080fd5b60008180602001905181019061402091906153e2565b90508061419f5760408051336024820152600160448083019190915282518083039091018152606490910182526020810180516001600160e01b03166340c10f1960e01b17905290516001600160a01b0386169161407d91615482565b6000604051808303816000865af19150503d80600081146140ba576040519150601f19603f3d011682016040523d82523d6000602084013e6140bf565b606091505b509093509150826140cf57600080fd5b6012546001600160a01b03167fcc01d2099bd321b8ebca9d3105bdff4e2a8decb6d89201c0c56161f5c90983f6338760405160240161410f92919061557c565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161414d9190615482565b6000604051808303816000865af19150503d806000811461418a576040519150601f19603f3d011682016040523d82523d6000602084013e61418f565b606091505b5090935091508261419f57600080fd5b505050505050565b600b80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316141561425b5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610b81565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6142d3848484613d4c565b6142df848484846144c5565b61300f5760405162461bcd60e51b8152600401610b81906157e9565b606061430682613674565b61436c5760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b6064820152608401610b81565b6000828152600660205260408120805461438590615a49565b80601f01602080910402602001604051908101604052809291908181526020018280546143b190615a49565b80156143fe5780601f106143d3576101008083540402835291602001916143fe565b820191906000526020600020905b8154815290600101906020018083116143e157829003601f168201915b50505050509050600061441c60408051602081019091526000815290565b905080516000141561442f575092915050565b81511561446157808260405160200161444992919061549e565b60405160208183030381529060405292505050919050565b613d44846145d2565b60006001600160e01b031982166380ac58cd60e01b148061449b57506001600160e01b03198216635b5e139f60e01b145b80610ab757506301ffc9a760e01b6001600160e01b0319831614610ab7565b610dd78383836146aa565b60006001600160a01b0384163b156145c757604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061450990339089908890889060040161553f565b602060405180830381600087803b15801561452357600080fd5b505af1925050508015614553575060408051601f3d908101601f1916820190925261455091810190614f06565b60015b6145ad573d808015614581576040519150601f19603f3d011682016040523d82523d6000602084013e614586565b606091505b5080516145a55760405162461bcd60e51b8152600401610b81906157e9565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050613d44565b506001949350505050565b60606145dd82613674565b6146415760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610b81565b600061465860408051602081019091526000815290565b9050600081511161467857604051806020016040528060008152506146a3565b8061468284614762565b60405160200161469392919061549e565b6040516020818303038152906040525b9392505050565b6001600160a01b0383166147055761470081600980546000838152600a60205260408120829055600182018355919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0155565b614728565b816001600160a01b0316836001600160a01b03161461472857614728838261485f565b6001600160a01b03821661473f57610dd7816148fc565b826001600160a01b0316826001600160a01b031614610dd757610dd782826149ab565b6060816147865750506040805180820190915260018152600360fc1b602082015290565b8160005b81156147b0578061479a81615a84565b91506147a99050600a836159d3565b915061478a565b6000816001600160401b038111156147ca576147ca615b21565b6040519080825280601f01601f1916602001820160405280156147f4576020820181803683370190505b5090505b8415613d4457614809600183615a06565b9150614816600a86615a9f565b6148219060306159bb565b60f81b81838151811061483657614836615b0b565b60200101906001600160f81b031916908160001a905350614858600a866159d3565b94506147f8565b6000600161486c84612d7e565b6148769190615a06565b6000838152600860205260409020549091508082146148c9576001600160a01b03841660009081526007602090815260408083208584528252808320548484528184208190558352600890915290208190555b5060009182526008602090815260408084208490556001600160a01b039094168352600781528383209183525290812055565b60095460009061490e90600190615a06565b6000838152600a60205260408120546009805493945090928490811061493657614936615b0b565b90600052602060002001549050806009838154811061495757614957615b0b565b6000918252602080832090910192909255828152600a9091526040808220849055858252812055600980548061498f5761498f615af5565b6001900381819060005260206000200160009055905550505050565b60006149b683612d7e565b6001600160a01b039093166000908152600760209081526040808320868452825280832085905593825260089052919091209190915550565b8280546149fb90615a49565b90600052602060002090601f016020900481019282614a1d5760008555614a63565b82601f10614a3657805160ff1916838001178555614a63565b82800160010185558215614a63579182015b82811115614a63578251825591602001919060010190614a48565b50614a6f929150614ac8565b5090565b828054828255906000526020600020908101928215614a63579160200282015b82811115614a6357825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614a93565b5b80821115614a6f5760008155600101614ac9565b6000614af0614aeb84615994565b615964565b9050828152838383011115614b0457600080fd5b828260208301376000602084830101529392505050565b600082601f830112614b2c57600080fd5b614b3461593c565b808385604086011115614b4657600080fd5b60005b6002811015614b68578135845260209384019390910190600101614b49565b509095945050505050565b600082601f830112614b8457600080fd5b614b8c61593c565b808385604086011115614b9e57600080fd5b60005b6002811015614b6857614bb382614be8565b84526020938401939190910190600101614ba1565b600082601f830112614bd957600080fd5b6146a383833560208501614add565b803560ff81168114614bf957600080fd5b919050565b600060208284031215614c1057600080fd5b81356146a381615b37565b600060208284031215614c2d57600080fd5b81516146a381615b37565b60008060408385031215614c4b57600080fd5b8235614c5681615b37565b91506020830135614c6681615b37565b809150509250929050565b600080600060608486031215614c8657600080fd5b8335614c9181615b37565b92506020840135614ca181615b37565b929592945050506040919091013590565b60008060008060808587031215614cc857600080fd5b8435614cd381615b37565b93506020850135614ce381615b37565b92506040850135915060608501356001600160401b03811115614d0557600080fd5b8501601f81018713614d1657600080fd5b614d2587823560208401614add565b91505092959194509250565b60008060408385031215614d4457600080fd5b8235614d4f81615b37565b91506020830135614c6681615b4c565b60008060408385031215614d7257600080fd5b8235614d7d81615b37565b946020939093013593505050565b6000806000806000806000610140888a031215614da757600080fd5b6001600160401b038089351115614dbd57600080fd5b883589018a601f820112614dd057600080fd5b803582811115614de257614de2615b21565b8060051b614df260208201615964565b80838252602082019150602085018f6020858801011115614e1257600080fd5b600095505b84861015614e4057614e298135615b37565b803583526001959095019460209283019201614e17565b509b5050505060208a0135905081811115614e5a57600080fd5b614e668b828c01614bc8565b975050604089013581811115614e7b57600080fd5b614e878b828c01614bc8565b96505050614e988960608a01614b1b565b9350614ea78960a08a01614b1b565b9250614eb68960e08a01614b73565b9150610120880135905092959891949750929550565b600060208284031215614ede57600080fd5b81516146a381615b4c565b600060208284031215614efb57600080fd5b81356146a381615b5a565b600060208284031215614f1857600080fd5b81516146a381615b5a565b600060208284031215614f3557600080fd5b81356001600160401b03811115614f4b57600080fd5b613d4484828501614bc8565b600060208284031215614f6957600080fd5b81516001600160401b03811115614f7f57600080fd5b8201601f81018413614f9057600080fd5b8051614f9e614aeb82615994565b818152856020838501011115614fb357600080fd5b614fc4826020830160208601615a1d565b95945050505050565b60008060408385031215614fe057600080fd5b82356001600160401b03811115614ff657600080fd5b61500285828601614bc8565b9250506020830135614c6681615b37565b6000806000806080858703121561502957600080fd5b84356001600160401b0381111561503f57600080fd5b61504b87828801614bc8565b945050602085013561505c81615b37565b9250604085013561506c81615b4c565b9396929550929360600135925050565b60008060006060848603121561509157600080fd5b83356001600160401b038111156150a757600080fd5b6150b386828701614bc8565b93505060208401356150c481615b4c565b915060408401356150d481615b37565b809150509250925092565b600080600080600080600060e0888a0312156150fa57600080fd5b87356001600160401b0381111561511057600080fd5b61511c8a828b01614bc8565b975050602088013561512d81615b4c565b9550604088013561513d81615b37565b9450606088013593506080880135925061515960a08901614be8565b915060c088013561516981615b4c565b8091505092959891949750929550565b600080600080600080610120878903121561519357600080fd5b86356001600160401b03808211156151aa57600080fd5b6151b68a838b01614bc8565b975060208901359150808211156151cc57600080fd5b506151d989828a01614bc8565b9550506151e98860408901614b1b565b93506151f88860808901614b1b565b92506152078860c08901614b73565b915061010087013590509295509295509295565b6000806000806000806000610140888a03121561523757600080fd5b87356001600160401b038082111561524e57600080fd5b61525a8b838c01614bc8565b985060208a013591508082111561527057600080fd5b61527c8b838c01614bc8565b975060408a013591508082111561529257600080fd5b5061529f8a828b01614bc8565b955050614e988960608a01614b1b565b600080600080600080600060e0888a0312156152ca57600080fd5b87356001600160401b03808211156152e157600080fd5b6152ed8b838c01614bc8565b985060208a013591508082111561530357600080fd5b506153108a828b01614bc8565b96505060408801359450606088013561532881615b4c565b9350608088013561533881615b37565b925060a088013561534881615b4c565b8092505060c0880135905092959891949750929550565b600080600080600060a0868803121561537757600080fd5b85356001600160401b0381111561538d57600080fd5b61539988828901614bc8565b9550506020860135935060408601359250606086013591506153bd60808701614be8565b90509295509295909350565b6000602082840312156153db57600080fd5b5035919050565b6000602082840312156153f457600080fd5b5051919050565b60008151808452615413816020860160208601615a1d565b601f01601f19169290920160200192915050565b60006bffffffffffffffffffffffff19808960601b168352808860601b166014840152508560288301528460488301528360688301528251615470816088850160208701615a1d565b91909101608801979650505050505050565b60008251615494818460208701615a1d565b9190910192915050565b600083516154b0818460208801615a1d565b8351908301906154c4818360208801615a1d565b01949350505050565b60008083546154db81615a49565b600182811680156154f3576001811461550457615533565b60ff19841687528287019450615533565b8760005260208060002060005b8581101561552a5781548a820152908401908201615511565b50505082870194505b50929695505050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090615572908301846153fb565b9695505050505050565b6001600160a01b0383168152604060208201819052600090613d44908301846153fb565b6001600160a01b038716815260c0602082018190526000906155c4908301886153fb565b82810360408401526155d681886153fb565b60608401969096525050608081019290925260ff1660a0909101529392505050565b6001600160a01b038716815260c06020820181905260009061561c908301886153fb565b905085604083015284606083015283608083015260ff831660a0830152979650505050505050565b6020808252825182820181905260009190848201906040850190845b818110156156855783516001600160a01b031683529284019291840191600101615660565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015615685578351835292840192918401916001016156ad565b60208101600483106156eb57634e487b7160e01b600052602160045260246000fd5b91905290565b6020815260006146a360208301846153fb565b60608152600061571760608301866153fb565b8415156020840152828103604084015261557281856153fb565b60608152600061574460608301866153fb565b6020830194909452506001600160a01b0391909116604090910152919050565b600060208083526000845461577881615a49565b8084870152604060018084166000811461579957600181146157ad576157db565b60ff198516898401526060890195506157db565b896000528660002060005b858110156157d35781548b82018601529083019088016157b8565b8a0184019650505b509398975050505050505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526024908201527f73656e646572206973206e6f7420617070726f7665642070617468776179207660408201526337ba32b960e11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601b908201527f696e636f727265637420766f746573206e65656465642073656e740000000000604082015260600190565b604080519081016001600160401b038111828210171561595e5761595e615b21565b60405290565b604051601f8201601f191681016001600160401b038111828210171561598c5761598c615b21565b604052919050565b60006001600160401b038211156159ad576159ad615b21565b50601f01601f191660200190565b600082198211156159ce576159ce615ab3565b500190565b6000826159e2576159e2615ac9565b500490565b6000816000190483118215151615615a0157615a01615ab3565b500290565b600082821015615a1857615a18615ab3565b500390565b60005b83811015615a38578181015183820152602001615a20565b8381111561300f5750506000910152565b600181811c90821680615a5d57607f821691505b60208210811415615a7e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415615a9857615a98615ab3565b5060010190565b600082615aae57615aae615ac9565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461364c57600080fd5b801515811461364c57600080fd5b6001600160e01b03198116811461364c57600080fdfea2646970667358221220bb2d45ac87da977995fde52ad17e102923a85b0bd4e8e4ff9832cd79cbfddf2364736f6c63430008070033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1902,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1904,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1908,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1912,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1916,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1922,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3227,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2891,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2895,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2898,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "_allTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2902,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 273,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 5184,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Counter)3723_storage"
      },
      {
        "astId": 5187,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "vrfContract",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(RandomNumberConsumer)10798"
      },
      {
        "astId": 5190,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "verifyContract",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(Verify)11459"
      },
      {
        "astId": 5192,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "projectNFTAddress",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 5194,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "pathwayNFTAddress",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 5196,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "appDiamond",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 5198,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "adventureFactory",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 5202,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "statusStrings",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 5206,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "badgeMinted",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 5211,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "contributors",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 5215,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "pathwayIdforBadge",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_string_memory_ptr,t_string_storage)"
      },
      {
        "astId": 5220,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "status",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_string_memory_ptr,t_enum(BadgeStatus)5300)"
      },
      {
        "astId": 5224,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "votes",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 5228,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "votesReject",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 5234,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "reviewerVotes",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5238,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "nativeRewards",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 5244,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "erc20Amounts",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 5248,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "nativeRefundClaimed",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 5254,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "erc20RefundClaimed",
        "offset": 0,
        "slot": "30",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5258,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "numUsersRewardPerBadge",
        "offset": 0,
        "slot": "31",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 5262,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "currentNumUsersRewardPerBadgeNative",
        "offset": 0,
        "slot": "32",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 5268,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "nonces",
        "offset": 0,
        "slot": "33",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 5274,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "currentNumUsersRewardPerBadgeERC20",
        "offset": 0,
        "slot": "34",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 5278,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "adventurerAddress",
        "offset": 0,
        "slot": "35",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 5286,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "userRewardedForBadgeERC20",
        "offset": 0,
        "slot": "36",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_mapping(t_address,t_bool)))"
      },
      {
        "astId": 5292,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "userRewardedForBadgeNative",
        "offset": 0,
        "slot": "37",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5295,
        "contract": "contracts/BadgeNFT.sol:BadgeNFT",
        "label": "fee",
        "offset": 0,
        "slot": "38",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(RandomNumberConsumer)10798": {
        "encoding": "inplace",
        "label": "contract RandomNumberConsumer",
        "numberOfBytes": "20"
      },
      "t_contract(Verify)11459": {
        "encoding": "inplace",
        "label": "contract Verify",
        "numberOfBytes": "20"
      },
      "t_enum(BadgeStatus)5300": {
        "encoding": "inplace",
        "label": "enum BadgeNFT.BadgeStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_enum(BadgeStatus)5300)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => enum BadgeNFT.BadgeStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(BadgeStatus)5300"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_mapping(t_address,t_bool)))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(address => mapping(address => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_string_memory_ptr,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)3723_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 3722,
            "contract": "contracts/BadgeNFT.sol:BadgeNFT",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0xcB2AF596fC582a3206e2D59368849Df5DAca75FD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_serverAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_approvers",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_senderAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_projectId",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "name": "deployDiamondVerify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "deployNoncesById",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_senderAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_objectId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_parentId",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "name": "metaDataVerify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "noncesParentIdChildId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "serverAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "setServerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "thresholdNoncesById",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_senderAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_objectId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "votesNeeded",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "name": "thresholdVerify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xff4c8ecc995f5978e75db215e9c7000af7f65e9f30ccd83b251f97cd6c140140",
  "receipt": {
    "to": null,
    "from": "0x5D9f534E380E541a63a7dF62547e199A0f7489b5",
    "contractAddress": "0xcB2AF596fC582a3206e2D59368849Df5DAca75FD",
    "transactionIndex": 29,
    "gasUsed": "1063565",
    "logsBloom": "0x
    "blockHash": "0x5dbbdfbc297d0562c37a61bcf726d2d4f2b0c7d4f784b4ad7b52d81caa6e960a",
    "transactionHash": "0xff4c8ecc995f5978e75db215e9c7000af7f65e9f30ccd83b251f97cd6c140140",
    "logs": [
      {
        "transactionIndex": 29,
        "blockNumber": 10525709,
        "transactionHash": "0xff4c8ecc995f5978e75db215e9c7000af7f65e9f30ccd83b251f97cd6c140140",
        "address": "0xcB2AF596fC582a3206e2D59368849Df5DAca75FD",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005d9f534e380e541a63a7df62547e199a0f7489b5"
        ],
        "data": "0x",
        "logIndex": 28,
        "blockHash": "0x5dbbdfbc297d0562c37a61bcf726d2d4f2b0c7d4f784b4ad7b52d81caa6e960a"
      }
    ],
    "blockNumber": 10525709,
    "cumulativeGasUsed": "5933299",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5eF593FF381b7d36028c795B51e138428d009C20",
    [
      "0x5D9f534E380E541a63a7dF62547e199A0f7489b5",
      "0xA072f8Bd3847E21C8EdaAf38D7425631a2A63631",
      "0x2c0B08C414A8EE088596832cf64eFcA283D46703",
      "0x16eBE01dCae1338f8d1802C63712C5279e768d29",
      "0x3E31155a1c17c9F85e74828447aec412090a4622",
      "0x4678854dB7421fF1B3C5ACAe6c5C11e73f4F5702",
      "0xDAFf97a69408Cdb4AeFE331eA029a55e189ef60b",
      "0xD39C3Cdb811f6544067ECFeDEf40855578cA0C52"
    ]
  ],
  "numDeployments": 2,
  "solcInputHash": "18bf3ca238bfed8d5b87482a431cda3f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_serverAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_approvers\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_senderAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_projectId\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"deployDiamondVerify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"deployNoncesById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_senderAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_objectId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_parentId\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"metaDataVerify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"noncesParentIdChildId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serverAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setServerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"thresholdNoncesById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_senderAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_objectId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"votesNeeded\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"thresholdVerify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Verify.sol\":\"Verify\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Verify.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n//import '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\n\\ncontract Verify is Ownable {\\n    //using ECDSA for bytes32;\\n\\n    mapping(string => mapping(string => uint256)) public noncesParentIdChildId; //nonce for each parentId and childId (e.g. projectId and  courseId or CourseId and questId)\\n    mapping(string => uint256) public thresholdNoncesById; //nonce for each parentId Threshold (e.g. projectId for course and Course Id for quest)\\n    mapping(string => uint256) public deployNoncesById; //nonce for each projectId deploy of a diamond\\n    address public serverAddress;\\n    mapping(address => bool) public approvers;\\n\\n    constructor(address _serverAddress, address[] memory _approvers) {\\n        require(_serverAddress != address(0));\\n        serverAddress = _serverAddress;\\n        for (uint256 i = 0; i < _approvers.length; i++) {\\n            approvers[_approvers[i]] = true;\\n        }\\n    }\\n\\n    function getHash(\\n        address _senderAddress,\\n        string memory _objectId,\\n        string memory _parentId,\\n        address _contractAddress\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    noncesParentIdChildId[_parentId][_objectId],\\n                    _senderAddress,\\n                    _contractAddress,\\n                    address(this),\\n                    _objectId\\n                )\\n            );\\n    }\\n\\n    function metaDataVerify(\\n        address _senderAddress,\\n        string memory _objectId,\\n        string memory _parentId,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) public returns (bool) {\\n        bytes32 hashRecover = getHash(\\n            _senderAddress,\\n            _objectId,\\n            _parentId,\\n            _msgSender()\\n        );\\n        address signer = ecrecover(\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    hashRecover\\n                )\\n            ),\\n            v,\\n            r,\\n            s\\n        );\\n        require(\\n            signer == serverAddress,\\n            \\\"SIGNER MUST BE SERVER in metaDataVerify\\\"\\n        );\\n        noncesParentIdChildId[_parentId][_objectId]++;\\n        return signer == serverAddress;\\n    }\\n\\n    function thresholdVerify(\\n        address _senderAddress,\\n        string memory _objectId,\\n        uint256 votesNeeded,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) public returns (bool) {\\n        bytes32 hashRecover = keccak256(\\n            abi.encodePacked(\\n                thresholdNoncesById[_objectId],\\n                votesNeeded,\\n                _senderAddress,\\n                _msgSender(),\\n                address(this),\\n                _objectId\\n            )\\n        );\\n        address signer = ecrecover(\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    hashRecover\\n                )\\n            ),\\n            v,\\n            r,\\n            s\\n        );\\n        require(\\n            signer == serverAddress,\\n            \\\"SIGNER MUST BE SERVER in thresholdVerify\\\"\\n        );\\n        thresholdNoncesById[_objectId]++;\\n        return signer == serverAddress;\\n    }\\n\\n    function deployDiamondVerify(\\n        address _senderAddress,\\n        string memory _projectId,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) public returns (bool) {\\n        bytes32 hashRecover = keccak256(\\n            abi.encodePacked(\\n                deployNoncesById[_projectId],\\n                _senderAddress,\\n                _msgSender(),\\n                address(this),\\n                _projectId\\n            )\\n        );\\n        address signer = ecrecover(\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    hashRecover\\n                )\\n            ),\\n            v,\\n            r,\\n            s\\n        );\\n        require(\\n            signer == serverAddress,\\n            \\\"SIGNER MUST BE SERVER in deployDiamondVerify\\\"\\n        );\\n        deployNoncesById[_projectId]++;\\n        return signer == serverAddress;\\n    }\\n\\n    function setServerAddress(address _newAddress) public {\\n        require(approvers[_msgSender()], \\\"must be approved\\\");\\n        require(_newAddress != address(0));\\n        serverAddress = _newAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x7c5f5a86501cd1830c205a8dacbbcf00bd81ecb223bbc0df1755786ee3a050e5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200109638038062001096833981016040819052620000349162000153565b6200003f33620000e6565b6001600160a01b0382166200005357600080fd5b600480546001600160a01b0319166001600160a01b03841617905560005b8151811015620000dd576001600560008484815181106200009657620000966200026d565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580620000d48162000243565b91505062000071565b50505062000299565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200014e57600080fd5b919050565b600080604083850312156200016757600080fd5b620001728362000136565b602084810151919350906001600160401b03808211156200019257600080fd5b818601915086601f830112620001a757600080fd5b815181811115620001bc57620001bc62000283565b8060051b604051601f19603f83011681018181108582111715620001e457620001e462000283565b604052828152858101935084860182860187018b10156200020457600080fd5b600095505b8386101562000232576200021d8162000136565b85526001959095019493860193860162000209565b508096505050505050509250929050565b60006000198214156200026657634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b610ded80620002a96000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638da5cb5b116100715780638da5cb5b1461018a578063beda9199146101af578063c6e4e81f146101da578063db420fe3146101ed578063dfc718d014610200578063f2fde38b1461022b57600080fd5b8063040c8c7a146100b95780630a144391146101145780631206510614610147578063466cc53e1461015a57806347b64eb01461016d578063715018a614610182575b600080fd5b6101016100c7366004610c2c565b8151602081840181018051600182529282019482019490942091909352815180830184018051928152908401929093019190912091525481565b6040519081526020015b60405180910390f35b610137610122366004610a56565b60056020526000908152604090205460ff1681565b604051901515815260200161010b565b610137610155366004610aea565b61023e565b610137610168366004610b81565b6103d3565b61018061017b366004610a56565b610559565b005b6101806105e0565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161010b565b6101016101bd366004610bef565b805160208183018101805160038252928201919093012091525481565b6101376101e8366004610a78565b610646565b600454610197906001600160a01b031681565b61010161020e366004610bef565b805160208183018101805160028252928201919093012091525481565b610180610239366004610a56565b61080c565b60008061024d888888336108d7565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052909150600090600190605c0160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018890526080810187905260a0016020604051602081039080840390855afa1580156102e7573d6000803e3d6000fd5b5050604051601f1901516004549092506001600160a01b0380841691161490506103685760405162461bcd60e51b815260206004820152602760248201527f5349474e4552204d5553542042452053455256455220696e206d6574614461746044820152666156657269667960c81b60648201526084015b60405180910390fd5b6001876040516103789190610ccb565b9081526020016040518091039020886040516103949190610ccb565b90815260405190819003602001902080549060006103b183610d78565b90915550506004546001600160a01b0390811691161498975050505050505050565b6000806002876040516103e69190610ccb565b90815260200160405180910390205486896103fe3390565b308b60405160200161041596959493929190610d24565b604051602081830303815290604052805190602001209050600060018260405160200161046e91907f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b60408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018890526080810187905260a0016020604051602081039080840390855afa1580156104cc573d6000803e3d6000fd5b5050604051601f1901516004549092506001600160a01b0380841691161490506105495760405162461bcd60e51b815260206004820152602860248201527f5349474e4552204d5553542042452053455256455220696e207468726573686f6044820152676c6456657269667960c01b606482015260840161035f565b6002886040516103949190610ccb565b3360009081526005602052604090205460ff166105ab5760405162461bcd60e51b815260206004820152601060248201526f1b5d5cdd08189948185c1c1c9bdd995960821b604482015260640161035f565b6001600160a01b0381166105be57600080fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461063a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161035f565b610644600061094c565b565b6000806003866040516106599190610ccb565b908152602001604051809103902054876106703390565b3089604051602001610686959493929190610cd7565b60405160208183030381529060405280519060200120905060006001826040516020016106df91907f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b60408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018890526080810187905260a0016020604051602081039080840390855afa15801561073d573d6000803e3d6000fd5b5050604051601f1901516004549092506001600160a01b0380841691161490506107be5760405162461bcd60e51b815260206004820152602c60248201527f5349474e4552204d5553542042452053455256455220696e206465706c6f794460448201526b69616d6f6e6456657269667960a01b606482015260840161035f565b6003876040516107ce9190610ccb565b90815260405190819003602001902080549060006107eb83610d78565b90915550506004546001600160a01b03908116911614979650505050505050565b6000546001600160a01b031633146108665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161035f565b6001600160a01b0381166108cb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161035f565b6108d48161094c565b50565b60006001836040516108e99190610ccb565b9081526020016040518091039020846040516109059190610ccb565b9081526020016040518091039020548583308760405160200161092c959493929190610cd7565b604051602081830303815290604052805190602001209050949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146109b357600080fd5b919050565b600082601f8301126109c957600080fd5b813567ffffffffffffffff808211156109e4576109e4610da1565b604051601f8301601f19908116603f01168101908282118183101715610a0c57610a0c610da1565b81604052838152866020858801011115610a2557600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff811681146109b357600080fd5b600060208284031215610a6857600080fd5b610a718261099c565b9392505050565b600080600080600060a08688031215610a9057600080fd5b610a998661099c565b9450602086013567ffffffffffffffff811115610ab557600080fd5b610ac1888289016109b8565b9450506040860135925060608601359150610ade60808701610a45565b90509295509295909350565b60008060008060008060c08789031215610b0357600080fd5b610b0c8761099c565b9550602087013567ffffffffffffffff80821115610b2957600080fd5b610b358a838b016109b8565b96506040890135915080821115610b4b57600080fd5b50610b5889828a016109b8565b9450506060870135925060808701359150610b7560a08801610a45565b90509295509295509295565b60008060008060008060c08789031215610b9a57600080fd5b610ba38761099c565b9550602087013567ffffffffffffffff811115610bbf57600080fd5b610bcb89828a016109b8565b955050604087013593506060870135925060808701359150610b7560a08801610a45565b600060208284031215610c0157600080fd5b813567ffffffffffffffff811115610c1857600080fd5b610c24848285016109b8565b949350505050565b60008060408385031215610c3f57600080fd5b823567ffffffffffffffff80821115610c5757600080fd5b610c63868387016109b8565b93506020850135915080821115610c7957600080fd5b50610c86858286016109b8565b9150509250929050565b6000815160005b81811015610cb15760208185018101518683015201610c97565b81811115610cc0576000828601525b509290920192915050565b6000610a718284610c90565b85815260006bffffffffffffffffffffffff19808760601b166020840152808660601b166034840152808560601b16604884015250610d19605c830184610c90565b979650505050505050565b86815285602082015260006bffffffffffffffffffffffff19808760601b166040840152808660601b166054840152808560601b16606884015250610d6c607c830184610c90565b98975050505050505050565b6000600019821415610d9a57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220edcb7dd9ec1e69e90210817d67d3123711ead3873b40dcc252a28320c6f789f364736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80638da5cb5b116100715780638da5cb5b1461018a578063beda9199146101af578063c6e4e81f146101da578063db420fe3146101ed578063dfc718d014610200578063f2fde38b1461022b57600080fd5b8063040c8c7a146100b95780630a144391146101145780631206510614610147578063466cc53e1461015a57806347b64eb01461016d578063715018a614610182575b600080fd5b6101016100c7366004610c2c565b8151602081840181018051600182529282019482019490942091909352815180830184018051928152908401929093019190912091525481565b6040519081526020015b60405180910390f35b610137610122366004610a56565b60056020526000908152604090205460ff1681565b604051901515815260200161010b565b610137610155366004610aea565b61023e565b610137610168366004610b81565b6103d3565b61018061017b366004610a56565b610559565b005b6101806105e0565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161010b565b6101016101bd366004610bef565b805160208183018101805160038252928201919093012091525481565b6101376101e8366004610a78565b610646565b600454610197906001600160a01b031681565b61010161020e366004610bef565b805160208183018101805160028252928201919093012091525481565b610180610239366004610a56565b61080c565b60008061024d888888336108d7565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052909150600090600190605c0160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018890526080810187905260a0016020604051602081039080840390855afa1580156102e7573d6000803e3d6000fd5b5050604051601f1901516004549092506001600160a01b0380841691161490506103685760405162461bcd60e51b815260206004820152602760248201527f5349474e4552204d5553542042452053455256455220696e206d6574614461746044820152666156657269667960c81b60648201526084015b60405180910390fd5b6001876040516103789190610ccb565b9081526020016040518091039020886040516103949190610ccb565b90815260405190819003602001902080549060006103b183610d78565b90915550506004546001600160a01b0390811691161498975050505050505050565b6000806002876040516103e69190610ccb565b90815260200160405180910390205486896103fe3390565b308b60405160200161041596959493929190610d24565b604051602081830303815290604052805190602001209050600060018260405160200161046e91907f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b60408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018890526080810187905260a0016020604051602081039080840390855afa1580156104cc573d6000803e3d6000fd5b5050604051601f1901516004549092506001600160a01b0380841691161490506105495760405162461bcd60e51b815260206004820152602860248201527f5349474e4552204d5553542042452053455256455220696e207468726573686f6044820152676c6456657269667960c01b606482015260840161035f565b6002886040516103949190610ccb565b3360009081526005602052604090205460ff166105ab5760405162461bcd60e51b815260206004820152601060248201526f1b5d5cdd08189948185c1c1c9bdd995960821b604482015260640161035f565b6001600160a01b0381166105be57600080fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461063a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161035f565b610644600061094c565b565b6000806003866040516106599190610ccb565b908152602001604051809103902054876106703390565b3089604051602001610686959493929190610cd7565b60405160208183030381529060405280519060200120905060006001826040516020016106df91907f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b60408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018890526080810187905260a0016020604051602081039080840390855afa15801561073d573d6000803e3d6000fd5b5050604051601f1901516004549092506001600160a01b0380841691161490506107be5760405162461bcd60e51b815260206004820152602c60248201527f5349474e4552204d5553542042452053455256455220696e206465706c6f794460448201526b69616d6f6e6456657269667960a01b606482015260840161035f565b6003876040516107ce9190610ccb565b90815260405190819003602001902080549060006107eb83610d78565b90915550506004546001600160a01b03908116911614979650505050505050565b6000546001600160a01b031633146108665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161035f565b6001600160a01b0381166108cb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161035f565b6108d48161094c565b50565b60006001836040516108e99190610ccb565b9081526020016040518091039020846040516109059190610ccb565b9081526020016040518091039020548583308760405160200161092c959493929190610cd7565b604051602081830303815290604052805190602001209050949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146109b357600080fd5b919050565b600082601f8301126109c957600080fd5b813567ffffffffffffffff808211156109e4576109e4610da1565b604051601f8301601f19908116603f01168101908282118183101715610a0c57610a0c610da1565b81604052838152866020858801011115610a2557600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff811681146109b357600080fd5b600060208284031215610a6857600080fd5b610a718261099c565b9392505050565b600080600080600060a08688031215610a9057600080fd5b610a998661099c565b9450602086013567ffffffffffffffff811115610ab557600080fd5b610ac1888289016109b8565b9450506040860135925060608601359150610ade60808701610a45565b90509295509295909350565b60008060008060008060c08789031215610b0357600080fd5b610b0c8761099c565b9550602087013567ffffffffffffffff80821115610b2957600080fd5b610b358a838b016109b8565b96506040890135915080821115610b4b57600080fd5b50610b5889828a016109b8565b9450506060870135925060808701359150610b7560a08801610a45565b90509295509295509295565b60008060008060008060c08789031215610b9a57600080fd5b610ba38761099c565b9550602087013567ffffffffffffffff811115610bbf57600080fd5b610bcb89828a016109b8565b955050604087013593506060870135925060808701359150610b7560a08801610a45565b600060208284031215610c0157600080fd5b813567ffffffffffffffff811115610c1857600080fd5b610c24848285016109b8565b949350505050565b60008060408385031215610c3f57600080fd5b823567ffffffffffffffff80821115610c5757600080fd5b610c63868387016109b8565b93506020850135915080821115610c7957600080fd5b50610c86858286016109b8565b9150509250929050565b6000815160005b81811015610cb15760208185018101518683015201610c97565b81811115610cc0576000828601525b509290920192915050565b6000610a718284610c90565b85815260006bffffffffffffffffffffffff19808760601b166020840152808660601b166034840152808560601b16604884015250610d19605c830184610c90565b979650505050505050565b86815285602082015260006bffffffffffffffffffffffff19808760601b166040840152808660601b166054840152808560601b16606884015250610d6c607c830184610c90565b98975050505050505050565b6000600019821415610d9a57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220edcb7dd9ec1e69e90210817d67d3123711ead3873b40dcc252a28320c6f789f364736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 273,
        "contract": "contracts/Verify.sol:Verify",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11999,
        "contract": "contracts/Verify.sol:Verify",
        "label": "noncesParentIdChildId",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_string_memory_ptr,t_uint256))"
      },
      {
        "astId": 12003,
        "contract": "contracts/Verify.sol:Verify",
        "label": "thresholdNoncesById",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 12007,
        "contract": "contracts/Verify.sol:Verify",
        "label": "deployNoncesById",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 12009,
        "contract": "contracts/Verify.sol:Verify",
        "label": "serverAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 12013,
        "contract": "contracts/Verify.sol:Verify",
        "label": "approvers",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_string_memory_ptr,t_uint256))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(string => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0x18047D7595C1B62ccAf8c78ba46f15470Feb5968",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_serverAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_approvers",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_senderAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_projectId",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "name": "deployDiamondVerify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "deployNoncesById",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_senderAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_objectId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_parentId",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "name": "metaDataVerify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "noncesParentIdChildId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "serverAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "setServerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "thresholdNoncesById",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_senderAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_objectId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "votesNeeded",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "name": "thresholdVerify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x06db27aebc212c120ff2cf032155795bca9ab1ab65f0090922fe835519ba8fe7",
  "receipt": {
    "to": null,
    "from": "0x7E13623dd5D070967c8568066bE81a3E5bF75226",
    "contractAddress": "0x18047D7595C1B62ccAf8c78ba46f15470Feb5968",
    "transactionIndex": 29,
    "gasUsed": "1055759",
    "logsBloom": "0x
    "blockHash": "0x3c1c63ef72cd61a78f83d2fa092dba8fb0f30fe2645265fde5410313349f8e48",
    "transactionHash": "0x06db27aebc212c120ff2cf032155795bca9ab1ab65f0090922fe835519ba8fe7",
    "logs": [
      {
        "transactionIndex": 29,
        "blockNumber": 10422942,
        "transactionHash": "0x06db27aebc212c120ff2cf032155795bca9ab1ab65f0090922fe835519ba8fe7",
        "address": "0x18047D7595C1B62ccAf8c78ba46f15470Feb5968",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007e13623dd5d070967c8568066be81a3e5bf75226"
        ],
        "data": "0x",
        "logIndex": 27,
        "blockHash": "0x3c1c63ef72cd61a78f83d2fa092dba8fb0f30fe2645265fde5410313349f8e48"
      }
    ],
    "blockNumber": 10422942,
    "cumulativeGasUsed": "19462564",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5eF593FF381b7d36028c795B51e138428d009C20",
    [
      "0x7E13623dd5D070967c8568066bE81a3E5bF75226",
      "0xA072f8Bd3847E21C8EdaAf38D7425631a2A63631",
      "0x2c0B08C414A8EE088596832cf64eFcA283D46703",
      "0x16eBE01dCae1338f8d1802C63712C5279e768d29",
      "0x3E31155a1c17c9F85e74828447aec412090a4622",
      "0x4678854dB7421fF1B3C5ACAe6c5C11e73f4F5702",
      "0xDAFf97a69408Cdb4AeFE331eA029a55e189ef60b",
      "0xD39C3Cdb811f6544067ECFeDEf40855578cA0C52"
    ]
  ],
  "numDeployments": 5,
  "solcInputHash": "8136b7b6a24bf1a08e09e7321ed67d51",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_serverAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_approvers\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_senderAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_projectId\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"deployDiamondVerify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"deployNoncesById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_senderAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_objectId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_parentId\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"metaDataVerify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"noncesParentIdChildId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serverAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setServerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"thresholdNoncesById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_senderAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_objectId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"votesNeeded\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"thresholdVerify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Verify.sol\":\"Verify\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Verify.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n//import '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\n\\ncontract Verify is Ownable {\\n    //using ECDSA for bytes32;\\n\\n    mapping(string => mapping(string => uint256)) public noncesParentIdChildId; //nonce for each parentId and childid (e.g. projectId and  courseId or CourseId and questId)\\n    mapping(string => uint256) public thresholdNoncesById; //nonce for each parentId Threshold (e.g. projectId for course and Course Id for quest)\\n    mapping(string => uint256) public deployNoncesById; //nonce for each projectId deploy of a diamond\\n    address public serverAddress;\\n    mapping(address => bool) public approvers;\\n\\n    constructor(address _serverAddress, address[] memory _approvers) {\\n        require(_serverAddress != address(0));\\n        serverAddress = _serverAddress;\\n        for (uint256 i = 0; i < _approvers.length; i++) {\\n            approvers[_approvers[i]] = true;\\n        }\\n    }\\n\\n    function getHash(\\n        address _senderAddress,\\n        string memory _objectId,\\n        string memory _parentId,\\n        address _contractAddress\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    noncesParentIdChildId[_parentId][_objectId],\\n                    _senderAddress,\\n                    _contractAddress,\\n                    address(this),\\n                    _objectId\\n                )\\n            );\\n    }\\n\\n    function metaDataVerify(\\n        address _senderAddress,\\n        string memory _objectId,\\n        string memory _parentId,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) public returns (bool) {\\n        bytes32 hashRecover = getHash(\\n            _senderAddress,\\n            _objectId,\\n            _parentId,\\n            _msgSender()\\n        );\\n        address signer = ecrecover(\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    hashRecover\\n                )\\n            ),\\n            v,\\n            r,\\n            s\\n        );\\n        require(\\n            signer == serverAddress,\\n            \\\"metaDataVerify SIGNER MUST BE SERVER\\\"\\n        );\\n        noncesParentIdChildId[_parentId][_objectId]++;\\n        return signer == serverAddress;\\n    }\\n\\n    function thresholdVerify(\\n        address _senderAddress,\\n        string memory _objectId,\\n        uint256 votesNeeded,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) public returns (bool) {\\n        bytes32 hashRecover = keccak256(\\n            abi.encodePacked(\\n                thresholdNoncesById[_objectId],\\n                votesNeeded,\\n                _senderAddress,\\n                _msgSender(),\\n                address(this),\\n                _objectId\\n            )\\n        );\\n        address signer = ecrecover(\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    hashRecover\\n                )\\n            ),\\n            v,\\n            r,\\n            s\\n        );\\n        require(\\n            signer == serverAddress,\\n            \\\"thresholdVerify SIGNER MUST BE SERVER\\\"\\n        );\\n        thresholdNoncesById[_objectId]++;\\n        return signer == serverAddress;\\n    }\\n\\n    function deployDiamondVerify(\\n        address _senderAddress,\\n        string memory _projectId,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) public returns (bool) {\\n        bytes32 hashRecover = keccak256(\\n            abi.encodePacked(\\n                deployNoncesById[_projectId],\\n                _senderAddress,\\n                _msgSender(),\\n                address(this),\\n                _projectId\\n            )\\n        );\\n        address signer = ecrecover(\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    hashRecover\\n                )\\n            ),\\n            v,\\n            r,\\n            s\\n        );\\n        require(signer == serverAddress, \\\"SIGNER MUST BE SERVER\\\");\\n        deployNoncesById[_projectId]++;\\n        return signer == serverAddress;\\n    }\\n\\n    function setServerAddress(address _newAddress) public {\\n        require(approvers[_msgSender()], \\\"must be approved\\\");\\n        require(_newAddress != address(0));\\n        serverAddress = _newAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x3f36b98a97bdf65ffebd7b3531fe0baddf684a7635eafbd557cb47aa76a52f90\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80638da5cb5b116100715780638da5cb5b1461018a578063beda9199146101af578063c6e4e81f146101da578063db420fe3146101ed578063dfc718d014610200578063f2fde38b1461022b57600080fd5b8063040c8c7a146100b95780630a144391146101145780631206510614610147578063466cc53e1461015a57806347b64eb01461016d578063715018a614610182575b600080fd5b6101016100c7366004610c08565b8151602081840181018051600182529282019482019490942091909352815180830184018051928152908401929093019190912091525481565b6040519081526020015b60405180910390f35b610137610122366004610a32565b60056020526000908152604090205460ff1681565b604051901515815260200161010b565b610137610155366004610ac6565b61023e565b610137610168366004610b5d565b6103cf565b61018061017b366004610a32565b610552565b005b6101806105d9565b6000546001600160a01b03165b6040516001600160a01b03909116815260200161010b565b6101016101bd366004610bcb565b805160208183018101805160038252928201919093012091525481565b6101376101e8366004610a54565b61063f565b600454610197906001600160a01b031681565b61010161020e366004610bcb565b805160208183018101805160028252928201919093012091525481565b610180610239366004610a32565b6107e8565b60008061024d888888336108b3565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052909150600090600190605c0160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018890526080810187905260a0016020604051602081039080840390855afa1580156102e7573d6000803e3d6000fd5b5050604051601f1901516004549092506001600160a01b0380841691161490506103645760405162461bcd60e51b8152602060048201526024808201527f6d65746144617461566572696679205349474e4552204d555354204245205345604482015263292b22a960e11b60648201526084015b60405180910390fd5b6001876040516103749190610ca7565b9081526020016040518091039020886040516103909190610ca7565b90815260405190819003602001902080549060006103ad83610d54565b90915550506004546001600160a01b0390811691161498975050505050505050565b6000806002876040516103e29190610ca7565b90815260200160405180910390205486896103fa3390565b308b60405160200161041196959493929190610d00565b604051602081830303815290604052805190602001209050600060018260405160200161046a91907f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b60408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018890526080810187905260a0016020604051602081039080840390855afa1580156104c8573d6000803e3d6000fd5b5050604051601f1901516004549092506001600160a01b0380841691161490506105425760405162461bcd60e51b815260206004820152602560248201527f7468726573686f6c64566572696679205349474e4552204d555354204245205360448201526422a92b22a960d91b606482015260840161035b565b6002886040516103909190610ca7565b3360009081526005602052604090205460ff166105a45760405162461bcd60e51b815260206004820152601060248201526f1b5d5cdd08189948185c1c1c9bdd995960821b604482015260640161035b565b6001600160a01b0381166105b757600080fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146106335760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161035b565b61063d6000610928565b565b6000806003866040516106529190610ca7565b908152602001604051809103902054876106693390565b308960405160200161067f959493929190610cb3565b60405160208183030381529060405280519060200120905060006001826040516020016106d891907f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b60408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018890526080810187905260a0016020604051602081039080840390855afa158015610736573d6000803e3d6000fd5b5050604051601f1901516004549092506001600160a01b03808416911614905061079a5760405162461bcd60e51b815260206004820152601560248201527429a4a3a722a91026aaa9aa1021229029a2a92b22a960591b604482015260640161035b565b6003876040516107aa9190610ca7565b90815260405190819003602001902080549060006107c783610d54565b90915550506004546001600160a01b03908116911614979650505050505050565b6000546001600160a01b031633146108425760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161035b565b6001600160a01b0381166108a75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161035b565b6108b081610928565b50565b60006001836040516108c59190610ca7565b9081526020016040518091039020846040516108e19190610ca7565b90815260200160405180910390205485833087604051602001610908959493929190610cb3565b604051602081830303815290604052805190602001209050949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461098f57600080fd5b919050565b600082601f8301126109a557600080fd5b813567ffffffffffffffff808211156109c0576109c0610d7d565b604051601f8301601f19908116603f011681019082821181831017156109e8576109e8610d7d565b81604052838152866020858801011115610a0157600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff8116811461098f57600080fd5b600060208284031215610a4457600080fd5b610a4d82610978565b9392505050565b600080600080600060a08688031215610a6c57600080fd5b610a7586610978565b9450602086013567ffffffffffffffff811115610a9157600080fd5b610a9d88828901610994565b9450506040860135925060608601359150610aba60808701610a21565b90509295509295909350565b60008060008060008060c08789031215610adf57600080fd5b610ae887610978565b9550602087013567ffffffffffffffff80821115610b0557600080fd5b610b118a838b01610994565b96506040890135915080821115610b2757600080fd5b50610b3489828a01610994565b9450506060870135925060808701359150610b5160a08801610a21565b90509295509295509295565b60008060008060008060c08789031215610b7657600080fd5b610b7f87610978565b9550602087013567ffffffffffffffff811115610b9b57600080fd5b610ba789828a01610994565b955050604087013593506060870135925060808701359150610b5160a08801610a21565b600060208284031215610bdd57600080fd5b813567ffffffffffffffff811115610bf457600080fd5b610c0084828501610994565b949350505050565b60008060408385031215610c1b57600080fd5b823567ffffffffffffffff80821115610c3357600080fd5b610c3f86838701610994565b93506020850135915080821115610c5557600080fd5b50610c6285828601610994565b9150509250929050565b6000815160005b81811015610c8d5760208185018101518683015201610c73565b81811115610c9c576000828601525b509290920192915050565b6000610a4d8284610c6c565b85815260006bffffffffffffffffffffffff19808760601b166020840152808660601b166034840152808560601b16604884015250610cf5605c830184610c6c565b979650505050505050565b86815285602082015260006bffffffffffffffffffffffff19808760601b166040840152808660601b166054840152808560601b16606884015250610d48607c830184610c6c565b98975050505050505050565b6000600019821415610d7657634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea26469706673582212201132b7b53f88d222fb39e9fc820c6d035d23516857b24c4ec31004cad2f8ee1964736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 273,
        "contract": "contracts/Verify.sol:Verify",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11146,
        "contract": "contracts/Verify.sol:Verify",
        "label": "noncesParentIdChildId",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_string_memory_ptr,t_uint256))"
      },
      {
        "astId": 11150,
        "contract": "contracts/Verify.sol:Verify",
        "label": "thresholdNoncesById",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 11154,
        "contract": "contracts/Verify.sol:Verify",
        "label": "deployNoncesById",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 11156,
        "contract": "contracts/Verify.sol:Verify",
        "label": "serverAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 11160,
        "contract": "contracts/Verify.sol:Verify",
        "label": "approvers",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_string_memory_ptr,t_uint256))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(string => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
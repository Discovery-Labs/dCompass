{
  "language": "Solidity",
  "sources": {
    "contracts/AdventurerBadgeFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @title dCompassBadgeNFT\r\n * @dev NFTs for creating badges\r\n*/\r\n\r\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\r\nimport \"./interfaces/IAdventurerBadgeFactory.sol\";\r\nimport \"./interfaces/IAdventurerNFT.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract AdventurerBadgeFactory is IAdventurerBadgeFactory, Ownable {\r\n    address public dCompERC721TokenImplementation;\r\n    address public projectNFTAddress;\r\n    address public pathwayNFTAddress;\r\n    address public badgeNFTAddress;\r\n    address public appDiamond;\r\n    enum ObjectType{Pathway, Badge}\r\n\r\n    \r\n    //string objectId =>  ObjectType\r\n    mapping (string => ObjectType) public getType;\r\n    mapping (uint => string) public typeStrings;\r\n    mapping (string => string) public parentIdPerObjectId;\r\n    mapping (string => address) public getNFTAddrs;\r\n    mapping (address => mapping (uint => string)) public userBadgesByIndex;//get user badge per quest/pathwayId with known index\r\n    mapping (address => uint) public userBadgeNumber;//get number of user badges \r\n\r\n    address[] internal allAddrs;\r\n\r\n    constructor(\r\n        address _dCompERC721TokenImplementation,\r\n        address _projectNFTAddress,\r\n        address _pathwayNFTAddress,\r\n        address _badgeNFTAddress,\r\n        address _appDiamond\r\n    ) {\r\n        dCompERC721TokenImplementation = _dCompERC721TokenImplementation;\r\n        projectNFTAddress = _projectNFTAddress;\r\n        pathwayNFTAddress = _pathwayNFTAddress;\r\n        badgeNFTAddress = _badgeNFTAddress;\r\n        appDiamond = _appDiamond;\r\n        typeStrings[0] = \"Pathway\";\r\n        typeStrings[1] = \"Badge\";\r\n    }\r\n\r\n    function allAddrsLength() external view returns (uint256) {\r\n        return allAddrs.length;\r\n    }\r\n\r\n    function getAllAddrs() external view returns (address[] memory){\r\n        return allAddrs;\r\n    }\r\n\r\n    function getAllUserBadges(address user) external view returns(string memory){\r\n        uint numBadges = userBadgeNumber[user];\r\n        require(numBadges > 0, \"no badges\");\r\n        uint index = 1;\r\n        string memory ret;\r\n        while(index <= numBadges){\r\n            ret = string(abi.encodePacked(ret, \"__\", userBadgesByIndex[user][index]));\r\n            index++;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    function setUserInfo(address user, string memory _questOrPathwayId) external {\r\n        require(msg.sender == pathwayNFTAddress || msg.sender == badgeNFTAddress, \"dCompFactory: WRONG_SENDER\");\r\n        userBadgeNumber[user]++;\r\n        userBadgesByIndex[user][userBadgeNumber[user]] = _questOrPathwayId;\r\n    }\r\n\r\n    function createNFTToken(\r\n        string memory objectId,\r\n        bool isPathway,\r\n        string memory parentId\r\n    ) external override returns (address newToken) {\r\n        require(msg.sender == pathwayNFTAddress || msg.sender == badgeNFTAddress, \"dCompFactory: WRONG_SENDER\");\r\n        require(\r\n            getNFTAddrs[objectId] ==\r\n                address(0),\r\n            \"dCompFactory: TOKEN_EXISTS\"\r\n        );\r\n        \r\n        bytes32 salt =\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    objectId,\r\n                    isPathway,\r\n                    parentId\r\n                )\r\n            );\r\n        if(isPathway){\r\n            getType[objectId] = ObjectType.Pathway;\r\n        }\r\n        else{\r\n            getType[objectId] = ObjectType.Badge;\r\n        }\r\n        newToken = Clones.cloneDeterministic(dCompERC721TokenImplementation, salt);\r\n        IAdventurerNFT(newToken).initialize(\r\n            objectId,\r\n            isPathway,\r\n            parentId\r\n        );\r\n        \r\n        getNFTAddrs[objectId] = newToken;\r\n        allAddrs.push(newToken);\r\n    }\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "contracts/interfaces/IAdventurerBadgeFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\ninterface IAdventurerBadgeFactory {\r\n    \r\n    function createNFTToken(\r\n        string memory objectId,\r\n        bool isPathway,\r\n        string memory parentId\r\n    ) external returns (address newToken);\r\n\r\n}\r\n"
    },
    "contracts/interfaces/IAdventurerNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\ninterface IAdventurerNFT {\r\n    /**\r\n     * @notice Function to initialize a new token\r\n     * @dev Uses factory design pattern to create clones of base implementation\r\n     * @param objectId The current objectId\r\n     * @param isPathway is this pathway or badge/quest\r\n     * @param parentId The parentId (pathwayId for badge and projectId for pathway)\r\n     **/\r\n    function initialize(\r\n        string memory objectId,\r\n        bool isPathway,\r\n        string memory parentId\r\n    ) external;\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/ProjectNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @title dCompassProjectNFT\r\n * @dev NFTs for creating project\r\n*/\r\n\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract ProjectNFT is ERC721URIStorage, Ownable{\r\n    using Counters for Counters.Counter;\r\n    \r\n    Counters.Counter private _tokenIds;\r\n    Counters.Counter private _multiSigRequest;\r\n    \r\n    //uint public stakeAmount = 0.001 ether;\r\n    mapping (address => bool) public reviewers;\r\n    uint128 public multiSigThreshold; //gives minimum multisig percentage (30 = 30% )\r\n    uint128 public numReviewers;//number of Reviewers. Needed for threshold calculation\r\n    address payable public appWallet;//sign in a script and also withdraw slashed stakes\r\n    address payable appDiamond;//address of the app level diamond\r\n    address payable sponsorSFTAddr;//address of ERC-1155 that controls sponsor staking\r\n    enum ProjectStatus{ NONEXISTENT, PENDING, DENIED, APPROVED }\r\n    \r\n    mapping (string => address[]) internal contributors;\r\n    //mapping (string => address[]) internal approvedERC20Addrs;\r\n    mapping (string => address) public projectWallets;\r\n    mapping (string => uint) public stakePerProject;\r\n    mapping (string => uint) public refundPerProject;\r\n    mapping (string => uint) public sponsorLevel;\r\n    mapping (string => uint) sponsorLevels;\r\n    mapping (uint => string) public statusStrings;\r\n    mapping (string => ProjectStatus) public status;\r\n    mapping (string => uint) public votes;//tally of approved votes;\r\n    mapping (string => uint) public votesReject;//tally of rejection votes;\r\n    mapping (string => mapping(address => bool)) public reviewerVotes;//vote record of reviewers for ProjectId\r\n    //mapping (string => uint16[]) public rarities; // rarities of each image uint16 used for pakcing purposes\r\n    mapping (string => bool) public projectMinted; // tracks if mint has been done\r\n    mapping (string => uint) public projectThresholds;// threshold for the project contributors to approve courses\r\n    \r\n    event NFTProjectMinted(address indexed _to, string indexed _tokenURI, string indexed _questId);\r\n    event ReceiveCalled(address _caller, uint _value);\r\n    event ProjectApproved(string indexed _projectId);\r\n\r\n    constructor(address payable _walletAddress, address[] memory _reviewers, uint128 _initialThreshold) ERC721(\"dCompassProject\", \"DCOMPROJ\"){\r\n        require(_reviewers.length > 0, \"Must have at least 1 reviewer\");\r\n        require(_initialThreshold > 0 && _initialThreshold <=100, \"invalid threshold\");\r\n        multiSigThreshold = _initialThreshold;\r\n        appWallet = _walletAddress;\r\n        for (uint i=0; i<_reviewers.length; i++){\r\n            if(_reviewers[i]!= address(0) && !reviewers[_reviewers[i]]){\r\n                reviewers[_reviewers[i]] = true;\r\n                numReviewers++;\r\n            }\r\n        }\r\n        statusStrings[0] = \"NONEXISTENT\";\r\n        statusStrings[1] = \"PENDING\";\r\n        statusStrings[2] = \"DENIED\";\r\n        statusStrings[3] = \"APPROVED\";\r\n        sponsorLevels[\"SILVER\"] = 1;\r\n        sponsorLevels[\"GOLD\"] = 2;\r\n        sponsorLevels[\"DIAMOND\"] = 3;\r\n    } \r\n\r\n    modifier onlyReviewer(){\r\n        require(reviewers[_msgSender()], \"not a reviewer\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable {\r\n        emit ReceiveCalled(msg.sender, msg.value);\r\n    }\r\n    \r\n    function voteForApproval(address[] memory _contributors, uint _threshold, string memory _projectId) public onlyReviewer{\r\n        require(\r\n            status[_projectId] == ProjectStatus.PENDING,\r\n            \"status not pending\"\r\n        );\r\n        require(!reviewerVotes[_projectId][_msgSender()], \"already voted for this project\");\r\n        require (projectWallets[_projectId] != address(0), \"no project wallet\");\r\n        votes[_projectId]++;\r\n        reviewerVotes[_projectId][_msgSender()] = true;\r\n        if(votes[_projectId] == 1){\r\n            require(_contributors.length >0, \"empty array\");\r\n            require(_threshold > 0 && _threshold <= 100, \"invalid threshold\");\r\n            //rarities[_projectId] = _rarities;\r\n            contributors[_projectId] = _contributors;\r\n            projectThresholds[_projectId] = _threshold;\r\n            //approvedERC20Addrs[_projectId] = approvedAddrs;\r\n            if(multiSigThreshold*numReviewers/100 == 0){\r\n                status[_projectId] = ProjectStatus.APPROVED;\r\n                (bool success,) = appWallet.call{value : stakePerProject[_projectId]}(\"\");\r\n                require(success, \"transfer failed\");\r\n                emit ProjectApproved(_projectId);\r\n                //approveMint(_projectId);\r\n            }\r\n        }\r\n        else{\r\n            uint minVotes = multiSigThreshold*numReviewers/100;\r\n            if(minVotes * 100 < multiSigThreshold*numReviewers){\r\n                minVotes++;\r\n            }\r\n            if(votes[_projectId] >= minVotes){\r\n                status[_projectId] = ProjectStatus.APPROVED;\r\n                (bool success,) = appWallet.call{value : stakePerProject[_projectId]}(\"\");\r\n                require(success, \"transfer failed\");\r\n                emit ProjectApproved(_projectId);\r\n                //approveMint(_projectId);\r\n            }  \r\n        }\r\n    }\r\n\r\n    function voteForRejection(string memory _projectId) public onlyReviewer{\r\n        require(status[_projectId] == ProjectStatus.PENDING, \"project not pending\");\r\n        require(!reviewerVotes[_projectId][_msgSender()], \"already voted for this project\");\r\n        votesReject[_projectId]++;\r\n        reviewerVotes[_projectId][_msgSender()] = true;\r\n        uint minVotes = multiSigThreshold*numReviewers/100;\r\n        if(minVotes * 100 < multiSigThreshold*numReviewers){\r\n            minVotes++;\r\n        }\r\n        if(votesReject[_projectId] >= minVotes){\r\n            status[_projectId] = ProjectStatus.DENIED;\r\n            (bool success,) = payable(projectWallets[_projectId]).call{value : stakePerProject[_projectId]}(\"\");\r\n            require(success, \"transfer failed\");\r\n        }\r\n    }\r\n    \r\n    function createToken(uint32[] memory firstURIParts, uint256[] memory secondURIParts, string memory _projectId) public onlyReviewer returns(uint[] memory){\r\n        require(status[_projectId] == ProjectStatus.APPROVED, \"job not approved yet\");\r\n        require(!projectMinted[_projectId], \"already minted\");\r\n        require(firstURIParts.length == secondURIParts.length && firstURIParts.length == contributors[_projectId].length, \"incorrect arrs\");\r\n\r\n        //batch minting\r\n        uint256[] memory newItems = new uint256[](contributors[_projectId].length);\r\n        uint256 newItemId;\r\n        string memory _tokenURI;\r\n\r\n        for(uint i =0; i< contributors[_projectId].length; i++){\r\n        _tokenIds.increment();\r\n        newItemId = _tokenIds.current();\r\n        _tokenURI = string(abi.encodePacked(\"ipfs://f\",uint32tohexstr(firstURIParts[i]),uint256tohexstr(secondURIParts[i])));\r\n        \r\n        _mint(contributors[_projectId][i], newItemId);\r\n        _setTokenURI(newItemId, _tokenURI);\r\n        \r\n        emit NFTProjectMinted(contributors[_projectId][i], _tokenURI, _projectId);\r\n        }\r\n        //set the approval within app Diamond contract\r\n        (bool success, ) = appDiamond.call(abi.encodeWithSelector(bytes4(keccak256(\"setApproved(string)\")), _projectId));\r\n        require(success, \"diamond approval failed\");\r\n\r\n        //mint SFT here\r\n        (success,) = sponsorSFTAddr.call(abi.encodeWithSelector(bytes4(keccak256(\"mint(uint256,address,string)\")), sponsorLevel[_projectId], projectWallets[_projectId], _projectId));\r\n        require(success, \"sponsor mint failed\");\r\n\r\n        projectMinted[_projectId] = true;\r\n        return newItems;    \r\n    }\r\n\r\n    function addProjectWallet(string memory _projectId, address _projectWallet, string memory level) external payable{\r\n        require (projectWallets[_projectId] == address(0), \"already project wallet\");\r\n        require(status[_projectId] == ProjectStatus.NONEXISTENT);\r\n        uint pendingSponsorLevel = sponsorLevels[level];\r\n        require (pendingSponsorLevel > 0, \"invalid sponsor stake\");\r\n        (bool success, bytes memory data) = sponsorSFTAddr.call(abi.encodeWithSelector(bytes4(keccak256(\"stakeAmounts(uint256)\")), pendingSponsorLevel));\r\n        require(success);\r\n        uint stakeAmount = abi.decode(data, (uint256)); \r\n        require (msg.value >= stakeAmount, \"not enough staked\");\r\n        /*(success, data) = sponsorSFTAddr.call(abi.encodeWithSelector(bytes4(keccak256(\"isAddrOwner(address)\")), _projectWallet));\r\n        require(success);\r\n        bool isActive = abi.decode(data, (bool));\r\n        require(!isActive, \"address already linked with active project\");*/\r\n        projectWallets[_projectId] = _projectWallet;\r\n        stakePerProject[_projectId] = stakeAmount;\r\n        sponsorLevel[_projectId] = pendingSponsorLevel;\r\n        status[_projectId]= ProjectStatus.PENDING;\r\n        if(msg.value > stakeAmount){\r\n            (success, ) = payable(_msgSender()).call{value : msg.value - stakeAmount}(\"\");\r\n            require(success, \"failed refund\");\r\n        }\r\n    }\r\n\r\n    function changeProjectWallet(string memory _projectId, address newAddr) external {\r\n        require(_msgSender() == sponsorSFTAddr, \"ProjectNFT: wrong caller\");\r\n        require (projectWallets[_projectId] != address(0), \"no project wallet\");\r\n        projectWallets[_projectId] = newAddr;\r\n    }\r\n\r\n    function projectRefund(string memory _projectId) external payable{\r\n        require(status[_projectId] == ProjectStatus.PENDING || status[_projectId] == ProjectStatus.APPROVED, \"incorrect status\");\r\n        require(_msgSender() == appWallet, \"wrong sender\");//multiSig Wallet of app\r\n        refundPerProject[_projectId] += msg.value;\r\n    }\r\n\r\n    function updateSponsorLevel(string memory _projectId, string memory newLevel) external payable {\r\n        require(status[_projectId] == ProjectStatus.PENDING || status[_projectId] == ProjectStatus.APPROVED, \"incorrect status\");\r\n        require(_msgSender() == projectWallets[_projectId], \"wrong sender\");\r\n        uint newSponsorLevel = sponsorLevels[newLevel];\r\n        require (newSponsorLevel > 0, \"invalid level\");\r\n        (bool success, bytes memory data) = sponsorSFTAddr.call(abi.encodeWithSelector(bytes4(keccak256(\"stakeAmounts(uint256)\")), newSponsorLevel));\r\n        require(success);\r\n        uint stakeAmount = abi.decode(data, (uint256));\r\n        uint pastAmount = stakePerProject[_projectId];\r\n        uint currLevel = sponsorLevel[_projectId];\r\n        if(currLevel == newSponsorLevel){\r\n            if(status[_projectId] == ProjectStatus.PENDING){\r\n                if(stakeAmount < pastAmount){\r\n                    (success, ) = payable(_msgSender()).call{value : pastAmount - stakeAmount}(\"\");\r\n                    require(success, \"failed refund\");\r\n                    stakePerProject[_projectId] = stakeAmount;\r\n                }\r\n            }\r\n            else{\r\n                (success, ) = payable(_msgSender()).call{value : refundPerProject[_projectId]}(\"\");\r\n                require(success, \"failed refund\");\r\n                stakePerProject[_projectId] = stakeAmount;\r\n                delete refundPerProject[_projectId];\r\n                }\r\n            return;\r\n        }\r\n        if (stakeAmount <= pastAmount){\r\n            if(status[_projectId] == ProjectStatus.PENDING){\r\n                (success, ) = payable(_msgSender()).call{value : pastAmount - stakeAmount}(\"\");\r\n                require(success, \"failed refund\");\r\n                \r\n            }\r\n            else{\r\n                (success, ) = payable(_msgSender()).call{value : refundPerProject[_projectId]}(\"\");\r\n                require(success, \"failed refund\");\r\n                delete refundPerProject[_projectId];\r\n            }\r\n        }\r\n        else{\r\n            require(msg.value >= stakeAmount - pastAmount, \"insufficent funds for new level\");\r\n            if(msg.value > stakeAmount - pastAmount){\r\n            (success, ) = payable(_msgSender()).call{value : msg.value + pastAmount - stakeAmount}(\"\");\r\n            require(success, \"failed refund\");\r\n            }\r\n        }\r\n        if(projectMinted[_projectId]){\r\n            (success, data) = sponsorSFTAddr.call(abi.encodeWithSelector(bytes4(keccak256(\"updateLevel(uint256,address,string,uint256)\")), currLevel, projectWallets[_projectId], _projectId, newSponsorLevel));\r\n            require(success);\r\n        }\r\n        stakePerProject[_projectId] = stakeAmount;\r\n        sponsorLevel[_projectId] = newSponsorLevel;\r\n    }\r\n\r\n    function addReviewer(address _reviewer) public onlyReviewer {\r\n        require (!reviewers[_reviewer], \"already reviewer\");\r\n        reviewers[_reviewer]=true;\r\n        numReviewers++;\r\n    }\r\n\r\n    function setStatusString(uint index, string memory newName) external onlyReviewer{\r\n        statusStrings[index] = newName;\r\n    }\r\n\r\n    function addProjectContributor(string memory _projectId, address newContributor) external{\r\n        require(status[_projectId]!= ProjectStatus.NONEXISTENT, \"project doesn't exist\");\r\n        require(!projectMinted[_projectId], \"project already minted\");\r\n        bool isAllowed = reviewers[_msgSender()];\r\n        bool notContributor = true;\r\n        if(!isAllowed){\r\n            address[] memory currContributors = contributors[_projectId];\r\n            for(uint i=0; i<currContributors.length; i++){\r\n                if(_msgSender() == currContributors[i]){\r\n                    isAllowed = true;\r\n                }\r\n                if(newContributor == currContributors[i]){\r\n                    notContributor = false;\r\n                }\r\n            }\r\n        }\r\n        require(isAllowed, \"must be a project contributor or reviewer\");\r\n        require(notContributor, \"already a contributor on project\");\r\n        contributors[_projectId].push(newContributor);\r\n    }\r\n\r\n    function setThreshold(uint128 _newThreshold) public onlyReviewer{\r\n        require(_newThreshold > 0 && _newThreshold <=100, \"invalid threshold\");\r\n        multiSigThreshold = _newThreshold;\r\n    }\r\n    \r\n    //helpers for building URIs\r\n    function uint8tohexchar(uint8 i) internal pure returns (uint8) {\r\n        return (i > 9) ?\r\n            (i + 87) : // ascii a-f\r\n            (i + 48); // ascii 0-9\r\n    }\r\n    \r\n    function uint32tohexstr(uint32 i) internal pure returns (string memory) {\r\n            bytes memory o = new bytes(8);\r\n            uint32 mask = 0x0000000f;\r\n            uint count =8;\r\n            while (count>0){\r\n                o[count-1]=bytes1(uint8tohexchar(uint8(i & mask)));\r\n                if(count>1){\r\n                    i = i >> 4;\r\n                }\r\n                count--;\r\n            }\r\n            return string(o);\r\n        }\r\n \r\n    function uint256tohexstr(uint256 i) internal pure returns (string memory) {\r\n        bytes memory o = new bytes(64);\r\n        uint256 mask = 0x0000000000000000000000000000000f;\r\n        \r\n        uint count = 64;\r\n        while (count>0){\r\n            o[count-1]=bytes1(uint8tohexchar(uint8(i & mask)));\r\n            if(count>1){\r\n                i = i >> 4;\r\n            }\r\n            count--; \r\n        }\r\n        return string(o);\r\n    }\r\n\r\n    function getContributors(string memory _projectId) external view returns(address[] memory){\r\n        return contributors[_projectId];\r\n    }\r\n\r\n    function setAppDiamond(address payable _appDiamond) external onlyReviewer{\r\n        require(_appDiamond != address(0));\r\n        appDiamond = _appDiamond;\r\n    }\r\n\r\n    function getAppDiamond() external view returns(address){\r\n        return appDiamond;\r\n    }\r\n\r\n    function setSFTAddr(address payable _SFTAddr) external onlyReviewer{\r\n        require(_SFTAddr != address(0));\r\n        sponsorSFTAddr = _SFTAddr;\r\n    }\r\n\r\n    function getSFTAddr() external view returns(address){\r\n        return sponsorSFTAddr;\r\n    }\r\n\r\n}"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/PathwayNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @title dCompassPathwayNFT\r\n * @dev NFTs for creating pathways\r\n */\r\n\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./RandomNumberConsumer.sol\";\r\nimport \"./Verify.sol\";\r\n\r\ncontract PathwayNFT is ERC721URIStorage, ERC721Enumerable, Ownable {\r\n    using Counters for Counters.Counter;\r\n\r\n    Counters.Counter private _tokenIds;\r\n\r\n    RandomNumberConsumer vrfContract; //VRF Contract used for randomness\r\n    Verify verifyContract; //Verify contract instance\r\n    address projectNFTAddress; // address for the projectNFTs\r\n    address appDiamond;//address needed for checking valid erc20Addrs per chain\r\n    address adventureFactory;//address of the adventure factory\r\n    mapping(uint256 => string) public statusStrings;\r\n    mapping(string => bool) public pathwayMinted; // tracks if mint has been done\r\n    mapping(string => address[]) internal contributors; //contributors to this pathway\r\n    uint8[] internal rarityThresholds; //used for getting cutoffs of common, uncommon et al\r\n    mapping(string => string) public projectIdforPathway; //the projectId that is the root\r\n    mapping(string => PathwayStatus) public status;\r\n    mapping(string => uint256) public votes; //tally of approved votes per pathwayId;\r\n    mapping (string => uint) public votesReject;//tally of rejection votes per pathwayId;\r\n    mapping(string => mapping(address => bool)) public reviewerVotes; //vote record of approved voters for PathwayId\r\n    mapping (string => uint) public nativeRewards;//pathway rewards in native token\r\n    mapping (string => mapping(address => uint)) internal erc20Amounts;//pathway reward Amts in other tokens\r\n    mapping (string => bool) public nativeRefundClaimed;//pathway refund claimed\r\n    mapping (string => mapping(address => bool)) erc20RefundClaimed;//pathway erc20 refund claimed\r\n    mapping (string => uint) public numUsersRewardPerPathway;//number of users rewarded per pathway\r\n    mapping (string => uint) public currentNumUsersRewardPerPathwayNative;//current number of users already claimed native reward per pathway\r\n    mapping (string => mapping ( address => uint)) public currentNumUsersRewardPerPathwayERC20;// currentnumber of users already claimed reward per pathway per ERC20 Address\r\n    mapping (string => mapping(address => uint)) public nonces;//nonce for certain verify functions per address per projectId\r\n    mapping (string => address) public adventurerAddress;//address of adventurer NFT per pathway Id\r\n\r\n    //local adventure mappings\r\n    //_pathwayID => version => minterAddress => boolean\r\n    mapping (string => mapping(uint => mapping(address => bool))) internal mintTrackerByPathwayIdVersionMinter;\r\n    //_pathwayID => version => addresses of all minters...only used for getter when necessary\r\n    mapping (string => mapping(uint => address[])) internal allMintersPerPathwayAndVersion;\r\n    //_pathwayID => version => tokenIds of all minters...only used for getter when necessary\r\n    mapping (string => mapping(uint => uint[])) internal allTokenIdsPerPathwayAndVersion;\r\n    mapping (uint => TokenInfo) internal tokenInfoById;//will be used by getter\r\n\r\n    //pathwayId => ERC20Address => senderAddress => bool\r\n    mapping (string => mapping(address => mapping (address => bool))) userRewardedForPathwayERC20;//has user received funds for this pathway in ERC20Token Address\r\n    mapping (string => mapping(address => bool)) public userRewardedForPathwayNative;//has user received funds for this pathway in native token\r\n    uint256 public fee = 1500; //number divided by 10000 for fee. for example 100 = 1%\r\n\r\n    enum PathwayStatus {\r\n        NONEXISTENT,\r\n        PENDING,\r\n        DENIED,\r\n        APPROVED\r\n    }\r\n\r\n    struct TokenInfo{\r\n        string pathwayId;\r\n        uint version;\r\n    }\r\n\r\n    event ReceiveCalled(address _caller, uint256 _value);\r\n    event PathwayApproved(string indexed _pathwayId);\r\n    event NFTPathwayMinted(\r\n        address indexed _to,\r\n        string indexed _tokenURI,\r\n        string indexed _badgeId\r\n    );\r\n\r\n    constructor(\r\n        address _vrfAddress,\r\n        address _projectNFTAddress,\r\n        address _verifyAddress\r\n    ) ERC721(\"dCompassBadge\", \"DCOMPB\") {\r\n        vrfContract = RandomNumberConsumer(_vrfAddress);\r\n        verifyContract = Verify(_verifyAddress);\r\n        //uint rarityTotal = 0;\r\n        /*for (uint8 i =0; i<_initRarities.length; i++){\r\n            rarityTotal += _initRarities[i];\r\n        }\r\n        require(rarityTotal == 100, \"rarities do not add to 100\");\r\n        rarityThresholds = _initRarities;*/\r\n        projectNFTAddress = _projectNFTAddress;\r\n        statusStrings[0] = \"NONEXISTENT\";\r\n        statusStrings[1] = \"PENDING\";\r\n        statusStrings[2] = \"DENIED\";\r\n        statusStrings[3] = \"APPROVED\";\r\n    }\r\n\r\n    receive() external payable {\r\n        emit ReceiveCalled(msg.sender, msg.value);\r\n    }\r\n\r\n    function createPathway(\r\n        string memory _pathwayId,\r\n        string memory _projectId,\r\n        uint numUsersRewarded,\r\n        bool callRewards,\r\n        address _ERC20Address,\r\n        bool useNative,\r\n        uint amount\r\n    ) external payable {\r\n            require(status[_pathwayId] == PathwayStatus.NONEXISTENT);\r\n            status[_pathwayId] = PathwayStatus.PENDING;\r\n            projectIdforPathway[_pathwayId] = _projectId;\r\n            numUsersRewardPerPathway[_pathwayId] = numUsersRewarded;\r\n            if (callRewards){\r\n                addPathwayCreationReward(_pathwayId, _ERC20Address, useNative, amount);\r\n            }\r\n    }\r\n\r\n    function voteForApproval(\r\n        address[] memory _contributors,\r\n        string memory _pathwayId,\r\n        string memory _projectId,\r\n        bytes32[2] memory r,\r\n        bytes32[2] memory s,\r\n        uint8[2] memory v,\r\n        uint256 votesNeeded\r\n    ) public {\r\n        require(\r\n            status[_pathwayId] == PathwayStatus.PENDING,\r\n            \"status not pending\"\r\n        );\r\n        require(\r\n            !reviewerVotes[_pathwayId][_msgSender()],\r\n            \"already voted for this pathway\"\r\n        );\r\n        require(\r\n            keccak256(abi.encodePacked(projectIdforPathway[_pathwayId])) == keccak256(abi.encodePacked(_projectId)),\r\n            \"incorrect projectId\"\r\n        );\r\n        bool voteAllowed = verifyContract.metaDataVerify(\r\n            _msgSender(),\r\n            _pathwayId,\r\n            _projectId,\r\n            r[0],\r\n            s[0],\r\n            v[0]\r\n        );\r\n        require(voteAllowed, \"sender is not approved project voter\");\r\n        bool thresholdCheck = verifyContract.thresholdVerify(\r\n            _msgSender(),\r\n            _pathwayId,\r\n            votesNeeded,\r\n            r[1],\r\n            s[1],\r\n            v[1]\r\n        );\r\n        require(thresholdCheck, \"incorrect votes needed sent\");\r\n        votes[_pathwayId]++;\r\n        reviewerVotes[_pathwayId][_msgSender()] = true;\r\n        if (votes[_pathwayId] == 1) {\r\n            require(_contributors.length > 0, \"empty array\");\r\n            contributors[_pathwayId] = _contributors;\r\n            if (votesNeeded <= votes[_pathwayId]) {\r\n                status[_pathwayId] = PathwayStatus.APPROVED;\r\n                emit PathwayApproved(_pathwayId);\r\n                //vrfContract.getRandomNumber(_pathwayId, contributors[_pathwayId].length);\r\n            }\r\n        } else {\r\n            if (votes[_pathwayId] >= votesNeeded) {\r\n                status[_pathwayId] = PathwayStatus.APPROVED;\r\n                emit PathwayApproved(_pathwayId);\r\n                //vrfContract.getRandomNumber(_pathwayId, contributors[_pathwayId].length);\r\n            }\r\n        }\r\n    }\r\n\r\n    function voteForRejection(string memory _pathwayId, string memory _projectId, bytes32[2] memory r, bytes32[2] memory s, uint8[2] memory v, uint256 votesNeeded) public {\r\n        require(status[_pathwayId] == PathwayStatus.PENDING, \"pathway not pending\");\r\n        require(!reviewerVotes[_pathwayId][_msgSender()], \"already voted for this pathway\");\r\n        require(\r\n            keccak256(abi.encodePacked(projectIdforPathway[_pathwayId])) == keccak256(abi.encodePacked(_projectId)),\r\n            \"incorrect projectId\"\r\n        );\r\n        bool voteAllowed = verifyContract.metaDataVerify(\r\n            _msgSender(),\r\n            _pathwayId,\r\n            _projectId,\r\n            r[0],\r\n            s[0],\r\n            v[0]\r\n        );\r\n        require(voteAllowed, \"sender is not approved project voter\");\r\n        bool thresholdCheck = verifyContract.thresholdVerify(\r\n            _msgSender(),\r\n            _pathwayId,\r\n            votesNeeded,\r\n            r[1],\r\n            s[1],\r\n            v[1]\r\n        );\r\n        require(thresholdCheck, \"incorrect votes needed sent\");\r\n        votesReject[_pathwayId]++;\r\n        reviewerVotes[_pathwayId][_msgSender()] = true;        \r\n        if(votesReject[_pathwayId] >= votesNeeded){\r\n            status[_pathwayId] = PathwayStatus.DENIED;\r\n            /*(bool success,) = appWallet.call{value : stakePerProject[_projectId]}(\"\");\r\n            require(success, \"transfer failed\");*/\r\n        }\r\n    }\r\n\r\n    //TODO: move these to rewards contract!\r\n    function addPathwayCreationReward(string memory _pathwayId, address _ERC20Address, bool useNative, uint amount) public payable{\r\n        require (status[_pathwayId] == PathwayStatus.PENDING, \"pathway not pending\");\r\n        require (numUsersRewardPerPathway[_pathwayId] > 0, \"no user rewards\");\r\n        (bool success , bytes memory data) = projectNFTAddress.call(abi.encodeWithSelector(bytes4(keccak256(\"appWallet()\"))));\r\n        require(success);\r\n        address appWallet = abi.decode(data, (address));\r\n        uint appPortion = (amount*fee)/10000;\r\n        if(useNative){\r\n            require(msg.value >= amount + appPortion, \"not enough sent\");\r\n            (success,) = payable(appWallet).call{value : appPortion}(\"\");\r\n            require(success);\r\n            nativeRewards[_pathwayId] += amount;\r\n            if(msg.value > amount + appPortion){\r\n                (success,) = payable(_msgSender()).call{value : msg.value - amount- appPortion}(\"\");\r\n                require(success);\r\n            }\r\n        }\r\n        else{\r\n            require(_ERC20Address != address(0));\r\n            (success, data) = appDiamond.call(abi.encodeWithSelector(bytes4(keccak256(\"checkApprovedERC20PerProjectByChain(string,uint256,address)\")), projectIdforPathway[_pathwayId],block.chainid, _ERC20Address));\r\n            require(success);\r\n            success = abi.decode(data, (bool));\r\n            require(success, \"ERC20 not approved\");\r\n            IERC20(_ERC20Address).transferFrom(_msgSender(), appWallet, appPortion);\r\n            IERC20(_ERC20Address).transferFrom(_msgSender(), address(this), amount);\r\n            erc20Amounts[_pathwayId][_ERC20Address] += amount;\r\n        }\r\n    }\r\n\r\n    function setNumberOfUsersRewarded(string memory _pathwayId, uint256 newNumber, bytes32 r, bytes32 s, uint8 v) external {\r\n        require(newNumber > numUsersRewardPerPathway[_pathwayId] - 1, \"PathwayNFT : invalid number\");\r\n        _verify(_msgSender(), _pathwayId, newNumber, r, s, v);\r\n        numUsersRewardPerPathway[_pathwayId] = newNumber;\r\n    }\r\n\r\n    function claimRejectionRefund(string memory _pathwayId, bool native, address _ERC20Address) external {\r\n        require(status[_pathwayId] == PathwayStatus.DENIED, \"incorrect pathway status\");\r\n        string memory _projectId = projectIdforPathway[_pathwayId];\r\n        (bool success, bytes memory data) = projectNFTAddress.call(abi.encodeWithSelector(bytes4(keccak256(\"projectWallets(string)\")), _projectId));\r\n        require(success);\r\n        address refundWallet = abi.decode(data, (address));\r\n        require(refundWallet != address(0));\r\n        if(native){\r\n            require(!nativeRefundClaimed[_pathwayId], \"native reward already claimed\");\r\n            (success,) = payable(refundWallet).call{value : nativeRewards[_pathwayId]}(\"\");\r\n            require(success);\r\n            nativeRefundClaimed[_pathwayId] = true;\r\n        }\r\n        else{\r\n            require(!erc20RefundClaimed[_pathwayId][_ERC20Address], \"erc20 reward already claimed\");\r\n            IERC20(_ERC20Address).transfer(refundWallet, erc20Amounts[_pathwayId][_ERC20Address]);\r\n            erc20RefundClaimed[_pathwayId][_ERC20Address] = true;\r\n        }\r\n    }\r\n\r\n    function createToken(\r\n        string memory _tokenURI,\r\n        string memory _pathwayId,\r\n        string memory _projectId,\r\n        bytes32[2] memory r,\r\n        bytes32[2] memory s,\r\n        uint8[2] memory v,\r\n        uint256 votesNeeded\r\n    ) public returns (uint256[] memory) {\r\n        require(!pathwayMinted[_pathwayId], \"already minted\");\r\n        //require(vrfContract.blockNumberResults(_pathwayId) > 0, \"no request yet\");\r\n        bool allowed = verifyContract.metaDataVerify(\r\n            _msgSender(),\r\n            _pathwayId,\r\n            _projectId,\r\n            r[0],\r\n            s[0],\r\n            v[0]\r\n        );\r\n        require(allowed, \"sender is not approved project minter\");\r\n        if (status[_pathwayId] == PathwayStatus.PENDING) {\r\n            require(votesNeeded <= votes[_pathwayId], \"not enough votes\");\r\n            allowed = verifyContract.thresholdVerify(\r\n                _msgSender(),\r\n                _pathwayId,\r\n                votesNeeded,\r\n                r[1],\r\n                s[1],\r\n                v[1]\r\n            );\r\n            require(allowed, \"incorrect votes needed sent\");\r\n            status[_pathwayId] = PathwayStatus.APPROVED;\r\n        }\r\n        require(\r\n            status[_pathwayId] == PathwayStatus.APPROVED,\r\n            \"can only mint for pathways in approved status\"\r\n        );\r\n\r\n        //TODO : this can later be made a require instead of if statement?\r\n        bytes memory data;\r\n\r\n        (allowed, data) = appDiamond.call(abi.encodeWithSelector(bytes4(keccak256(\"projectDiamondAddrs(string)\")), _projectId));\r\n        require(allowed);\r\n        address projectDiamond = abi.decode(data, (address));\r\n        if(projectDiamond != address(0)){\r\n            (allowed, data) = projectDiamond.call(abi.encodeWithSelector(bytes4(keccak256(\"addPathwayId(string)\")), _pathwayId));\r\n            require(allowed);\r\n        }\r\n\r\n        //batch minting\r\n        uint256[] memory newItems = new uint256[](\r\n            contributors[_pathwayId].length\r\n        );\r\n        uint256 newItemId;\r\n\r\n        for (uint256 i = 0; i < contributors[_pathwayId].length; i++) {\r\n            _tokenIds.increment();\r\n            newItemId = _tokenIds.current();\r\n\r\n            _mint(contributors[_pathwayId][i], newItemId);\r\n            _setTokenURI(newItemId, _tokenURI);\r\n\r\n            emit NFTPathwayMinted(\r\n                contributors[_pathwayId][i],\r\n                _tokenURI,\r\n                _pathwayId\r\n            );\r\n        }\r\n        pathwayMinted[_pathwayId] = true;\r\n        return newItems;\r\n    }\r\n\r\n    function claimPathwayRewards(string memory _pathwayId, bool native, address _ERC20Address, bytes32 r, bytes32 s, uint8 v, bool claimReward, string memory _tokenURI, uint256 version) external {\r\n        uint amount;\r\n        if(claimReward){\r\n            if(native){\r\n                require(!userRewardedForPathwayNative[_pathwayId][_msgSender()]);\r\n                require(currentNumUsersRewardPerPathwayNative[_pathwayId] < numUsersRewardPerPathway[_pathwayId]);\r\n                amount = nativeRewards[_pathwayId] / numUsersRewardPerPathway[_pathwayId];\r\n                require(amount > 0);\r\n            }\r\n            else{\r\n                require(!userRewardedForPathwayERC20[_pathwayId][_ERC20Address][_msgSender()]);\r\n                require(currentNumUsersRewardPerPathwayERC20[_pathwayId][_ERC20Address] < numUsersRewardPerPathway[_pathwayId]);\r\n                amount = erc20Amounts[_pathwayId][_ERC20Address] / numUsersRewardPerPathway[_pathwayId];\r\n                require(amount > 0);\r\n            }\r\n        }\r\n        _verify(_msgSender(), _pathwayId, version, r, s, v);\r\n        if(claimReward){\r\n            if(native){\r\n                (bool success, ) = payable(_msgSender()).call{value : amount}(\"\");\r\n                require(success);\r\n                userRewardedForPathwayNative[_pathwayId][_msgSender()] = true;\r\n                currentNumUsersRewardPerPathwayNative[_pathwayId]++;\r\n            }\r\n            else{\r\n                IERC20(_ERC20Address).transfer(_msgSender(), amount);\r\n                userRewardedForPathwayERC20[_pathwayId][_ERC20Address][_msgSender()] = true;\r\n                currentNumUsersRewardPerPathwayERC20[_pathwayId][_ERC20Address]++;\r\n            }\r\n        }\r\n        _localAdventureMint(_msgSender(), _pathwayId, _tokenURI, version);\r\n    }\r\n\r\n    function walletOfOwner(address _owner)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256 ownerTokenCount = balanceOf(_owner);\r\n        uint256[] memory tokenIds = new uint256[](ownerTokenCount);\r\n        for (uint256 i; i < ownerTokenCount; i++) {\r\n            tokenIds[i] = tokenOfOwnerByIndex(_owner, i);\r\n        }\r\n        return tokenIds;\r\n    }\r\n\r\n    function _mintAdventurerBadge(address _to, string memory _pathwayId, string memory _tokenURI) internal {\r\n      address adventurerBadgeAddress = adventurerAddress[_pathwayId];\r\n      require(adventurerBadgeAddress != address(0), \"invalid badge address\");\r\n      (bool success, bytes memory data) = adventurerBadgeAddress.call(abi.encodeWithSelector(bytes4(keccak256(\"balanceOf(address)\")), _msgSender()));\r\n      require(success);\r\n      uint256 balance = abi.decode(data, (uint256));\r\n      if(balance == 0){\r\n          (success, data) = adventurerBadgeAddress.call(abi.encodeWithSelector(bytes4(keccak256(\"mint(address,uint256,string)\")), _msgSender(), 1, _tokenURI));\r\n          require(success);\r\n          (success, data) = adventureFactory.call(abi.encodeWithSelector(bytes4(keccak256(\"setUserInfo(address,string)\")), _msgSender(), _pathwayId));\r\n          require(success);\r\n      }\r\n    }\r\n\r\n    function _localAdventureMint(address _to, string memory _pathwayId, string memory _tokenURI, uint256 version) internal {\r\n      if(mintTrackerByPathwayIdVersionMinter[_pathwayId][version][_to]){\r\n          return;\r\n      }\r\n      uint256 newItemId;\r\n      _tokenIds.increment();\r\n      newItemId = _tokenIds.current();\r\n      _mint(_msgSender(), newItemId);\r\n      _setTokenURI(newItemId, _tokenURI);\r\n      TokenInfo memory info = TokenInfo(_pathwayId, version);\r\n      tokenInfoById[newItemId] = info;\r\n      allMintersPerPathwayAndVersion[_pathwayId][version].push(_to);\r\n      allTokenIdsPerPathwayAndVersion[_pathwayId][version].push(newItemId);\r\n      mintTrackerByPathwayIdVersionMinter[_pathwayId][version][_to] = true;\r\n  }\r\n\r\n  function _createAdventurerNFT(string memory _pathwayId, string memory _projectId) internal {\r\n      (bool success , bytes memory data) = adventureFactory.call(abi.encodeWithSelector(bytes4(\r\n          keccak256(\"createNFTToken(string,bool,string)\")\r\n      ), _pathwayId, true, _projectId));\r\n      require(success);\r\n      address newTokenAddr = abi.decode(data, (address));\r\n      adventurerAddress[_pathwayId] = newTokenAddr;\r\n  }\r\n\r\n    function _verify(address from, string memory _pathwayId, uint256 payload, bytes32 r, bytes32 s, uint8 v) internal returns (bool){\r\n      bytes32 hashRecover = keccak256(\r\n            abi.encodePacked(\r\n                from,\r\n                address(this),\r\n                block.chainid,\r\n                nonces[_pathwayId][from],\r\n                payload,\r\n                _pathwayId\r\n            )\r\n        );\r\n        (bool success, bytes memory data) = appDiamond.call(abi.encodeWithSelector(bytes4(keccak256(\"appSigningAddr()\"))));\r\n        require(success);\r\n        address signer = abi.decode(data, (address));\r\n        require (signer == ecrecover(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    \"\\x19Ethereum Signed Message:\\n32\",\r\n                    hashRecover\r\n                )\r\n            ),\r\n            v,\r\n            r,\r\n            s\r\n        ), \"Incorrect signer\");\r\n        nonces[_pathwayId][from]++;\r\n        return true;\r\n  }\r\n\r\n    function getContributors(string memory _pathwayId) external view returns(address[] memory){\r\n        return contributors[_pathwayId];\r\n    }\r\n\r\n    function getAppDiamond() external view returns(address){\r\n        return appDiamond;\r\n    }\r\n\r\n    function getAllAddrsByPathwayIDVersion(string memory _pathwayId, uint256 version) external view returns (address[] memory){\r\n        return allMintersPerPathwayAndVersion[_pathwayId][version];\r\n    }\r\n\r\n    function getAllTokenIdsByPathwayIDVersion(string memory _pathwayId, uint256 version) external view returns (uint256[] memory){\r\n        return allTokenIdsPerPathwayAndVersion[_pathwayId][version];\r\n    }\r\n\r\n    function getVersionsAndPathwayIDsByAdventurer(address adventurer) external view returns (uint256[] memory versions, string memory concatPathwayIds){\r\n        uint256 numTokensOwned = balanceOf(adventurer);\r\n        string memory currString = \"\";\r\n        uint256[] memory tempVersions = new uint256[](numTokensOwned);\r\n        if(numTokensOwned ==0){\r\n            versions = tempVersions;\r\n            concatPathwayIds= currString;\r\n        }\r\n        uint index = 0;\r\n        while(index < numTokensOwned -1){\r\n            TokenInfo memory info = tokenInfoById[tokenOfOwnerByIndex(adventurer, index)];\r\n            tempVersions[index] = info.version;\r\n            currString = string(abi.encodePacked(currString, info.pathwayId, \"__\"));\r\n            index++;\r\n        }\r\n        TokenInfo memory lastInfo = tokenInfoById[tokenOfOwnerByIndex(adventurer, index)];\r\n        tempVersions[index] = lastInfo.version;\r\n        concatPathwayIds = string(abi.encodePacked(currString, lastInfo.pathwayId));\r\n        versions = tempVersions;\r\n    }\r\n\r\n    function setAppDiamond(address newAppDiamond) external onlyOwner {\r\n        appDiamond = newAppDiamond;\r\n    }\r\n\r\n    function setAdventureFactory(address newFactory) external onlyOwner {\r\n        adventureFactory = newFactory;\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal override(ERC721Enumerable, ERC721) {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n    function _burn(uint256 tokenId)\r\n        internal\r\n        override(ERC721URIStorage, ERC721)\r\n    {\r\n        super._burn(tokenId);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        override(ERC721Enumerable, ERC721)\r\n        returns (bool)\r\n    {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC721URIStorage, ERC721)\r\n        returns (string memory)\r\n    {\r\n        return super.tokenURI(tokenId);\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/RandomNumberConsumer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n\r\ncontract RandomNumberConsumer is VRFConsumerBase, Ownable {\r\n    \r\n    bytes32 internal keyHash;\r\n    uint256 internal fee;\r\n    \r\n    mapping(bytes32 => string) public objectRequests;//requestId to objectId (object is course or quest)\r\n    mapping(bytes32 => uint) public numContributors;//requestId to num of contirbutors at time of approval\r\n    mapping(string => uint8[]) internal objectRarities;//calculated rarities for course or quest\r\n    mapping(string => uint256) public blockNumberResults;//block number request was fulfilled at\r\n    mapping (string => uint256) public requestResults;\r\n    mapping (address => bool) whiteList;//approved contracts and users that can call this will eventually be multi-sig holders\r\n\r\n    event RandomNumberFulfilled(string indexed _projectId);\r\n\r\n    modifier onlyWhiteList(){\r\n        require(whiteList[_msgSender()], \"not authorized\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * Constructor inherits VRFConsumerBase\r\n     * \r\n     * Network: Kovan\r\n     * Chainlink VRF Coordinator address: 0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9\r\n     * LINK token address:                0xa36085F69e2889c224210F603D836748e7dC0088\r\n     * Key Hash: 0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4\r\n     */\r\n    constructor(address [] memory _reviewers) \r\n        VRFConsumerBase(\r\n            0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9, // VRF Coordinator\r\n            0xa36085F69e2889c224210F603D836748e7dC0088  // LINK Token\r\n        )\r\n    {\r\n        keyHash = 0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4;\r\n        fee = 0.1 * 10 ** 18; // 0.1 LINK (Varies by network)\r\n        for (uint i=0; i<_reviewers.length; i++){\r\n            if(_reviewers[i]!= address(0) && !whiteList[_reviewers[i]]){\r\n                whiteList[_reviewers[i]] = true;  \r\n            }\r\n        }\r\n    }\r\n    \r\n    /** \r\n     * Requests randomness \r\n     */\r\n    function getRandomNumber(string memory _objectId, uint _numContributors) public onlyWhiteList returns (bytes32 requestId){\r\n        require(LINK.balanceOf(address(this)) >= fee, \"Not enough LINK - fill contract with faucet\");\r\n        requestId = requestRandomness(keyHash, fee);\r\n        objectRequests[requestId] = _objectId;\r\n        numContributors[requestId] = _numContributors;\r\n        return requestId;\r\n    }\r\n\r\n    /**\r\n     * Callback function used by VRF Coordinator\r\n     */\r\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\r\n        string memory objectId = objectRequests[requestId];\r\n        requestResults[objectId] = randomness;\r\n        blockNumberResults[objectId] = block.number;\r\n        uint currentIndex = 0;\r\n        uint8[] memory rarities = new uint8[](numContributors[requestId]);\r\n\r\n        while(currentIndex < rarities.length){\r\n            rarities[currentIndex] = uint8((uint256(keccak256(abi.encode(randomness, currentIndex))) % 100) + 1);\r\n            currentIndex++;\r\n        }\r\n\r\n        objectRarities[objectId] = rarities;\r\n        emit RandomNumberFulfilled(objectId);\r\n    }\r\n    \r\n    function addContractToWhiteList(address _newWhiteList) public onlyWhiteList{\r\n        require(!whiteList[_newWhiteList], \"already approved\");\r\n        whiteList[_newWhiteList] = true;\r\n    }\r\n    \r\n    function getObjectRarities(string memory _objectId) public view returns(uint8[] memory){\r\n        return objectRarities[_objectId];\r\n    }\r\n\r\n    // function withdrawLink() external {} - Implement a withdraw function to avoid locking your LINK in the contract\r\n}"
    },
    "contracts/Verify.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n//import '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\r\n\r\ncontract Verify is Ownable {\r\n    //using ECDSA for bytes32;\r\n\r\n    mapping(string => mapping(string => uint256)) public noncesParentIdChildId; //nonce for each parentId and childId (e.g. projectId and  courseId or CourseId and questId)\r\n    mapping(string => uint256) public thresholdNoncesById; //nonce for each parentId Threshold (e.g. projectId for course and Course Id for quest)\r\n    mapping(string => uint256) public deployNoncesById; //nonce for each projectId deploy of a diamond\r\n    address public serverAddress;\r\n    mapping(address => bool) public approvers;\r\n\r\n    constructor(address _serverAddress, address[] memory _approvers) {\r\n        require(_serverAddress != address(0));\r\n        serverAddress = _serverAddress;\r\n        for (uint256 i = 0; i < _approvers.length; i++) {\r\n            approvers[_approvers[i]] = true;\r\n        }\r\n    }\r\n\r\n    function getHash(\r\n        address _senderAddress,\r\n        string memory _objectId,\r\n        string memory _parentId,\r\n        address _contractAddress\r\n    ) internal view returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    noncesParentIdChildId[_parentId][_objectId],\r\n                    _senderAddress,\r\n                    _contractAddress,\r\n                    address(this),\r\n                    _objectId\r\n                )\r\n            );\r\n    }\r\n\r\n    function metaDataVerify(\r\n        address _senderAddress,\r\n        string memory _objectId,\r\n        string memory _parentId,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint8 v\r\n    ) public returns (bool) {\r\n        bytes32 hashRecover = getHash(\r\n            _senderAddress,\r\n            _objectId,\r\n            _parentId,\r\n            _msgSender()\r\n        );\r\n        address signer = ecrecover(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    \"\\x19Ethereum Signed Message:\\n32\",\r\n                    hashRecover\r\n                )\r\n            ),\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n        require(\r\n            signer == serverAddress,\r\n            \"SIGNER MUST BE SERVER in metaDataVerify\"\r\n        );\r\n        noncesParentIdChildId[_parentId][_objectId]++;\r\n        return signer == serverAddress;\r\n    }\r\n\r\n    function thresholdVerify(\r\n        address _senderAddress,\r\n        string memory _objectId,\r\n        uint256 votesNeeded,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint8 v\r\n    ) public returns (bool) {\r\n        bytes32 hashRecover = keccak256(\r\n            abi.encodePacked(\r\n                thresholdNoncesById[_objectId],\r\n                votesNeeded,\r\n                _senderAddress,\r\n                _msgSender(),\r\n                address(this),\r\n                _objectId\r\n            )\r\n        );\r\n        address signer = ecrecover(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    \"\\x19Ethereum Signed Message:\\n32\",\r\n                    hashRecover\r\n                )\r\n            ),\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n        require(\r\n            signer == serverAddress,\r\n            \"SIGNER MUST BE SERVER in thresholdVerify\"\r\n        );\r\n        thresholdNoncesById[_objectId]++;\r\n        return signer == serverAddress;\r\n    }\r\n\r\n    function deployDiamondVerify(\r\n        address _senderAddress,\r\n        string memory _projectId,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint8 v\r\n    ) public returns (bool) {\r\n        bytes32 hashRecover = keccak256(\r\n            abi.encodePacked(\r\n                deployNoncesById[_projectId],\r\n                _senderAddress,\r\n                _msgSender(),\r\n                address(this),\r\n                _projectId\r\n            )\r\n        );\r\n        address signer = ecrecover(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    \"\\x19Ethereum Signed Message:\\n32\",\r\n                    hashRecover\r\n                )\r\n            ),\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n        require(\r\n            signer == serverAddress,\r\n            \"SIGNER MUST BE SERVER in deployDiamondVerify\"\r\n        );\r\n        deployNoncesById[_projectId]++;\r\n        return signer == serverAddress;\r\n    }\r\n\r\n    function setServerAddress(address _newAddress) public {\r\n        require(approvers[_msgSender()], \"must be approved\");\r\n        require(_newAddress != address(0));\r\n        serverAddress = _newAddress;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/LinkTokenInterface.sol\";\n\nimport \"./VRFRequestIDBase.sol\";\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\n * @dev want to generate randomness from.\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomness method.\n *\n * @dev The randomness argument to fulfillRandomness is the actual random value\n * @dev generated from your seed.\n *\n * @dev The requestId argument is generated from the keyHash and the seed by\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\n * @dev requests open, you can use the requestId to track which seed is\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.)\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ. (Which is critical to making unpredictable randomness! See the\n * @dev next section.)\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\n * @dev block in which the request is made, user-provided seeds have no impact\n * @dev on its economic security properties. They are only included for API\n * @dev compatability with previous versions of this contract.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request.\n */\nabstract contract VRFConsumerBase is VRFRequestIDBase {\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomness the VRF output\n   */\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\n\n  /**\n   * @dev In order to keep backwards compatibility we have kept the user\n   * seed field around. We remove the use of it because given that the blockhash\n   * enters later, it overrides whatever randomness the used seed provides.\n   * Given that it adds no security, and can easily lead to misunderstandings,\n   * we have removed it from usage and can now provide a simpler API.\n   */\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\n\n  /**\n   * @notice requestRandomness initiates a request for VRF output given _seed\n   *\n   * @dev The fulfillRandomness method receives the output, once it's provided\n   * @dev by the Oracle, and verified by the vrfCoordinator.\n   *\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\n   * @dev the _fee must exceed the fee specified during registration of the\n   * @dev _keyHash.\n   *\n   * @dev The _seed parameter is vestigial, and is kept only for API\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\n   * @dev your own randomness, here, but it's not necessary because the VRF\n   * @dev oracle will mix the hash of the block containing your request into the\n   * @dev VRF seed it ultimately uses.\n   *\n   * @param _keyHash ID of public key against which randomness is generated\n   * @param _fee The amount of LINK to send with the request\n   *\n   * @return requestId unique ID for this request\n   *\n   * @dev The returned requestId can be used to distinguish responses to\n   * @dev concurrent requests. It is passed as the first argument to\n   * @dev fulfillRandomness.\n   */\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\n    // the hash of the block containing this request to obtain the seed/input\n    // which is finally passed to the VRF cryptographic machinery.\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\n    // nonces[_keyHash] must stay in sync with\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\n    // This provides protection against the user repeating their input seed,\n    // which would result in a predictable/duplicate output, if multiple such\n    // requests appeared in the same block.\n    nonces[_keyHash] = nonces[_keyHash] + 1;\n    return makeRequestId(_keyHash, vRFSeed);\n  }\n\n  LinkTokenInterface internal immutable LINK;\n  address private immutable vrfCoordinator;\n\n  // Nonces for each VRF key from which randomness has been requested.\n  //\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\n    private nonces;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   * @param _link address of LINK token contract\n   *\n   * @dev https://docs.chain.link/docs/link-token-contracts\n   */\n  constructor(address _vrfCoordinator, address _link) {\n    vrfCoordinator = _vrfCoordinator;\n    LINK = LinkTokenInterface(_link);\n  }\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\n    fulfillRandomness(requestId, randomness);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  ) external returns (bool success);\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool success);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract VRFRequestIDBase {\n  /**\n   * @notice returns the seed which is actually input to the VRF coordinator\n   *\n   * @dev To prevent repetition of VRF output due to repetition of the\n   * @dev user-supplied seed, that seed is combined in a hash with the\n   * @dev user-specific nonce, and the address of the consuming contract. The\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\n   * @dev the final seed, but the nonce does protect against repetition in\n   * @dev requests which are included in a single block.\n   *\n   * @param _userSeed VRF seed input provided by user\n   * @param _requester Address of the requesting contract\n   * @param _nonce User-specific nonce at the time of the request\n   */\n  function makeVRFInputSeed(\n    bytes32 _keyHash,\n    uint256 _userSeed,\n    address _requester,\n    uint256 _nonce\n  ) internal pure returns (uint256) {\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\n  }\n\n  /**\n   * @notice Returns the id for this request\n   * @param _keyHash The serviceAgreement ID to be used for this request\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\n   * @return The id for this request\n   *\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\n   * @dev contract, but the one generated by makeVRFInputSeed\n   */\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\n  }\n}\n"
    },
    "contracts/BadgeNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @title dCompassBadgeNFT\r\n * @dev NFTs for creating badges\r\n*/\r\n\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./RandomNumberConsumer.sol\";\r\nimport \"./Verify.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\ncontract BadgeNFT is ERC721URIStorage, ERC721Enumerable, Ownable{\r\n    using Counters for Counters.Counter;\r\n    \r\n    Counters.Counter private _tokenIds;\r\n\r\n    RandomNumberConsumer vrfContract;//VRF Contract used for randomness\r\n    Verify verifyContract;//Verify contract instance\r\n    address projectNFTAddress; // address for the projectNFTs\r\n    address pathwayNFTAddress; // address for the pathwayNFTs\r\n    address appDiamond;//address needed for checking valid erc20Addrs per chain\r\n    address adventureFactory;//address of the adventure factory\r\n    mapping (uint => string) public statusStrings;\r\n    mapping (string => bool) public badgeMinted; // tracks if mint has been done\r\n    mapping (string => address[]) internal contributors; //contributors to this quest\r\n    mapping (string => string) public pathwayIdforBadge;//the pathwayId that is the parent\r\n    mapping (string => BadgeStatus) public status;\r\n    mapping (string => uint) public votes;//tally of approved votes per badgeId;\r\n     mapping (string => uint) public votesReject;//tally of rejection votes per badgeId;\r\n    mapping (string => mapping(address => bool)) public reviewerVotes;//vote record of approved voters for badgeId\r\n    mapping (string => uint) public nativeRewards;//badge rewards in native token\r\n    mapping (string => mapping(address => uint)) internal erc20Amounts;//badge reward Amts in other tokens\r\n    mapping (string => bool) public nativeRefundClaimed;//badge refund claimed\r\n    mapping (string => mapping(address => bool)) erc20RefundClaimed;//pathway erc20 refund claimed\r\n    mapping (string => uint) public numUsersRewardPerBadge;//number of users rewarded per badge\r\n    mapping (string => uint) public currentNumUsersRewardPerBadgeNative;//current number of users already claimed native reward per badge\r\n    mapping (string => mapping ( address => uint)) public currentNumUsersRewardPerBadgeERC20;// current number of users already claimed reward per badge per ERC20 Address\r\n    mapping (string => mapping(address => uint)) public nonces;//nonce for certain verify functions per address per badgeId\r\n    mapping (string => address) public adventurerAddress;//address of adventurer NFT per badge Id\r\n\r\n    //local adventure mappings\r\n    //_badgeID => version => minterAddress => boolean\r\n    mapping (string => mapping(uint => mapping(address => bool))) internal mintTrackerByBadgeIdVersionMinter;\r\n    //_badgeID => version => addresses of all minters...only used for getter when necessary\r\n    mapping (string => mapping(uint => address[])) internal allMintersPerBadgeAndVersion;\r\n    //_badgeID => version => tokenIds of all minters...only used for getter when necessary\r\n    mapping (string => mapping(uint => uint[])) internal allTokenIdsPerBadgeAndVersion;\r\n    mapping (uint => TokenInfo) internal tokenInfoById;//will be used by getter\r\n\r\n    //pathwayId => ERC20Address => senderAddress => bool\r\n    mapping (string => mapping(address => mapping (address => bool))) userRewardedForBadgeERC20;//has user received funds for this badge in ERC20Token Address\r\n    mapping (string => mapping(address => bool)) public userRewardedForBadgeNative;//has user received funds for this badge in native token\r\n    uint256 public fee = 1500; //number divided by 10000 for fee. for example 100 = 1%\r\n\r\n    enum BadgeStatus{ NONEXISTENT, PENDING, DENIED, APPROVED }\r\n\r\n    struct TokenInfo{\r\n        string badgeId;\r\n        uint version;\r\n    }\r\n\r\n    event ReceiveCalled(address _caller, uint _value);\r\n    event BadgeApproved(string indexed _badgeId);\r\n    event NFTBadgeMinted(address indexed _to, string indexed _tokenURI, string indexed _badgeId);\r\n\r\n    constructor(address _vrfAddress, address _projectNFTAddress, address _pathwayNFTAddress, address _verifyAddress)ERC721(\"dCompassBadge\", \"DCOMPB\"){\r\n        vrfContract = RandomNumberConsumer(_vrfAddress);\r\n        verifyContract = Verify(_verifyAddress);\r\n        projectNFTAddress = _projectNFTAddress;\r\n        pathwayNFTAddress = _pathwayNFTAddress;\r\n        statusStrings[0] = \"NONEXISTENT\";\r\n        statusStrings[1] = \"PENDING\";\r\n        statusStrings[2] = \"DENIED\";\r\n        statusStrings[3] = \"APPROVED\";\r\n    }\r\n\r\n    receive() external payable {\r\n        emit ReceiveCalled(msg.sender, msg.value);\r\n    }\r\n\r\n    function createBadge(\r\n        string memory _badgeId,\r\n        string memory _pathwayId,\r\n        uint numUsersRewarded,\r\n        bool callRewards,\r\n        address _ERC20Address,\r\n        bool useNative,\r\n        uint amount\r\n    ) external payable {\r\n            require(status[_badgeId] == BadgeStatus.NONEXISTENT);\r\n            status[_badgeId] = BadgeStatus.PENDING;\r\n            pathwayIdforBadge[_badgeId] = _pathwayId;\r\n            numUsersRewardPerBadge[_badgeId] = numUsersRewarded;\r\n            if (callRewards){\r\n                addBadgeCreationReward(_badgeId, _ERC20Address, useNative, amount);\r\n            }\r\n    }\r\n\r\n    function voteForApproval(address[] memory _contributors, string memory _badgeId, string memory _pathwayId, bytes32[2] memory r, bytes32[2] memory s, uint8[2] memory v, uint votesNeeded) public {\r\n        require(\r\n            status[_badgeId] == BadgeStatus.PENDING,\r\n            \"status not pending\"\r\n        );\r\n        require(\r\n            !reviewerVotes[_badgeId][_msgSender()],\r\n            \"already voted for this badge\"\r\n        );\r\n        require(\r\n            keccak256(abi.encodePacked(pathwayIdforBadge[_badgeId])) == keccak256(abi.encodePacked(_pathwayId)),\r\n            \"incorrect pathwayId\"\r\n        );\r\n        bool voteAllowed = verifyContract.metaDataVerify(_msgSender(), _badgeId, _pathwayId, r[0], s[0], v[0]);\r\n        require(voteAllowed, \"sender is not approved pathway voter\");\r\n        bool thresholdCheck = verifyContract.thresholdVerify(_msgSender(), _badgeId, votesNeeded, r[1], s[1], v[1]);\r\n        require(thresholdCheck, \"incorrect votes needed sent\");\r\n        votes[_badgeId]++;\r\n        reviewerVotes[_badgeId][_msgSender()] = true;\r\n        if(votes[_badgeId] == 1){\r\n            require(_contributors.length >0, \"empty array\");\r\n            contributors[_badgeId] = _contributors;\r\n            if(votesNeeded <= votes[_badgeId]){\r\n                status[_badgeId] = BadgeStatus.APPROVED;\r\n                emit BadgeApproved(_badgeId);\r\n                //vrfContract.getRandomNumber(_badgeId, contributors[_badgeId].length);\r\n            }\r\n        }\r\n        else{\r\n            if(votes[_badgeId] >= votesNeeded){\r\n                status[_badgeId] = BadgeStatus.APPROVED;\r\n                emit BadgeApproved(_badgeId);\r\n                //vrfContract.getRandomNumber(_badgeId, contributors[_badgeId].length);\r\n            }  \r\n        }\r\n    }\r\n\r\n    function voteForRejection(string memory _badgeId, string memory _pathwayId, bytes32[2] memory r, bytes32[2] memory s, uint8[2] memory v, uint256 votesNeeded) public {\r\n        require(status[_badgeId] == BadgeStatus.PENDING, \"badge not pending\");\r\n        require(!reviewerVotes[_badgeId][_msgSender()], \"already voted for this badge\");\r\n        require(\r\n            keccak256(abi.encodePacked(pathwayIdforBadge[_badgeId])) == keccak256(abi.encodePacked(_pathwayId)),\r\n            \"incorrect pathwayId\"\r\n        );\r\n        bool voteAllowed = verifyContract.metaDataVerify(\r\n            _msgSender(),\r\n            _badgeId,\r\n            _pathwayId,\r\n            r[0],\r\n            s[0],\r\n            v[0]\r\n        );\r\n        require(voteAllowed, \"sender is not approved pathway voter\");\r\n        bool thresholdCheck = verifyContract.thresholdVerify(\r\n            _msgSender(),\r\n            _badgeId,\r\n            votesNeeded,\r\n            r[1],\r\n            s[1],\r\n            v[1]\r\n        );\r\n        require(thresholdCheck, \"incorrect votes needed sent\");\r\n        votesReject[_badgeId]++;\r\n        reviewerVotes[_badgeId][_msgSender()] = true;        \r\n        if(votesReject[_badgeId] >= votesNeeded){\r\n            status[_badgeId] = BadgeStatus.DENIED;\r\n            /*(bool success,) = appWallet.call{value : stakePerProject[_projectId]}(\"\");\r\n            require(success, \"transfer failed\");*/\r\n        }\r\n    }\r\n\r\n    function addBadgeCreationReward(string memory _badgeId, address _ERC20Address, bool useNative, uint amount) public payable{\r\n        require (status[_badgeId] == BadgeStatus.PENDING || status[_badgeId] == BadgeStatus.APPROVED, \"badge not pending/approved\");\r\n        require (numUsersRewardPerBadge[_badgeId] > 0, \"no user rewards\");\r\n        (bool success , bytes memory data) = projectNFTAddress.call(abi.encodeWithSelector(bytes4(keccak256(\"appWallet()\"))));\r\n        require(success);\r\n        address appWallet = abi.decode(data, (address));\r\n        uint appPortion = (amount*fee)/10000;\r\n        if(useNative){\r\n            require(msg.value >= amount + appPortion, \"not enough sent\");\r\n            (success,) = payable(appWallet).call{value : appPortion}(\"\");\r\n            require(success);\r\n            nativeRewards[_badgeId] += amount;\r\n            if(msg.value > amount + appPortion){\r\n                (success,) = payable(_msgSender()).call{value : msg.value - amount- appPortion}(\"\");\r\n                require(success);\r\n            }\r\n        }\r\n        else{\r\n            require(_ERC20Address != address(0));\r\n            (success, data) = pathwayNFTAddress.call(abi.encodeWithSelector(bytes4(keccak256(\"projectIdforPathway(string)\")), pathwayIdforBadge[_badgeId]));\r\n            require(success);\r\n            string memory projectId = abi.decode(data, (string));\r\n            (success, data) = appDiamond.call(abi.encodeWithSelector(bytes4(keccak256(\"checkApprovedERC20PerProjectByChain(string,uint256,address)\")), projectId, block.chainid, _ERC20Address));\r\n            require(success);\r\n            success = abi.decode(data, (bool));\r\n            require(success, \"ERC20 not approved\");\r\n            IERC20(_ERC20Address).transferFrom(_msgSender(), appWallet, appPortion);\r\n            IERC20(_ERC20Address).transferFrom(_msgSender(), address(this), amount);\r\n            erc20Amounts[_badgeId][_ERC20Address] += amount;\r\n        }\r\n    }\r\n\r\n    function setNumberOfUsersRewarded(string memory _badgeId, uint256 newNumber, bytes32 r, bytes32 s, uint8 v) external {\r\n        require(newNumber > numUsersRewardPerBadge[_badgeId] - 1, \"BadgeNFT : invalid number\");\r\n        _verify(_msgSender(), _badgeId, newNumber, r, s, v);\r\n        numUsersRewardPerBadge[_badgeId] = newNumber;\r\n    }\r\n\r\n    function claimRejectionRefund(string memory _badgeId, bool native, address _ERC20Address) external {\r\n        require(status[_badgeId] == BadgeStatus.DENIED, \"incorrect badge status\");\r\n        (bool success, bytes memory data) = pathwayNFTAddress.call(abi.encodeWithSelector(bytes4(keccak256(\"projectIdforPathway(string)\")), pathwayIdforBadge[_badgeId]));\r\n        require(success);\r\n        string memory _projectId = abi.decode(data, (string));\r\n        (success, data) = projectNFTAddress.call(abi.encodeWithSelector(bytes4(keccak256(\"projectWallets(string)\")), _projectId));\r\n        require(success);\r\n        address refundWallet = abi.decode(data, (address));\r\n        require(refundWallet != address(0));\r\n        if(native){\r\n            require(!nativeRefundClaimed[_badgeId], \"native reward already claimed\");\r\n            (success,) = payable(refundWallet).call{value : nativeRewards[_badgeId]}(\"\");\r\n            require(success);\r\n            nativeRefundClaimed[_badgeId] = true;\r\n        }\r\n        else{\r\n            require(!erc20RefundClaimed[_badgeId][_ERC20Address], \"erc20 reward already claimed\");\r\n            IERC20(_ERC20Address).transfer(refundWallet, erc20Amounts[_badgeId][_ERC20Address]);\r\n            erc20RefundClaimed[_badgeId][_ERC20Address] = true;\r\n        }\r\n    }\r\n\r\n    function createToken(\r\n        string memory _tokenURI,\r\n        string memory _badgeId,\r\n        string memory _pathwayId,\r\n        bytes32[2] memory r,\r\n        bytes32[2] memory s,\r\n        uint8[2] memory v,\r\n        uint256 votesNeeded\r\n    ) public returns (uint256[] memory) {\r\n        require(!badgeMinted[_badgeId], \"already minted\");\r\n        bool allowed = verifyContract.metaDataVerify(\r\n            _msgSender(),\r\n            _badgeId,\r\n            _pathwayId,\r\n            r[0],\r\n            s[0],\r\n            v[0]\r\n        );\r\n        require(allowed, \"sender is not approved pathway minter\");\r\n        if (status[_badgeId] == BadgeStatus.PENDING) {\r\n            require(votesNeeded <= votes[_badgeId], \"not enough votes\");\r\n            allowed = verifyContract.thresholdVerify(\r\n                _msgSender(),\r\n                _badgeId,\r\n                votesNeeded,\r\n                r[1],\r\n                s[1],\r\n                v[1]\r\n            );\r\n            require(allowed, \"incorrect votes needed sent\");\r\n            status[_badgeId] = BadgeStatus.APPROVED;\r\n        }\r\n        require(\r\n            status[_badgeId] == BadgeStatus.APPROVED,\r\n            \"can only mint for badges in approved status\"\r\n        );\r\n\r\n        //TODO : this can later be made a require instead of if statement?\r\n        bytes memory data;\r\n        (allowed, data) = pathwayNFTAddress.call(abi.encodeWithSelector(bytes4(keccak256(\"projectIdforPathway(string)\")), pathwayIdforBadge[_badgeId]));\r\n        require(allowed);\r\n        string memory _projectId = abi.decode(data, (string));\r\n\r\n        (allowed, data) = appDiamond.call(abi.encodeWithSelector(bytes4(keccak256(\"projectDiamondAddrs(string)\")), _projectId));\r\n        require(allowed);\r\n        //address projectDiamond = abi.decode(data, (address));\r\n        /*if(projectDiamond != address(0)){\r\n            (allowed, data) = projectDiamond.call(abi.encodeWithSelector(bytes4(keccak256(\"addPathwayId(string)\")), _pathwayId));\r\n            require(allowed);\r\n        }*/\r\n\r\n        //batch minting\r\n        \r\n        uint256[] memory newItems = new uint256[](\r\n            contributors[_badgeId].length\r\n        );\r\n        uint256 newItemId;\r\n        \r\n        for (uint256 i = 0; i < contributors[_badgeId].length; i++) {\r\n            _tokenIds.increment();\r\n            newItemId = _tokenIds.current();\r\n\r\n            _mint(contributors[_badgeId][i], newItemId);\r\n            _setTokenURI(newItemId, _tokenURI);\r\n\r\n            emit NFTBadgeMinted(\r\n                contributors[_badgeId][i],\r\n                _tokenURI,\r\n                _pathwayId\r\n            );\r\n        }\r\n        \r\n        //_createAdventurerNFT(_badgeId, _pathwayId);\r\n\r\n        badgeMinted[_badgeId] = true;\r\n        return newItems;\r\n    }\r\n\r\n    function claimBadgeRewards(string memory _badgeId, bool native, address _ERC20Address, bytes32 r, bytes32 s, uint8 v, bool claimReward, string memory _tokenURI, uint256 version) external {\r\n        uint amount;\r\n        if(claimReward){\r\n            if(native){\r\n                require(!userRewardedForBadgeNative[_badgeId][_msgSender()]);\r\n                require(currentNumUsersRewardPerBadgeNative[_badgeId] < numUsersRewardPerBadge[_badgeId]);\r\n                amount = nativeRewards[_badgeId] / numUsersRewardPerBadge[_badgeId];\r\n                require(amount > 0);\r\n            }\r\n            else{\r\n                require(!userRewardedForBadgeERC20[_badgeId][_ERC20Address][_msgSender()]);\r\n                require(currentNumUsersRewardPerBadgeERC20[_badgeId][_ERC20Address] < numUsersRewardPerBadge[_badgeId]);\r\n                amount = erc20Amounts[_badgeId][_ERC20Address] / numUsersRewardPerBadge[_badgeId];\r\n                require(amount > 0);\r\n            }\r\n        }\r\n        _verify(_msgSender(), _badgeId, version, r, s, v);\r\n        if(claimReward){\r\n            if(native){\r\n                (bool success, ) = payable(_msgSender()).call{value : amount}(\"\");\r\n                require(success);\r\n                userRewardedForBadgeNative[_badgeId][_msgSender()] = true;\r\n                currentNumUsersRewardPerBadgeNative[_badgeId]++;\r\n            }\r\n            else{\r\n                IERC20(_ERC20Address).transfer(_msgSender(), amount);\r\n                userRewardedForBadgeERC20[_badgeId][_ERC20Address][_msgSender()] = true;\r\n                currentNumUsersRewardPerBadgeERC20[_badgeId][_ERC20Address]++;\r\n            }\r\n        }\r\n\r\n        _localAdventureMint(_msgSender(), _badgeId, _tokenURI, version);\r\n        //_mintAdventurerBadge(_msgSender(), _badgeId, _tokenURI);\r\n    }\r\n\r\n    function walletOfOwner(address _owner) public view returns (uint256[] memory)\r\n  {\r\n    uint256 ownerTokenCount = balanceOf(_owner);\r\n    uint256[] memory tokenIds = new uint256[](ownerTokenCount);\r\n    for (uint256 i; i < ownerTokenCount; i++) {\r\n      tokenIds[i] = tokenOfOwnerByIndex(_owner, i);\r\n    }\r\n    return tokenIds;\r\n  }\r\n\r\n  function _mintAdventurerBadge(address _to, string memory _badgeId, string memory _tokenURI) internal {\r\n      address adventurerBadgeAddress = adventurerAddress[_badgeId];\r\n      require(adventurerBadgeAddress != address(0), \"invalid badge address\");\r\n      (bool success, bytes memory data) = adventurerBadgeAddress.call(abi.encodeWithSelector(bytes4(keccak256(\"balanceOf(address)\")), _msgSender()));\r\n      require(success);\r\n      uint256 balance = abi.decode(data, (uint256));\r\n      if(balance == 0){\r\n          (success, data) = adventurerBadgeAddress.call(abi.encodeWithSelector(bytes4(keccak256(\"mint(address,uint256,string)\")), _msgSender(), 1, _tokenURI));\r\n          require(success);\r\n          (success, data) = adventureFactory.call(abi.encodeWithSelector(bytes4(keccak256(\"setUserInfo(address,string)\")), _msgSender(), _badgeId));\r\n          require(success);\r\n      }\r\n  }\r\n\r\n  function _localAdventureMint(address _to, string memory _badgeId, string memory _tokenURI, uint256 version) internal {\r\n      if(mintTrackerByBadgeIdVersionMinter[_badgeId][version][_to]){\r\n          return;\r\n      }\r\n      uint256 newItemId;\r\n      _tokenIds.increment();\r\n      newItemId = _tokenIds.current();\r\n      _mint(_msgSender(), newItemId);\r\n      _setTokenURI(newItemId, _tokenURI);\r\n      TokenInfo memory info = TokenInfo(_badgeId, version);\r\n      tokenInfoById[newItemId] = info;\r\n      allMintersPerBadgeAndVersion[_badgeId][version].push(_to);\r\n      allTokenIdsPerBadgeAndVersion[_badgeId][version].push(newItemId);\r\n      mintTrackerByBadgeIdVersionMinter[_badgeId][version][_to] = true;\r\n  }\r\n\r\n  function _createAdventurerNFT(string memory _badgeId, string memory _pathwayId) internal {\r\n      (bool success , bytes memory data) = adventureFactory.call(abi.encodeWithSelector(bytes4(\r\n          keccak256(\"createNFTToken(string,bool,string)\")\r\n      ), _badgeId, false, _pathwayId));\r\n      require(success);\r\n      address newTokenAddr = abi.decode(data, (address));\r\n      adventurerAddress[_badgeId] = newTokenAddr;\r\n  }\r\n\r\n  function _verify(address from, string memory _badgeId, uint256 payload, bytes32 r, bytes32 s, uint8 v) internal returns (bool){\r\n      bytes32 hashRecover = keccak256(\r\n            abi.encodePacked(\r\n                from,\r\n                address(this),\r\n                block.chainid,\r\n                nonces[_badgeId][from],\r\n                payload,\r\n                _badgeId\r\n            )\r\n        );\r\n        (bool success, bytes memory data) = appDiamond.call(abi.encodeWithSelector(bytes4(keccak256(\"appSigningAddr()\"))));\r\n        require(success);\r\n        address signer = abi.decode(data, (address));\r\n        require (signer == ecrecover(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    \"\\x19Ethereum Signed Message:\\n32\",\r\n                    hashRecover\r\n                )\r\n            ),\r\n            v,\r\n            r,\r\n            s\r\n        ), \"Incorrect signer\");\r\n        nonces[_badgeId][from]++;\r\n        return true;\r\n  }\r\n\r\n    function getContributors(string memory _badgeId) external view returns(address[] memory){\r\n        return contributors[_badgeId];\r\n    }\r\n\r\n    function getAppDiamond() external view returns(address){\r\n        return appDiamond;\r\n    }\r\n\r\n    function getAllAddrsByBadgeIDVersion(string memory _badgeId, uint256 version) external view returns (address[] memory){\r\n        return allMintersPerBadgeAndVersion[_badgeId][version];\r\n    }\r\n\r\n    function getAllTokenIdsByBadgeIDVersion(string memory _badgeId, uint256 version) external view returns (uint256[] memory){\r\n        return allTokenIdsPerBadgeAndVersion[_badgeId][version];\r\n    }\r\n\r\n    function getVersionsAndBadgeIDsByAdventurer(address adventurer) external view returns (uint256[] memory versions, string memory concatBadgeIds){\r\n        uint256 numTokensOwned = balanceOf(adventurer);\r\n        string memory currString = \"\";\r\n        uint256[] memory tempVersions = new uint256[](numTokensOwned);\r\n        if(numTokensOwned ==0){\r\n            versions = tempVersions;\r\n            concatBadgeIds= currString;\r\n        }\r\n        uint index = 0;\r\n        while(index < numTokensOwned -1){\r\n            TokenInfo memory info = tokenInfoById[tokenOfOwnerByIndex(adventurer, index)];\r\n            tempVersions[index] = info.version;\r\n            currString = string(abi.encodePacked(currString, info.badgeId, \"__\"));\r\n            index++;\r\n        }\r\n        TokenInfo memory lastInfo = tokenInfoById[tokenOfOwnerByIndex(adventurer, index)];\r\n        tempVersions[index] = lastInfo.version;\r\n        concatBadgeIds = string(abi.encodePacked(currString, lastInfo.badgeId));\r\n        versions = tempVersions;\r\n    }\r\n\r\n    function setAppDiamond(address newAppDiamond) external onlyOwner {\r\n        appDiamond = newAppDiamond;\r\n    }\r\n\r\n    function setAdventureFactory(address newFactory) external onlyOwner {\r\n        adventureFactory = newFactory;\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal override(ERC721Enumerable, ERC721) {\r\n        super._beforeTokenTransfer(from,to,tokenId);\r\n    }\r\n    \r\n    function _burn(uint256 tokenId) internal override(ERC721URIStorage, ERC721) {\r\n        super._burn(tokenId);\r\n    }\r\n    \r\n     function supportsInterface(bytes4 interfaceId) public view override(ERC721Enumerable, ERC721) returns (bool){\r\n         return super.supportsInterface(interfaceId);\r\n     }\r\n     \r\n     function tokenURI(uint256 tokenId) public view virtual override(ERC721URIStorage, ERC721) returns (string memory){\r\n         return super.tokenURI(tokenId);\r\n     }\r\n}"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/base/ERC1155BaseInternal.sol": {
      "content": "pragma solidity >=0.7.0 <0.9.0;\r\n\r\n\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\r\nimport { IERC1155Internal } from \"../interfaces/IERC1155Internal.sol\";\r\nimport { LibBadge } from \"../libraries/LibBadge.sol\";\r\n\r\n/**\r\n * @title Base ERC1155 internal functions\r\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\r\n */\r\nabstract contract ERC1155BaseInternal is IERC1155Internal{\r\n    using Address for address;\r\n\r\n    /**\r\n     * @notice query the balance of given token held by given address\r\n     * @param account address to query\r\n     * @param id token to query\r\n     * @return token balance\r\n     */\r\n    function _balanceOf(address account, uint256 id)\r\n        internal\r\n        view\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            account != address(0),\r\n            'ERC1155: balance query for the zero address'\r\n        );\r\n        return LibBadge.badgeStorage().balances[id][account];\r\n    }\r\n\r\n    /**\r\n     * @notice mint given quantity of tokens for given address\r\n     * @dev ERC1155Receiver implementation is not checked\r\n     * @param account beneficiary of minting\r\n     * @param id token ID\r\n     * @param amount quantity of tokens to mint\r\n     * @param data data payload\r\n     */\r\n    function _mint(\r\n        address account,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(account != address(0), 'ERC1155: mint to the zero address');\r\n\r\n        _beforeTokenTransfer(\r\n            msg.sender,\r\n            address(0),\r\n            account,\r\n            _asSingletonArray(id),\r\n            _asSingletonArray(amount),\r\n            data\r\n        );\r\n\r\n        mapping(address => uint256) storage balances = LibBadge\r\n            .badgeStorage()\r\n            .balances[id];\r\n        balances[account] += amount;\r\n\r\n        emit TransferSingle(msg.sender, address(0), account, id, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice mint given quantity of tokens for given address\r\n     * @param account beneficiary of minting\r\n     * @param id token ID\r\n     * @param amount quantity of tokens to mint\r\n     * @param data data payload\r\n     */\r\n    function _safeMint(\r\n        address account,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        _mint(account, id, amount, data);\r\n\r\n        _doSafeTransferAcceptanceCheck(\r\n            msg.sender,\r\n            address(0),\r\n            account,\r\n            id,\r\n            amount,\r\n            data\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice mint batch of tokens for given address\r\n     * @dev ERC1155Receiver implementation is not checked\r\n     * @param account beneficiary of minting\r\n     * @param ids list of token IDs\r\n     * @param amounts list of quantities of tokens to mint\r\n     * @param data data payload\r\n     */\r\n    function _mintBatch(\r\n        address account,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(account != address(0), 'ERC1155: mint to the zero address');\r\n        require(\r\n            ids.length == amounts.length,\r\n            'ERC1155: ids and amounts length mismatch'\r\n        );\r\n\r\n        _beforeTokenTransfer(\r\n            msg.sender,\r\n            address(0),\r\n            account,\r\n            ids,\r\n            amounts,\r\n            data\r\n        );\r\n\r\n        mapping(uint256 => mapping(address => uint256))\r\n            storage balances = LibBadge.badgeStorage().balances;\r\n\r\n        for (uint256 i; i < ids.length; ) {\r\n            balances[ids[i]][account] += amounts[i];\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n\r\n        emit TransferBatch(msg.sender, address(0), account, ids, amounts);\r\n    }\r\n\r\n    /**\r\n     * @notice mint batch of tokens for given address\r\n     * @param account beneficiary of minting\r\n     * @param ids list of token IDs\r\n     * @param amounts list of quantities of tokens to mint\r\n     * @param data data payload\r\n     */\r\n    function _safeMintBatch(\r\n        address account,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        _mintBatch(account, ids, amounts, data);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(\r\n            msg.sender,\r\n            address(0),\r\n            account,\r\n            ids,\r\n            amounts,\r\n            data\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice burn given quantity of tokens held by given address\r\n     * @param account holder of tokens to burn\r\n     * @param id token ID\r\n     * @param amount quantity of tokens to burn\r\n     */\r\n    function _burn(\r\n        address account,\r\n        uint256 id,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(account != address(0), 'ERC1155: burn from the zero address');\r\n\r\n        _beforeTokenTransfer(\r\n            msg.sender,\r\n            account,\r\n            address(0),\r\n            _asSingletonArray(id),\r\n            _asSingletonArray(amount),\r\n            ''\r\n        );\r\n\r\n        mapping(address => uint256) storage balances = LibBadge\r\n            .badgeStorage()\r\n            .balances[id];\r\n\r\n        unchecked {\r\n            require(\r\n                balances[account] >= amount,\r\n                'ERC1155: burn amount exceeds balances'\r\n            );\r\n            balances[account] -= amount;\r\n        }\r\n\r\n        emit TransferSingle(msg.sender, account, address(0), id, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice burn given batch of tokens held by given address\r\n     * @param account holder of tokens to burn\r\n     * @param ids token IDs\r\n     * @param amounts quantities of tokens to burn\r\n     */\r\n    function _burnBatch(\r\n        address account,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts\r\n    ) internal virtual {\r\n        require(account != address(0), 'ERC1155: burn from the zero address');\r\n        require(\r\n            ids.length == amounts.length,\r\n            'ERC1155: ids and amounts length mismatch'\r\n        );\r\n\r\n        _beforeTokenTransfer(msg.sender, account, address(0), ids, amounts, '');\r\n\r\n        mapping(uint256 => mapping(address => uint256))\r\n            storage balances = LibBadge.badgeStorage().balances;\r\n\r\n        unchecked {\r\n            for (uint256 i; i < ids.length; i++) {\r\n                uint256 id = ids[i];\r\n                require(\r\n                    balances[id][account] >= amounts[i],\r\n                    'ERC1155: burn amount exceeds balance'\r\n                );\r\n                balances[id][account] -= amounts[i];\r\n            }\r\n        }\r\n\r\n        emit TransferBatch(msg.sender, account, address(0), ids, amounts);\r\n    }\r\n\r\n    /**\r\n     * @notice transfer tokens between given addresses\r\n     * @dev ERC1155Receiver implementation is not checked\r\n     * @param operator executor of transfer\r\n     * @param sender sender of tokens\r\n     * @param recipient receiver of tokens\r\n     * @param id token ID\r\n     * @param amount quantity of tokens to transfer\r\n     * @param data data payload\r\n     */\r\n    function _transfer(\r\n        address operator,\r\n        address sender,\r\n        address recipient,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(\r\n            recipient != address(0),\r\n            'ERC1155: transfer to the zero address'\r\n        );\r\n\r\n        _beforeTokenTransfer(\r\n            operator,\r\n            sender,\r\n            recipient,\r\n            _asSingletonArray(id),\r\n            _asSingletonArray(amount),\r\n            data\r\n        );\r\n\r\n        mapping(uint256 => mapping(address => uint256))\r\n            storage balances = LibBadge.badgeStorage().balances;\r\n\r\n        unchecked {\r\n            uint256 senderBalance = balances[id][sender];\r\n            require(\r\n                senderBalance >= amount,\r\n                'ERC1155: insufficient balances for transfer'\r\n            );\r\n            balances[id][sender] = senderBalance - amount;\r\n        }\r\n\r\n        balances[id][recipient] += amount;\r\n\r\n        emit TransferSingle(operator, sender, recipient, id, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice transfer tokens between given addresses\r\n     * @param operator executor of transfer\r\n     * @param sender sender of tokens\r\n     * @param recipient receiver of tokens\r\n     * @param id token ID\r\n     * @param amount quantity of tokens to transfer\r\n     * @param data data payload\r\n     */\r\n    function _safeTransfer(\r\n        address operator,\r\n        address sender,\r\n        address recipient,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        _transfer(operator, sender, recipient, id, amount, data);\r\n\r\n        _doSafeTransferAcceptanceCheck(\r\n            operator,\r\n            sender,\r\n            recipient,\r\n            id,\r\n            amount,\r\n            data\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice transfer batch of tokens between given addresses\r\n     * @dev ERC1155Receiver implementation is not checked\r\n     * @param operator executor of transfer\r\n     * @param sender sender of tokens\r\n     * @param recipient receiver of tokens\r\n     * @param ids token IDs\r\n     * @param amounts quantities of tokens to transfer\r\n     * @param data data payload\r\n     */\r\n    function _transferBatch(\r\n        address operator,\r\n        address sender,\r\n        address recipient,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(\r\n            recipient != address(0),\r\n            'ERC1155: transfer to the zero address'\r\n        );\r\n        require(\r\n            ids.length == amounts.length,\r\n            'ERC1155: ids and amounts length mismatch'\r\n        );\r\n\r\n        _beforeTokenTransfer(operator, sender, recipient, ids, amounts, data);\r\n\r\n        mapping(uint256 => mapping(address => uint256))\r\n            storage balances = LibBadge.badgeStorage().balances;\r\n\r\n        for (uint256 i; i < ids.length; ) {\r\n            uint256 token = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            unchecked {\r\n                uint256 senderBalance = balances[token][sender];\r\n\r\n                require(\r\n                    senderBalance >= amount,\r\n                    'ERC1155: insufficient balances for transfer'\r\n                );\r\n\r\n                balances[token][sender] = senderBalance - amount;\r\n\r\n                i++;\r\n            }\r\n\r\n            // balance increase cannot be unchecked because ERC1155Base neither tracks nor validates a totalSupply\r\n            balances[token][recipient] += amount;\r\n        }\r\n\r\n        emit TransferBatch(operator, sender, recipient, ids, amounts);\r\n    }\r\n\r\n    /**\r\n     * @notice transfer batch of tokens between given addresses\r\n     * @param operator executor of transfer\r\n     * @param sender sender of tokens\r\n     * @param recipient receiver of tokens\r\n     * @param ids token IDs\r\n     * @param amounts quantities of tokens to transfer\r\n     * @param data data payload\r\n     */\r\n    function _safeTransferBatch(\r\n        address operator,\r\n        address sender,\r\n        address recipient,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        _transferBatch(operator, sender, recipient, ids, amounts, data);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(\r\n            operator,\r\n            sender,\r\n            recipient,\r\n            ids,\r\n            amounts,\r\n            data\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice wrap given element in array of length 1\r\n     * @param element element to wrap\r\n     * @return singleton array\r\n     */\r\n    function _asSingletonArray(uint256 element)\r\n        private\r\n        pure\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256[] memory array = new uint256[](1);\r\n        array[0] = element;\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\r\n     * @param operator executor of transfer\r\n     * @param from sender of tokens\r\n     * @param to receiver of tokens\r\n     * @param id token ID\r\n     * @param amount quantity of tokens to transfer\r\n     * @param data data payload\r\n     */\r\n    function _doSafeTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try\r\n                IERC1155Receiver(to).onERC1155Received(\r\n                    operator,\r\n                    from,\r\n                    id,\r\n                    amount,\r\n                    data\r\n                )\r\n            returns (bytes4 response) {\r\n                require(\r\n                    response == IERC1155Receiver.onERC1155Received.selector,\r\n                    'ERC1155: ERC1155Receiver rejected tokens'\r\n                );\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert('ERC1155: transfer to non ERC1155Receiver implementer');\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\r\n     * @param operator executor of transfer\r\n     * @param from sender of tokens\r\n     * @param to receiver of tokens\r\n     * @param ids token IDs\r\n     * @param amounts quantities of tokens to transfer\r\n     * @param data data payload\r\n     */\r\n    function _doSafeBatchTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try\r\n                IERC1155Receiver(to).onERC1155BatchReceived(\r\n                    operator,\r\n                    from,\r\n                    ids,\r\n                    amounts,\r\n                    data\r\n                )\r\n            returns (bytes4 response) {\r\n                require(\r\n                    response ==\r\n                        IERC1155Receiver.onERC1155BatchReceived.selector,\r\n                    'ERC1155: ERC1155Receiver rejected tokens'\r\n                );\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert('ERC1155: transfer to non ERC1155Receiver implementer');\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice ERC1155 hook, called before all transfers including mint and burn\r\n     * @dev function should be overridden and new implementation must call super\r\n     * @dev called for both single and batch transfers\r\n     * @param operator executor of transfer\r\n     * @param from sender of tokens\r\n     * @param to receiver of tokens\r\n     * @param ids token IDs\r\n     * @param amounts quantities of tokens to transfer\r\n     * @param data data payload\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {}\r\n}\r\n"
    },
    "contracts/interfaces/IERC1155Internal.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\nimport { IERC165 } from './IERC165.sol';\r\n\r\n/**\r\n * @notice Partial ERC1155 interface needed by internal functions\r\n */\r\ninterface IERC1155Internal {\r\n    event TransferSingle(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 id,\r\n        uint256 value\r\n    );\r\n\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    event ApprovalForAll(\r\n        address indexed account,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n}"
    },
    "contracts/libraries/LibBadge.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n/******************************************************************************\\\r\n* Author: Jamie Pickett\r\n/******************************************************************************/\r\n\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\n\r\nlibrary LibBadge {\r\n    using Counters for Counters.Counter;\r\n    \r\n    bytes32 constant BADGE_STORAGE_POSITION = keccak256(\"dCompass.badge.storage.standard\");\r\n\r\n    struct BadgeStorage {\r\n        address controller;\r\n        Counters.Counter tokenIds;\r\n        mapping(uint256 => mapping(address => uint256)) balances;\r\n        mapping(address => mapping(address => bool)) operatorApprovals;\r\n        \r\n    }\r\n\r\n    function badgeStorage()\r\n        internal\r\n        pure\r\n        returns (BadgeStorage storage bs)\r\n    {\r\n        bytes32 position = BADGE_STORAGE_POSITION;\r\n        assembly {\r\n            bs.slot := position\r\n        }\r\n    }\r\n\r\n    event ControlTransferred(\r\n        address indexed previousController,\r\n        address indexed newController\r\n    );\r\n\r\n    function setController(address newController) internal {\r\n        BadgeStorage storage bs = badgeStorage();\r\n        address previousController = bs.controller;\r\n        bs.controller = newController;\r\n        emit ControlTransferred(previousController, newController);\r\n    }\r\n\r\n    function enforceIsController() internal view {\r\n        BadgeStorage storage bs = badgeStorage();\r\n        require(msg.sender == bs.controller, \"LibBadge: Must be controller\");\r\n    }\r\n}"
    },
    "contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC165 {\r\n    /// @notice Query if a contract implements an interface\r\n    /// @param interfaceId The interface identifier, as specified in ERC-165\r\n    /// @dev Interface identification is specified in ERC-165. This function\r\n    ///  uses less than 30,000 gas.\r\n    /// @return `true` if the contract implements `interfaceID` and\r\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n"
    },
    "contracts/facets/BadgeFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @title dCompassBadgeFacet ERC1155 implementation\r\n * @dev NFTs for creating badges\r\n*/\r\n\r\n//import \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport { IERC1155 } from \"../interfaces/IERC1155.sol\";\r\n//import \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\r\nimport { ERC1155BaseInternal } from \"../base/ERC1155BaseInternal.sol\";\r\nimport { LibBadge } from \"../libraries/LibBadge.sol\";\r\nimport { LibDiamond } from \"../libraries/LibDiamond.sol\";\r\n\r\n\r\n\r\n\r\nabstract contract BadgeFacet is IERC1155, ERC1155BaseInternal{\r\n    \r\n    function mint(address _minter, string memory _badgeId, string memory _projectId, string memory _pathwayId, bytes32 r, bytes32 s, uint8 v) external returns(bool){\r\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\r\n        require(keccak256(abi.encodePacked(ds.projectId)) == keccak256(abi.encodePacked(_projectId)), \"ERC1155 : wrong projectId\");\r\n        require(ds.validPathways[_pathwayId], \"ERC1155 : invalid pathway for project\");\r\n        require(keccak256(abi.encodePacked(ds.questParent[_badgeId])) == keccak256(abi.encodePacked(_pathwayId)), \"ERC1155 : quest not contained in pathway\");\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IERC1155\r\n     */\r\n    function balanceOf(address account, uint256 id)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balanceOf(account, id);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IERC1155\r\n     */\r\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256[] memory)\r\n    {\r\n        require(\r\n            accounts.length == ids.length,\r\n            'ERC1155: accounts and ids length mismatch'\r\n        );\r\n\r\n        mapping(uint256 => mapping(address => uint256))\r\n            storage balances = LibBadge.badgeStorage().balances;\r\n\r\n        uint256[] memory batchBalances = new uint256[](accounts.length);\r\n\r\n        unchecked {\r\n            for (uint256 i; i < accounts.length; i++) {\r\n                require(\r\n                    accounts[i] != address(0),\r\n                    'ERC1155: batch balance query for the zero address'\r\n                );\r\n                batchBalances[i] = balances[ids[i]][accounts[i]];\r\n            }\r\n        }\r\n\r\n        return batchBalances;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IERC1155\r\n     */\r\n    function isApprovedForAll(address account, address operator)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return LibBadge.badgeStorage().operatorApprovals[account][operator];\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IERC1155\r\n     */\r\n    function setApprovalForAll(address operator, bool status) public virtual override {\r\n        require(\r\n            msg.sender != operator,\r\n            'ERC1155: setting approval status for self'\r\n        );\r\n        LibBadge.badgeStorage().operatorApprovals[msg.sender][\r\n            operator\r\n        ] = status;\r\n        emit ApprovalForAll(msg.sender, operator, status);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IERC1155\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(\r\n            from == msg.sender || isApprovedForAll(from, msg.sender),\r\n            'ERC1155: caller is not owner nor approved'\r\n        );\r\n        _safeTransfer(msg.sender, from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IERC1155\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(\r\n            from == msg.sender || isApprovedForAll(from, msg.sender),\r\n            'ERC1155: caller is not owner nor approved'\r\n        );\r\n        _safeTransferBatch(msg.sender, from, to, ids, amounts, data);\r\n    }\r\n\r\n    \r\n}"
    },
    "contracts/interfaces/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC165.sol\";\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\r\n}"
    },
    "contracts/libraries/LibDiamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n/******************************************************************************\\\r\n* Author: Jamie Pickett\r\n/******************************************************************************/\r\nimport { IDiamondCut } from \"../interfaces/IDiamondCut.sol\";\r\n\r\nlibrary LibDiamond {\r\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"dCompass.standard.diamond.storage\");\r\n\r\n    struct FacetAddressAndSelectorPosition {\r\n        address facetAddress;\r\n        uint16 selectorPosition;\r\n    }\r\n\r\n    struct DiamondStorage {\r\n        mapping(bytes4 => FacetAddressAndSelectorPosition) facetAddressAndSelectorPosition;\r\n        bytes4[] selectors;\r\n        mapping(bytes4 => bool) supportedInterfaces;\r\n        // owner of the contract\r\n        address contractOwner;\r\n        address[] contractReviewers;\r\n        address signingAddress;//project specific signing key if they control the process\r\n        address projectNFTAddr;\r\n        address pathwayNFTAddr;\r\n        string projectId;\r\n        string ceramicStream;\r\n        bool appControlApproval;//does app control approval\r\n        mapping (string => bool) validPathways;//is pathwayId in this project\r\n        mapping (string => string) questParent;//questID to pathwayID\r\n        mapping (string => uint) questTokenId;//ERC1155 tokenId associated with this quest\r\n        mapping (uint => string) tokenQuestId;//reverse of map above\r\n        mapping (string => uint[]) tokenIdsPerPathway;//all tokenIds for a pathway. useful for getter\r\n        //pathwayId => addressOfUser => addressERC20 => bool\r\n        mapping (string => mapping(address => bool)) userRewardedForPathwayERC20;//has user received funds for this pathway in ERC20Token Address\r\n        mapping (string => mapping(address => bool)) userRewardedForPathwayNative;//has user received funds for this pathway in native token\r\n        /* TODO : add in pathway and eventually quest level control */\r\n    }\r\n\r\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\r\n        bytes32 position = DIAMOND_STORAGE_POSITION;\r\n        assembly {\r\n            ds.slot := position\r\n        }\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function setContractOwner(address _newOwner) internal {\r\n        DiamondStorage storage ds = diamondStorage();\r\n        address previousOwner = ds.contractOwner;\r\n        ds.contractOwner = _newOwner;\r\n        emit OwnershipTransferred(previousOwner, _newOwner);\r\n    }\r\n\r\n    function setInitParams(bool _appApproval, address _projectSigningAddr, address _projectNFTAddr, address _pathwayNFTAddr, string memory _projectId) internal {\r\n        DiamondStorage storage ds = diamondStorage();\r\n        ds.appControlApproval = _appApproval;\r\n        ds.signingAddress = _projectSigningAddr;\r\n        ds.projectNFTAddr = _projectNFTAddr;\r\n        ds.pathwayNFTAddr = _pathwayNFTAddr;\r\n        ds.projectId = _projectId;\r\n    } \r\n\r\n    function contractOwner() internal view returns (address contractOwner_) {\r\n        contractOwner_ = diamondStorage().contractOwner;\r\n    }\r\n\r\n    function enforceIsContractOwner() internal view {\r\n        require(msg.sender == diamondStorage().contractOwner, \"LibDiamond: Must be contract owner\");\r\n    }\r\n\r\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\r\n\r\n    // Internal function version of diamondCut\r\n    function diamondCut(\r\n        IDiamondCut.FacetCut[] memory _diamondCut,\r\n        address _init,\r\n        bytes memory _calldata\r\n    ) internal {\r\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\r\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\r\n            if (action == IDiamondCut.FacetCutAction.Add) {\r\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\r\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\r\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\r\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\r\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\r\n            } else {\r\n                revert(\"LibDiamondCut: Incorrect FacetCutAction\");\r\n            }\r\n        }\r\n        emit DiamondCut(_diamondCut, _init, _calldata);\r\n        initializeDiamondCut(_init, _calldata);\r\n    }\r\n\r\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\r\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\r\n        DiamondStorage storage ds = diamondStorage();\r\n        uint16 selectorCount = uint16(ds.selectors.length);\r\n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\r\n        enforceHasContractCode(_facetAddress, \"LibDiamondCut: Add facet has no code\");\r\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\r\n            bytes4 selector = _functionSelectors[selectorIndex];\r\n            address oldFacetAddress = ds.facetAddressAndSelectorPosition[selector].facetAddress;\r\n            require(oldFacetAddress == address(0), \"LibDiamondCut: Can't add function that already exists\");\r\n            ds.facetAddressAndSelectorPosition[selector] = FacetAddressAndSelectorPosition(_facetAddress, selectorCount);\r\n            ds.selectors.push(selector);\r\n            selectorCount++;\r\n        }\r\n    }\r\n\r\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\r\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\r\n        DiamondStorage storage ds = diamondStorage();\r\n        require(_facetAddress != address(0), \"LibDiamondCut: Replace facet can't be address(0)\");\r\n        enforceHasContractCode(_facetAddress, \"LibDiamondCut: Replace facet has no code\");\r\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\r\n            bytes4 selector = _functionSelectors[selectorIndex];\r\n            address oldFacetAddress = ds.facetAddressAndSelectorPosition[selector].facetAddress;\r\n            // can't replace immutable functions -- functions defined directly in the diamond\r\n            require(oldFacetAddress != address(this), \"LibDiamondCut: Can't replace immutable function\");\r\n            require(oldFacetAddress != _facetAddress, \"LibDiamondCut: Can't replace function with same function\");\r\n            require(oldFacetAddress != address(0), \"LibDiamondCut: Can't replace function that doesn't exist\");\r\n            // replace old facet address\r\n            ds.facetAddressAndSelectorPosition[selector].facetAddress = _facetAddress;\r\n        }\r\n    }\r\n\r\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\r\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\r\n        DiamondStorage storage ds = diamondStorage();\r\n        uint256 selectorCount = ds.selectors.length;\r\n        require(_facetAddress == address(0), \"LibDiamondCut: Remove facet address must be address(0)\");\r\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\r\n            bytes4 selector = _functionSelectors[selectorIndex];\r\n            FacetAddressAndSelectorPosition memory oldFacetAddressAndSelectorPosition = ds.facetAddressAndSelectorPosition[selector];\r\n            require(oldFacetAddressAndSelectorPosition.facetAddress != address(0), \"LibDiamondCut: Can't remove function that doesn't exist\");\r\n            // can't remove immutable functions -- functions defined directly in the diamond\r\n            require(oldFacetAddressAndSelectorPosition.facetAddress != address(this), \"LibDiamondCut: Can't remove immutable function.\");\r\n            // replace selector with last selector\r\n            selectorCount--;\r\n            if (oldFacetAddressAndSelectorPosition.selectorPosition != selectorCount) {\r\n                bytes4 lastSelector = ds.selectors[selectorCount];\r\n                ds.selectors[oldFacetAddressAndSelectorPosition.selectorPosition] = lastSelector;\r\n                ds.facetAddressAndSelectorPosition[lastSelector].selectorPosition = oldFacetAddressAndSelectorPosition.selectorPosition;\r\n            }\r\n            // delete last selector\r\n            ds.selectors.pop();\r\n            delete ds.facetAddressAndSelectorPosition[selector];\r\n        }\r\n    }\r\n\r\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\r\n        if (_init == address(0)) {\r\n            require(_calldata.length == 0, \"LibDiamondCut: _init is address(0) but_calldata is not empty\");\r\n        } else {\r\n            require(_calldata.length > 0, \"LibDiamondCut: _calldata is empty but _init is not address(0)\");\r\n            if (_init != address(this)) {\r\n                enforceHasContractCode(_init, \"LibDiamondCut: _init address has no code\");\r\n            }\r\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\r\n            if (!success) {\r\n                if (error.length > 0) {\r\n                    // bubble up the error\r\n                    revert(string(error));\r\n                } else {\r\n                    revert(\"LibDiamondCut: _init function reverted\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\r\n        uint256 contractSize;\r\n        assembly {\r\n            contractSize := extcodesize(_contract)\r\n        }\r\n        require(contractSize > 0, _errorMessage);\r\n    }\r\n}"
    },
    "contracts/interfaces/IDiamondCut.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n/******************************************************************************\\\r\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\r\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\r\n/******************************************************************************/\r\n\r\ninterface IDiamondCut {\r\n    enum FacetCutAction {Add, Replace, Remove}\r\n    // Add=0, Replace=1, Remove=2\r\n\r\n    struct FacetCut {\r\n        address facetAddress;\r\n        FacetCutAction action;\r\n        bytes4[] functionSelectors;\r\n    }\r\n\r\n    /// @notice Add/replace/remove any number of functions and optionally execute\r\n    ///         a function with delegatecall\r\n    /// @param _diamondCut Contains the facet addresses and function selectors\r\n    /// @param _init The address of the contract or facet to execute _calldata\r\n    /// @param _calldata A function call, including function selector and arguments\r\n    ///                  _calldata is executed with delegatecall on _init\r\n    function diamondCut(\r\n        FacetCut[] calldata _diamondCut,\r\n        address _init,\r\n        bytes calldata _calldata\r\n    ) external;\r\n\r\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\r\n}\r\n"
    },
    "contracts/upgradeInitializers/DiamondInit.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/******************************************************************************\\\r\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\r\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\r\n*\r\n* Implementation of a diamond.\r\n/******************************************************************************/\r\n\r\nimport {LibDiamond} from \"../libraries/LibDiamond.sol\";\r\nimport { IDiamondLoupe } from \"../interfaces/IDiamondLoupe.sol\";\r\nimport { IDiamondCut } from \"../interfaces/IDiamondCut.sol\";\r\nimport { IERC173 } from \"../interfaces/IERC173.sol\";\r\nimport { IERC165 } from \"../interfaces/IERC165.sol\";\r\n\r\n// It is exapected that this contract is customized if you want to deploy your diamond\r\n// with data from a deployment script. Use the init function to initialize state variables\r\n// of your diamond. Add parameters to the init funciton if you need to.\r\n\r\ncontract DiamondInit {    \r\n\r\n    // You can add parameters to this function in order to pass in \r\n    // data to set your own state variables\r\n    function init() external {\r\n        // adding ERC165 data\r\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\r\n        ds.supportedInterfaces[type(IERC165).interfaceId] = true;\r\n        ds.supportedInterfaces[type(IDiamondCut).interfaceId] = true;\r\n        ds.supportedInterfaces[type(IDiamondLoupe).interfaceId] = true;\r\n        ds.supportedInterfaces[type(IERC173).interfaceId] = true;\r\n\r\n        // add your own state variables \r\n        // EIP-2535 specifies that the `diamondCut` function takes two optional \r\n        // arguments: address _init and bytes calldata _calldata\r\n        // These arguments are used to execute an arbitrary function using delegatecall\r\n        // in order to set state variables in the diamond during deployment or an upgrade\r\n        // More info here: https://eips.ethereum.org/EIPS/eip-2535#diamond-interface \r\n    }\r\n\r\n\r\n}"
    },
    "contracts/interfaces/IDiamondLoupe.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n/******************************************************************************\\\r\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\r\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\r\n/******************************************************************************/\r\n\r\n// A loupe is a small magnifying glass used to look at diamonds.\r\n// These functions look at diamonds\r\ninterface IDiamondLoupe {\r\n    /// These functions are expected to be called frequently\r\n    /// by tools.\r\n\r\n    struct Facet {\r\n        address facetAddress;\r\n        bytes4[] functionSelectors;\r\n    }\r\n\r\n    /// @notice Gets all facet addresses and their four byte function selectors.\r\n    /// @return facets_ Facet\r\n    function facets() external view returns (Facet[] memory facets_);\r\n\r\n    /// @notice Gets all the function selectors supported by a specific facet.\r\n    /// @param _facet The facet address.\r\n    /// @return facetFunctionSelectors_\r\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\r\n\r\n    /// @notice Get all the facet addresses used by a diamond.\r\n    /// @return facetAddresses_\r\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\r\n\r\n    /// @notice Gets the facet that supports the given selector.\r\n    /// @dev If facet is not found return address(0).\r\n    /// @param _functionSelector The function selector.\r\n    /// @return facetAddress_ The facet address.\r\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\r\n}\r\n"
    },
    "contracts/interfaces/IERC173.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n/// @title ERC-173 Contract Ownership Standard\r\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\r\n/* is ERC165 */\r\ninterface IERC173 {\r\n    /// @dev This emits when ownership of a contract changes.\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /// @notice Get the address of the owner\r\n    /// @return owner_ The address of the owner.\r\n    function owner() external view returns (address owner_);\r\n\r\n    /// @notice Set the address of the new owner of the contract\r\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\r\n    /// @param _newOwner The address of the new owner of the contract\r\n    function transferOwnership(address _newOwner) external;\r\n}\r\n"
    },
    "contracts/facets/DiamondLoupeFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n/******************************************************************************\\\r\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\r\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\r\n/******************************************************************************/\r\n\r\nimport { LibDiamond } from  \"../libraries/LibDiamond.sol\";\r\nimport { IDiamondLoupe } from \"../interfaces/IDiamondLoupe.sol\";\r\nimport { IERC165 } from \"../interfaces/IERC165.sol\";\r\n\r\ncontract DiamondLoupeFacet is IDiamondLoupe, IERC165 {\r\n    // Diamond Loupe Functions\r\n    ////////////////////////////////////////////////////////////////////\r\n    /// These functions are expected to be called frequently by tools.\r\n    //\r\n    // struct Facet {\r\n    //     address facetAddress;\r\n    //     bytes4[] functionSelectors;\r\n    // }\r\n    /// @notice Gets all facets and their selectors.\r\n    /// @return facets_ Facet\r\n    function facets() external override view returns (Facet[] memory facets_) {\r\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\r\n        uint256 selectorCount = ds.selectors.length;\r\n        // create an array set to the maximum size possible\r\n        facets_ = new Facet[](selectorCount);\r\n        // create an array for counting the number of selectors for each facet\r\n        uint8[] memory numFacetSelectors = new uint8[](selectorCount);\r\n        // total number of facets\r\n        uint256 numFacets;\r\n        // loop through function selectors\r\n        for (uint256 selectorIndex; selectorIndex < selectorCount; selectorIndex++) {\r\n            bytes4 selector = ds.selectors[selectorIndex];\r\n            address facetAddress_ = ds.facetAddressAndSelectorPosition[selector].facetAddress;\r\n            bool continueLoop = false;\r\n            // find the functionSelectors array for selector and add selector to it\r\n            for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\r\n                if (facets_[facetIndex].facetAddress == facetAddress_) {\r\n                    facets_[facetIndex].functionSelectors[numFacetSelectors[facetIndex]] = selector;\r\n                    // probably will never have more than 256 functions from one facet contract\r\n                    require(numFacetSelectors[facetIndex] < 255);\r\n                    numFacetSelectors[facetIndex]++;\r\n                    continueLoop = true;\r\n                    break;\r\n                }\r\n            }\r\n            // if functionSelectors array exists for selector then continue loop\r\n            if (continueLoop) {\r\n                continueLoop = false;\r\n                continue;\r\n            }\r\n            // create a new functionSelectors array for selector\r\n            facets_[numFacets].facetAddress = facetAddress_;\r\n            facets_[numFacets].functionSelectors = new bytes4[](selectorCount);\r\n            facets_[numFacets].functionSelectors[0] = selector;\r\n            numFacetSelectors[numFacets] = 1;\r\n            numFacets++;\r\n        }\r\n        for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\r\n            uint256 numSelectors = numFacetSelectors[facetIndex];\r\n            bytes4[] memory selectors = facets_[facetIndex].functionSelectors;\r\n            // setting the number of selectors\r\n            assembly {\r\n                mstore(selectors, numSelectors)\r\n            }\r\n        }\r\n        // setting the number of facets\r\n        assembly {\r\n            mstore(facets_, numFacets)\r\n        }\r\n    }\r\n\r\n    /// @notice Gets all the function selectors supported by a specific facet.\r\n    /// @param _facet The facet address.\r\n    /// @return _facetFunctionSelectors The selectors associated with a facet address.\r\n    function facetFunctionSelectors(address _facet) external override view returns (bytes4[] memory _facetFunctionSelectors) {\r\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\r\n        uint256 selectorCount = ds.selectors.length;\r\n        uint256 numSelectors;\r\n        _facetFunctionSelectors = new bytes4[](selectorCount);\r\n        // loop through function selectors\r\n        for (uint256 selectorIndex; selectorIndex < selectorCount; selectorIndex++) {\r\n            bytes4 selector = ds.selectors[selectorIndex];\r\n            address facetAddress_ = ds.facetAddressAndSelectorPosition[selector].facetAddress;\r\n            if (_facet == facetAddress_) {\r\n                _facetFunctionSelectors[numSelectors] = selector;\r\n                numSelectors++;\r\n            }\r\n        }\r\n        // Set the number of selectors in the array\r\n        assembly {\r\n            mstore(_facetFunctionSelectors, numSelectors)\r\n        }\r\n    }\r\n\r\n    /// @notice Get all the facet addresses used by a diamond.\r\n    /// @return facetAddresses_\r\n    function facetAddresses() external override view returns (address[] memory facetAddresses_) {\r\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\r\n        uint256 selectorCount = ds.selectors.length;\r\n        // create an array set to the maximum size possible\r\n        facetAddresses_ = new address[](selectorCount);\r\n        uint256 numFacets;\r\n        // loop through function selectors\r\n        for (uint256 selectorIndex; selectorIndex < selectorCount; selectorIndex++) {\r\n            bytes4 selector = ds.selectors[selectorIndex];\r\n            address facetAddress_ = ds.facetAddressAndSelectorPosition[selector].facetAddress;\r\n            bool continueLoop = false;\r\n            // see if we have collected the address already and break out of loop if we have\r\n            for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\r\n                if (facetAddress_ == facetAddresses_[facetIndex]) {\r\n                    continueLoop = true;\r\n                    break;\r\n                }\r\n            }\r\n            // continue loop if we already have the address\r\n            if (continueLoop) {\r\n                continueLoop = false;\r\n                continue;\r\n            }\r\n            // include address\r\n            facetAddresses_[numFacets] = facetAddress_;\r\n            numFacets++;\r\n        }\r\n        // Set the number of facet addresses in the array\r\n        assembly {\r\n            mstore(facetAddresses_, numFacets)\r\n        }\r\n    }\r\n\r\n    /// @notice Gets the facet address that supports the given selector.\r\n    /// @dev If facet is not found return address(0).\r\n    /// @param _functionSelector The function selector.\r\n    /// @return facetAddress_ The facet address.\r\n    function facetAddress(bytes4 _functionSelector) external override view returns (address facetAddress_) {\r\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\r\n        facetAddress_ = ds.facetAddressAndSelectorPosition[_functionSelector].facetAddress;\r\n    }\r\n\r\n    // This implements ERC-165.\r\n    function supportsInterface(bytes4 _interfaceId) external override view returns (bool) {\r\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\r\n        return ds.supportedInterfaces[_interfaceId];\r\n    }\r\n}"
    },
    "contracts/facets/OwnershipFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport { LibDiamond } from \"../libraries/LibDiamond.sol\";\r\nimport { IERC173 } from \"../interfaces/IERC173.sol\";\r\n\r\ncontract OwnershipFacet is IERC173 {\r\n    function transferOwnership(address _newOwner) external override {\r\n        LibDiamond.enforceIsContractOwner();\r\n        LibDiamond.setContractOwner(_newOwner);\r\n    }\r\n\r\n    function owner() external override view returns (address owner_) {\r\n        owner_ = LibDiamond.contractOwner();\r\n    }\r\n}\r\n"
    },
    "contracts/facets/DiamondCutFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/******************************************************************************\\\r\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\r\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\r\n/******************************************************************************/\r\n\r\nimport { IDiamondCut } from \"../interfaces/IDiamondCut.sol\";\r\nimport { LibDiamond } from \"../libraries/LibDiamond.sol\";\r\n\r\ncontract DiamondCutFacet is IDiamondCut {\r\n    /// @notice Add/replace/remove any number of functions and optionally execute\r\n    ///         a function with delegatecall\r\n    /// @param _diamondCut Contains the facet addresses and function selectors\r\n    /// @param _init The address of the contract or facet to execute _calldata\r\n    /// @param _calldata A function call, including function selector and arguments\r\n    ///                  _calldata is executed with delegatecall on _init\r\n    function diamondCut(\r\n        FacetCut[] calldata _diamondCut,\r\n        address _init,\r\n        bytes calldata _calldata\r\n    ) external override {\r\n        LibDiamond.enforceIsContractOwner();\r\n        LibDiamond.diamondCut(_diamondCut, _init, _calldata);\r\n    }\r\n}\r\n"
    },
    "contracts/ProjectDiamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/******************************************************************************\\\r\n* Author: Jamie Pickett\r\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\r\n*\r\n* Implementation of a diamond for the project.\r\n/******************************************************************************/\r\n\r\nimport { LibDiamond } from \"./libraries/LibDiamond.sol\";\r\nimport { IDiamondCut } from \"./interfaces/IDiamondCut.sol\";\r\n\r\ncontract ProjectDiamond {    \r\n\r\n    constructor(address _contractOwner, address _diamondCutFacet, bool _appApproval, address _projectSigningAddr,\r\n            address _projectNFTAddr, address _pathwayNFTAddr, string memory _projectId) payable {        \r\n        LibDiamond.setContractOwner(_contractOwner);\r\n        LibDiamond.setInitParams(_appApproval, _projectSigningAddr, _projectNFTAddr, _pathwayNFTAddr, _projectId);\r\n\r\n        // Add the diamondCut external function from the diamondCutFacet\r\n        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](1);\r\n        bytes4[] memory functionSelectors = new bytes4[](1);\r\n        functionSelectors[0] = IDiamondCut.diamondCut.selector;\r\n        cut[0] = IDiamondCut.FacetCut({\r\n            facetAddress: _diamondCutFacet, \r\n            action: IDiamondCut.FacetCutAction.Add, \r\n            functionSelectors: functionSelectors\r\n        });\r\n        LibDiamond.diamondCut(cut, address(0), \"\");        \r\n    }\r\n\r\n    function addPathwayId(string memory _pathwayId) external {\r\n        LibDiamond.DiamondStorage storage ds;\r\n        bytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\r\n        // get diamond storage\r\n        assembly {\r\n            ds.slot := position\r\n        }\r\n        require(msg.sender == ds.pathwayNFTAddr, \"ProjectDiamond : wrong sender\");\r\n        ds.validPathways[_pathwayId] = true;\r\n    }\r\n\r\n    // Find facet for function that is called and execute the\r\n    // function if a facet is found and return any value.\r\n    fallback() external payable {\r\n        LibDiamond.DiamondStorage storage ds;\r\n        bytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\r\n        // get diamond storage\r\n        assembly {\r\n            ds.slot := position\r\n        }\r\n        // get facet from function selector\r\n        address facet = ds.facetAddressAndSelectorPosition[msg.sig].facetAddress;\r\n        require(facet != address(0), \"Diamond: Function does not exist\");\r\n        // Execute external function from facet using delegatecall and return any value.\r\n        assembly {\r\n            // copy function selector and any arguments\r\n            calldatacopy(0, 0, calldatasize())\r\n             // execute function call using the facet\r\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\r\n            // get any return value\r\n            returndatacopy(0, 0, returndatasize())\r\n            // return any return value or error back to the caller\r\n            switch result\r\n                case 0 {\r\n                    revert(0, returndatasize())\r\n                }\r\n                default {\r\n                    return(0, returndatasize())\r\n                }\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n}"
    },
    "contracts/AppDiamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport { ProjectDiamond } from \"./ProjectDiamond.sol\";\r\n\r\ncontract AppDiamond is Ownable {\r\n    address projectNFTAddr;//address that mints NFT after approval process to project\r\n    address verifyAddr;//address that verifies deployments and updates\r\n    address pathwayNFTAddr;//address mints Pathway NFTs\r\n    mapping (address => bool) public reviewers;//same ones who can approve projectNFT\r\n    uint128 public multiSigThreshold; //gives minimum multisig percentage (30 = 30% )\r\n    uint128 public numReviewers;//number of Reviewers. Needed for threshold calculation\r\n    mapping (string => bool) public projApproved;//is Project NFt already approved and minted\r\n    mapping (string => address) public projectDiamondAddrs; //mapping of address of deployed diamonds for \r\n    address public appSigningAddr;\r\n    address sponsorSFT;//ERC1155 for sponsors\r\n    mapping (uint => address[]) internal approvedERC20sPerChain;//approved ERC20s per Chain only use when calculating all the refunds for a pathway\r\n    mapping (uint => mapping (address => bool)) public isERC20ApprovedOnChainId;//check if this is an approved ERC20\r\n    mapping (string => mapping (uint => address[])) internal projectApprovedERC20sPerChain;//approved ERC20s per project per chain\r\n    mapping (string => mapping (uint => mapping (address => bool))) public isProjectERC20ApprovedOnChainId;//check if this is an approved ERC20 for project\r\n\r\n    constructor(address _projectNFTAddr, address _pathwayNFTAddr, address _verifyAddr, address _sponsorSFT, address _appSigningAddr){\r\n        projectNFTAddr = _projectNFTAddr;\r\n        pathwayNFTAddr = _pathwayNFTAddr;\r\n        verifyAddr = _verifyAddr;\r\n        appSigningAddr = _appSigningAddr;\r\n        sponsorSFT = _sponsorSFT;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    //eventually will need to make this multiSig, but onlyOwner for right now\r\n    function setprojectNFTAddr(address _newNFTAddr) public onlyOwner{\r\n        projectNFTAddr = _newNFTAddr;\r\n    }\r\n\r\n    function setApproved(string memory _projectId) external {\r\n        require(_msgSender() == projectNFTAddr);\r\n        projApproved[_projectId] = true;\r\n    } \r\n      \r\n    function deployDiamond(string memory _projectId, bool appSign, address projectSigningAddr, address _diamondCutFacet, bytes32 r, bytes32 s, uint8 v) external {\r\n        (bool success, bytes memory data) = projectNFTAddr.call(abi.encodeWithSelector(bytes4(keccak256(\"reviewers(address)\")), _msgSender()));\r\n        require(success, \"unsuccessful call\");\r\n        success = abi.decode(data, (bool));\r\n        require(success, \"not approved app reviewer\");\r\n        require(projectDiamondAddrs[_projectId] == address(0), \"project had a diamond already\");//for now immutable diamond could change later\r\n        require(projApproved[_projectId], \"project NFT not minted\");\r\n        //call verify to make sure this is ok to deploy\r\n        (success, data) = verifyAddr.call(abi.encodeWithSelector(bytes4(keccak256(\"deployDiamondVerify(address,string,bytes32,bytes32,bytes32)\")), \r\n                _msgSender(),\r\n                _projectId,\r\n                r,\r\n                s,\r\n                v\r\n            ));\r\n        require(success, \"unsuccessful call\");\r\n        success = abi.decode(data, (bool));\r\n        require(success, \"AppDiamond : not approved deploy\");\r\n        \r\n        //deploy diamond for project\r\n\r\n        ProjectDiamond p = new ProjectDiamond(owner(), _diamondCutFacet, appSign, projectSigningAddr, projectNFTAddr, pathwayNFTAddr, _projectId);\r\n        projectDiamondAddrs[_projectId] = address(p);\r\n    }\r\n\r\n    //impossible for now to take off approved ERC20 Addrs, but can add new ones to mapping\r\n    function addERC20PerChain(uint chainId, address[] memory  _ERC20Addrs) external onlyOwner{\r\n        require(chainId > 0 && _ERC20Addrs.length > 0, \"invalid entry\");\r\n        approvedERC20sPerChain[chainId] = _ERC20Addrs;\r\n        for(uint i=0; i< _ERC20Addrs.length; i++){\r\n           isERC20ApprovedOnChainId[chainId][_ERC20Addrs[i]] = true; \r\n        }\r\n    }\r\n\r\n    function getERC20Addrs(uint chainId) external view returns(address[] memory){\r\n        return approvedERC20sPerChain[chainId];\r\n    }\r\n\r\n    function getERC20AddrsPerProject(string memory projectId, uint chainId) external view returns(address[] memory){\r\n        return projectApprovedERC20sPerChain[projectId][chainId];\r\n    }\r\n\r\n    function checkApprovedERC20PerProjectByChain(string memory projectId, uint256 chainId, address ERC20Addr) external view returns(bool){\r\n        return (isERC20ApprovedOnChainId[chainId][ERC20Addr] || isProjectERC20ApprovedOnChainId[projectId][chainId][ERC20Addr]);\r\n    }\r\n\r\n    function addProjectERC20PerChain(string memory projectId, uint[] memory chainIds, address[][] memory ERC20Addrs) external {\r\n        (bool success, bytes memory data) = projectNFTAddr.call(abi.encodeWithSelector(bytes4(keccak256(\"reviewers(address)\")), _msgSender()));\r\n        require(success, \"unsuccessful call\");\r\n        bool isReviewer = abi.decode(data, (bool));\r\n        require(isReviewer, \"not approved app reviewer\");\r\n        require(chainIds.length > 0 && chainIds.length == ERC20Addrs.length, \"invalid lengths sent\");\r\n        uint j;\r\n        for(uint i=0; i<chainIds.length; i++){\r\n            projectApprovedERC20sPerChain[projectId][chainIds[i]] = ERC20Addrs[i];\r\n            for(j=0; j< ERC20Addrs[i].length; j++){\r\n                isProjectERC20ApprovedOnChainId[projectId][chainIds[i]][ERC20Addrs[i][j]]=true;\r\n            }\r\n        }\r\n    }\r\n}"
    },
    "contracts/AdventurerNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport {IAdventurerNFT} from \"./interfaces/IAdventurerNFT.sol\";\r\nimport {IAdventureMetadata} from \"./interfaces/IAdventureMetadata.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\r\n\r\ncontract AdventurerNFT is IAdventurerNFT, IAdventureMetadata, ERC721URIStorage, ERC721Enumerable, Initializable {\r\n    using Counters for Counters.Counter;\r\n    \r\n    Counters.Counter private _tokenIds;\r\n    \r\n    address deployer;\r\n    address public factory;\r\n    string public objectId;\r\n    bool public isPathway;\r\n    string public parentId;\r\n\r\n    constructor() ERC721(\"dCompassNFT\", \"DCOMPNFT\"){\r\n        deployer = msg.sender;\r\n    }\r\n\r\n    // called once by the factory at time of deployment\r\n    function initialize(\r\n        string memory _objectId,\r\n        bool _isPathway,\r\n        string memory _parentId\r\n    ) external override initializer {\r\n        //require(factory == address(0), 'dCompassNFT: FORBIDDEN'); // checks not called yet\r\n        factory = msg.sender;\r\n        objectId = objectId;\r\n        isPathway = _isPathway;\r\n        parentId = _parentId;\r\n    }\r\n\r\n    function name() public override(ERC721, IAdventureMetadata) view returns(string memory){\r\n        string memory baseName = super.name();\r\n        return string(abi.encodePacked(baseName, \"-\", objectId));\r\n    }  \r\n\r\n    function symbol() public override(ERC721, IAdventureMetadata) view returns(string memory){\r\n        string memory baseSymbol = super.symbol();\r\n        return string(abi.encodePacked(baseSymbol, \"-\", objectId));\r\n    }\r\n\r\n    function mint(address _to, uint256 count, string memory _tokenURI) external returns (uint256 newTokenId){\r\n        bool success;\r\n        bytes memory data;\r\n        address senderCheck;\r\n        if(isPathway){\r\n            (success, data) = factory.call(abi.encodeWithSelector(bytes4(keccak256(\"pathwayNFTAddress()\"))));\r\n            require(success);\r\n            senderCheck = abi.decode(data, (address));\r\n        }\r\n        else{\r\n            (success, data) = factory.call(abi.encodeWithSelector(bytes4(keccak256(\"badgeNFTAddress()\"))));\r\n            require(success);\r\n            senderCheck = abi.decode(data, (address));\r\n        }\r\n        require(msg.sender == senderCheck, \"AdventurerNFT : incorrect mint address\");\r\n\r\n        //just in case different \"versions\" of pathways or quests drop without a new NFT\r\n        require(balanceOf(_to) + 1 == count, \"AdventureNFT : not allowed to mint again\");\r\n        _tokenIds.increment();\r\n        newTokenId = _tokenIds.current();\r\n        _mint(_to, newTokenId);\r\n        _setTokenURI(newTokenId, _tokenURI);\r\n    } \r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal override(ERC721Enumerable, ERC721) {\r\n        super._beforeTokenTransfer(from,to,tokenId);\r\n    }\r\n    \r\n    function _burn(uint256 tokenId) internal override(ERC721URIStorage, ERC721) {\r\n        super._burn(tokenId);\r\n    }\r\n    \r\n     function supportsInterface(bytes4 interfaceId) public view override(ERC721Enumerable, ERC721) returns (bool){\r\n         return super.supportsInterface(interfaceId);\r\n     }\r\n     \r\n     function tokenURI(uint256 tokenId) public view virtual override(ERC721URIStorage, ERC721) returns (string memory){\r\n         return super.tokenURI(tokenId);\r\n     }\r\n\r\n}"
    },
    "contracts/interfaces/IAdventureMetadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\ninterface IAdventureMetadata {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n}"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !Address.isContract(address(this));\n    }\n}\n"
    },
    "contracts/SponsorPassSFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @title dCompassSponsorSFT\r\n * @dev SFTs for tracking dCompass sponsors\r\n*/\r\n\r\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\r\n\r\ncontract SponsorPassSFT is ERC1155 {\r\n    uint256 public constant SILVER = 1;\r\n    uint256 public constant GOLD = 2;\r\n    uint256 public constant DIAMOND = 3;\r\n    mapping (uint => uint) public stakeAmounts;\r\n    address payable projectNFTAddr;//project NFT Address this will interact with\r\n    mapping (string => uint) levelByProject;//level of each project...needed in case a wallet, so can read level by project\r\n    //mapping (address => uint) public isAddrOwner;//is address associated with project owner?\r\n    mapping (string => address) public walletByProj;//wallet address for a project\r\n    mapping (address => string) public projByWallet;//wallet which is project wallet\r\n\r\n    constructor(uint[] memory _initStakeAmounts, address payable _projectNFTAddr)\r\n        ERC1155(\r\n            \"https://bafybeifeu5j5a52n6oslqdvkyskuhtehaqxkjiw5lbpnia6fakpwlkgz2y.ipfs.dweb.link/{id}.json\"\r\n        ) {\r\n            for (uint i =0; i < DIAMOND; i++){\r\n                stakeAmounts[i+1] = _initStakeAmounts[i];\r\n            }\r\n            projectNFTAddr = _projectNFTAddr;\r\n        }\r\n\r\n    function mint(uint _id, address _to, string memory projectId) external {\r\n        require(msg.sender == projectNFTAddr, \"invalid contract calling mint\");\r\n        //require(!isAddrOwner[_to], \"address currently has active token\");\r\n        //isAddrOwner[_to] += true;\r\n        walletByProj[projectId] = _to;\r\n        //projByWallet[_to] = projectId;\r\n        levelByProject[projectId] = _id;\r\n        _mint(_to, _id, 1, \"\");\r\n    }\r\n\r\n    function updateLevel(uint _id, address _from, string memory projectId, uint newLevel) external {\r\n        //burn one NFT from current level and mint one from another level\r\n        require(msg.sender == projectNFTAddr, \"invalid contract calling mint\");\r\n        //require(isAddrOwner[_from], \"no token to burn\");\r\n        require(_from == walletByProj[projectId], \"not wallet associated with project\");\r\n        //require(keccak256(abi.encodePacked(projByWallet[_from]))==keccak256(abi.encodePacked(projectId)), \"not current owner associated with project\");\r\n        _burn(_from,_id,1);\r\n        levelByProject[projectId] = newLevel;\r\n        _mint(_from, newLevel, 1, \"\");\r\n\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not owner nor approved\"\r\n        );\r\n        //require(isAddrOwner[from] && !isAddrOwner[to], \"ERC1155: from or to have incorrect ownership\");\r\n        string memory _projectId = abi.decode(data, (string));\r\n        require (walletByProj[_projectId] == from, \"ERC1155: from is not project wallet\");\r\n        require (levelByProject[_projectId] == id, \"ERC1155: incorrect level for project\");\r\n        _safeTransferFrom(from, to, id, amount, data);\r\n        (bool success,) = projectNFTAddr.call(abi.encodeWithSelector(bytes4(keccak256(\"changeProjectWallet(string,address)\")), _projectId, to));\r\n        require(success, \"unsuccessful projectNFT call\");\r\n        walletByProj[_projectId] = to;\r\n        /*projByWallet[to] = projByWallet[from];\r\n        delete projByWallet[from];\r\n        delete isAddrOwner[from];\r\n        isAddrOwner[to] = true;*/\r\n    }\r\n\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(false, \"ERC1155: locking batch Transfers\");\r\n    }\r\n\r\n    function setStakeAmounts(uint _tokenId, uint amount) external {\r\n        (bool success, bytes memory data) = projectNFTAddr.call(abi.encodeWithSelector(bytes4(keccak256(\"reviewers(address)\")), msg.sender));\r\n        require(success, \"unsuccessful projectNFT call\");\r\n        bool isReviewer = abi.decode(data, (bool));\r\n        require(isReviewer, \"not approved app reviewer\");\r\n        require (_tokenId >0 && _tokenId < DIAMOND + 1, \"invalid _tokenId\");\r\n        stakeAmounts[_tokenId] = amount;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
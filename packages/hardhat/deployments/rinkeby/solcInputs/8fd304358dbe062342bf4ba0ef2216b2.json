{
  "language": "Solidity",
  "sources": {
    "contracts/AppDiamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract AppDiamond is Ownable {\n    address projectNFTAddr;//address that mints NFT after approval process to project\n    address verifyAddr;//address that verifies deployments and updates\n    mapping (address => bool) public reviewers;//same ones who can approve projectNFT\n    uint128 public multiSigThreshold; //gives minimum multisig percentage (30 = 30% )\n    uint128 public numReviewers;//number of Reviewers. Needed for threshold calculation\n    mapping (string => bool) projApproved;//is Project NFt already approved and minted\n    mapping (string => address) public projectDiamondAddrs; //mapping of address of deployed diamonds for \n    address public appSigningAddr;\n\n    constructor(address _projectNFTAddr, address _verifyAddr, address _appSigningAddr){\n        projectNFTAddr = _projectNFTAddr;\n        verifyAddr = _verifyAddr;\n        appSigningAddr = _appSigningAddr;\n    }\n\n    //eventually will need to make this multiSig, but onlyOwner for right now\n    function setprojectNFTAddr(address _newNFTAddr) public onlyOwner{\n        projectNFTAddr = _newNFTAddr;\n    }\n\n    function setApproved(string memory _projectId) external {\n        require(_msgSender() == projectNFTAddr);\n        projApproved[_projectId] = true;\n    } \n      \n    function deployDiamond(string memory _projectId, bool appSign, address projectSigningAddr, bytes32 r, bytes32 s, uint8 v) external {\n        require(projectDiamondAddrs[_projectId] == address(0), \"project had a diamond already\");//for now immutable diamond\n        require(projApproved[_projectId], \"project NFT not minted\");\n        //call verify to make sure this is ok to deploy...\n        //deploy diamond for project\n    }\n\n\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/ProjectNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title dCompassProjectNFT\n * @dev NFTs for creating project\n*/\n\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract ProjectNFT is ERC721URIStorage, Ownable{\n    using Counters for Counters.Counter;\n    \n    Counters.Counter private _tokenIds;\n    Counters.Counter private _multiSigRequest;\n    \n    uint public stakeAmount = 0.001 ether;\n    mapping (address => bool) public reviewers;\n    uint128 public multiSigThreshold; //gives minimum multisig percentage (30 = 30% )\n    uint128 public numReviewers;//number of Reviewers. Needed for threshold calculation\n    address payable appWallet;//sign in a script and also withdraw slashed stakes\n    address payable appDiamond;//address of the app level diamond\n    enum ProjectStatus{ NONEXISTENT, PENDING, DENIED, APPROVED }\n    \n    mapping (string => address[]) internal contributors;\n    mapping (string => address[]) internal approvedERC20Addrs;\n    mapping (string => address) public projectWallets;\n    mapping (string => uint) internal stakePerProject;\n    mapping (uint => string) public statusStrings;\n    mapping (string => ProjectStatus) public status;\n    mapping (string => uint) public votes;//tally of approved votes;\n    mapping (string => uint) public votesReject;//tally of rejection votes;\n    mapping (string => mapping(address => bool)) public reviewerVotes;//vote record of reviewers for ProjectId\n    //mapping (string => uint16[]) public rarities; // rarities of each image uint16 used for pakcing purposes\n    mapping (string => bool) public projectMinted; // tracks if mint has been done\n    mapping (string => uint) public projectThresholds;// threshold for the project contributors to approve courses\n    \n    event NFTProjectMinted(address indexed _to, string indexed _tokenURI, string indexed _questId);\n    event ReceiveCalled(address _caller, uint _value);\n    event ProjectApproved(string indexed _projectId);\n\n    constructor(address payable _walletAddress, address[] memory _reviewers, uint128 _initialThreshold) ERC721(\"dCompassProject\", \"DCOMPROJ\"){\n        require(_reviewers.length > 0, \"Must have at least 1 reviewer\");\n        require(_initialThreshold > 0 && _initialThreshold <=100, \"invalid threshold\");\n        multiSigThreshold = _initialThreshold;\n        appWallet = _walletAddress;\n        for (uint i=0; i<_reviewers.length; i++){\n            if(_reviewers[i]!= address(0) && !reviewers[_reviewers[i]]){\n                reviewers[_reviewers[i]] = true;\n                numReviewers++;\n            }\n        }\n        statusStrings[0] = \"NONEXISTENT\";\n        statusStrings[1] = \"PENDING\";\n        statusStrings[2] = \"DENIED\";\n        statusStrings[3] = \"APPROVED\";\n    } \n\n    modifier onlyReviewer(){\n        require(reviewers[_msgSender()], \"not a reviewer\");\n        _;\n    }\n\n    receive() external payable {\n        emit ReceiveCalled(msg.sender, msg.value);\n    }\n    \n    function voteForApproval(address[] memory _contributors,  address[] memory approvedAddrs, uint _threshold, string memory _projectId) public onlyReviewer{\n        require(status[_projectId] != ProjectStatus.DENIED && status[_projectId] != ProjectStatus.APPROVED, \"finalized project\");\n        require(!reviewerVotes[_projectId][_msgSender()], \"already voted for this project\");\n        //require (projectWallets[_projectId] != address(0), \"no project wallet\");\n        votes[_projectId]++;\n        reviewerVotes[_projectId][_msgSender()] = true;\n        if(status[_projectId] == ProjectStatus.NONEXISTENT){\n            require(_contributors.length >0, \"empty array\");\n            require(_threshold > 0 && _threshold <= 100, \"invalid threshold\");\n            //rarities[_projectId] = _rarities;\n            contributors[_projectId] = _contributors;\n            projectThresholds[_projectId] = _threshold;\n            approvedERC20Addrs[_projectId] = approvedAddrs;\n            if(multiSigThreshold*numReviewers/100 == 0){\n                status[_projectId] = ProjectStatus.APPROVED;\n                (bool success,) = payable(projectWallets[_projectId]).call{value : stakePerProject[_projectId]}(\"\");\n                require(success, \"transfer failed\");\n                emit ProjectApproved(_projectId);\n                //approveMint(_projectId);\n            }\n            else{\n                status[_projectId] = ProjectStatus.PENDING;\n            }\n        }\n        else{\n            uint minVotes = multiSigThreshold*numReviewers/100;\n            if(minVotes * 100 < multiSigThreshold*numReviewers){\n                minVotes++;\n            }\n            if(votes[_projectId] >= minVotes){\n                status[_projectId] = ProjectStatus.APPROVED;\n                (bool success,) = payable(projectWallets[_projectId]).call{value : stakePerProject[_projectId]}(\"\");\n                require(success, \"transfer failed\");\n                emit ProjectApproved(_projectId);\n                //approveMint(_projectId);\n            }  \n        }\n    }\n\n    function voteForRejection(string memory _projectId) public onlyReviewer{\n        require(status[_projectId] == ProjectStatus.PENDING, \"project not pending\");\n        require(!reviewerVotes[_projectId][_msgSender()], \"already voted for this project\");\n        votesReject[_projectId]++;\n        reviewerVotes[_projectId][_msgSender()] = true;\n        uint minVotes = multiSigThreshold*numReviewers/100;\n        if(minVotes * 100 < multiSigThreshold*numReviewers){\n            minVotes++;\n        }\n        if(votesReject[_projectId] >= minVotes){\n            status[_projectId] = ProjectStatus.DENIED;\n            (bool success,) = appWallet.call{value : stakePerProject[_projectId]}(\"\");\n            require(success, \"transfer failed\");\n        }\n    }\n    \n    function createToken(uint32[] memory firstURIParts, uint256[] memory secondURIParts, string memory _projectId) public onlyReviewer returns(uint[] memory){\n        require(status[_projectId] == ProjectStatus.APPROVED, \"job not approved yet\");\n        require(!projectMinted[_projectId], \"already minted\");\n        require(firstURIParts.length == secondURIParts.length && firstURIParts.length == contributors[_projectId].length, \"incorrect arrs\");\n\n        //batch minting\n        uint256[] memory newItems = new uint256[](contributors[_projectId].length);\n        uint256 newItemId;\n        string memory _tokenURI;\n\n        for(uint i =0; i< contributors[_projectId].length; i++){\n        _tokenIds.increment();\n        newItemId = _tokenIds.current();\n        _tokenURI = string(abi.encodePacked(\"ipfs://f\",uint32tohexstr(firstURIParts[i]),uint256tohexstr(secondURIParts[i])));\n        \n        _mint(contributors[_projectId][i], newItemId);\n        _setTokenURI(newItemId, _tokenURI);\n\n        //set the approval within app Diamond contract\n        (bool success, ) = appDiamond.call(abi.encodeWithSelector(bytes4(keccak256(\"setApproved(string)\")), _projectId));\n        require(success, \"diamond approval failed\");\n        \n        emit NFTProjectMinted(contributors[_projectId][i], _tokenURI, _projectId);\n        }\n        projectMinted[_projectId] = true;\n        return newItems;    \n    }\n\n    function addProjectWallet(string memory _projectId) external payable{\n        require (projectWallets[_projectId] == address(0), \"already project wallet\");\n        require (msg.value >= stakeAmount, \"not enough staked\");\n        projectWallets[_projectId] = _msgSender();\n        stakePerProject[_projectId] = stakeAmount;\n        if(msg.value > stakeAmount){\n            (bool success, ) = payable(_msgSender()).call{value : msg.value - stakeAmount}(\"\");\n            require(success, \"failed refund\");\n        }\n    }\n\n    function addReviewer(address _reviewer) public onlyReviewer {\n        require (!reviewers[_reviewer], \"already reviewer\");\n        reviewers[_reviewer]=true;\n        numReviewers++;\n    }\n\n    function setStatusString(uint index, string memory newName) external onlyReviewer{\n        statusStrings[index] = newName;\n    }\n\n    function setStake(uint newStake) external onlyReviewer{\n        stakeAmount = newStake;\n    }\n\n    function addProjectContributor(string memory _projectId, address newContributor) external{\n        require(status[_projectId]!= ProjectStatus.NONEXISTENT, \"project doesn't exist\");\n        require(!projectMinted[_projectId], \"project already minted\");\n        bool isAllowed = reviewers[_msgSender()];\n        bool notContributor = true;\n        if(!isAllowed){\n            address[] memory currContributors = contributors[_projectId];\n            for(uint i=0; i<currContributors.length; i++){\n                if(_msgSender() == currContributors[i]){\n                    isAllowed = true;\n                }\n                if(newContributor == currContributors[i]){\n                    notContributor = false;\n                }\n            }\n        }\n        require(isAllowed, \"must be a project contributor or reviewer\");\n        require(notContributor, \"already a contributor on project\");\n        contributors[_projectId].push(newContributor);\n    }\n\n    function setThreshold(uint128 _newThreshold) public onlyReviewer{\n        require(_newThreshold > 0 && _newThreshold <=100, \"invalid threshold\");\n        multiSigThreshold = _newThreshold;\n    }\n    \n    //helpers for building URIs\n    function uint8tohexchar(uint8 i) internal pure returns (uint8) {\n        return (i > 9) ?\n            (i + 87) : // ascii a-f\n            (i + 48); // ascii 0-9\n    }\n    \n    function uint32tohexstr(uint32 i) internal pure returns (string memory) {\n            bytes memory o = new bytes(8);\n            uint32 mask = 0x0000000f;\n            uint count =8;\n            while (count>0){\n                o[count-1]=bytes1(uint8tohexchar(uint8(i & mask)));\n                if(count>1){\n                    i = i >> 4;\n                }\n                count--;\n            }\n            return string(o);\n        }\n \n    function uint256tohexstr(uint256 i) internal pure returns (string memory) {\n        bytes memory o = new bytes(64);\n        uint256 mask = 0x0000000000000000000000000000000f;\n        \n        uint count = 64;\n        while (count>0){\n            o[count-1]=bytes1(uint8tohexchar(uint8(i & mask)));\n            if(count>1){\n                i = i >> 4;\n            }\n            count--; \n        }\n        return string(o);\n    }\n\n    function getContributors(string memory _projectId) external view returns(address[] memory){\n        return contributors[_projectId];\n    }\n\n    function getApprovedAddrs(string memory _projectId) external view returns(address[] memory){\n        return approvedERC20Addrs[_projectId];\n    }\n\n    function setAppDiamond(address payable _appDiamond) external onlyReviewer{\n        require(_appDiamond != address(0));\n        appDiamond = _appDiamond;\n    }\n}"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/PathwayNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title dCompassPathwayNFT\n * @dev NFTs for creating pathways\n */\n\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./RandomNumberConsumer.sol\";\nimport \"./Verify.sol\";\n\ncontract PathwayNFT is ERC721URIStorage, ERC721Enumerable, Ownable {\n    using Counters for Counters.Counter;\n\n    Counters.Counter private _tokenIds;\n\n    RandomNumberConsumer vrfContract; //VRF Contract used for randomness\n    Verify verifyContract; //Verify contract instance\n    address projectNFTAddress; // address for the projectNFTs\n    mapping(uint256 => string) public statusStrings;\n    mapping(string => bool) public pathwayMinted; // tracks if mint has been done\n    mapping(string => address[]) internal contributors; //contributors to this course\n    uint8[] internal rarityThresholds; //used for getting cutoffs of common, uncommon et al\n    mapping(string => string) public projectIdforPathway; //the projectId that is the root\n    mapping(string => PathwayStatus) public status;\n    mapping(string => uint256) public votes; //tally of approved votes per pathwayId;\n    mapping(string => mapping(address => bool)) public reviewerVotes; //vote record of approved voters for PathwayId\n\n    enum PathwayStatus {\n        NONEXISTENT,\n        PENDING,\n        DENIED,\n        APPROVED\n    }\n\n    event ReceiveCalled(address _caller, uint256 _value);\n    event PathwayApproved(string indexed _pathwayId);\n    event NFTPathwayMinted(\n        address indexed _to,\n        string indexed _tokenURI,\n        string indexed _badgeId\n    );\n\n    constructor(\n        address _vrfAddress,\n        address _projectNFTAddress,\n        address _verifyAddress\n    ) ERC721(\"dCompassBadge\", \"DCOMPB\") {\n        vrfContract = RandomNumberConsumer(_vrfAddress);\n        verifyContract = Verify(_verifyAddress);\n        //uint rarityTotal = 0;\n        /*for (uint8 i =0; i<_initRarities.length; i++){\n            rarityTotal += _initRarities[i];\n        }\n        require(rarityTotal == 100, \"rarities do not add to 100\");\n        rarityThresholds = _initRarities;*/\n        projectNFTAddress = _projectNFTAddress;\n        statusStrings[0] = \"NONEXISTENT\";\n        statusStrings[1] = \"PENDING\";\n        statusStrings[2] = \"DENIED\";\n        statusStrings[3] = \"APPROVED\";\n    }\n\n    receive() external payable {\n        emit ReceiveCalled(msg.sender, msg.value);\n    }\n\n    function voteForApproval(\n        address[] memory _contributors,\n        string memory _pathwayId,\n        string memory _projectId,\n        bytes32[2] memory r,\n        bytes32[2] memory s,\n        uint8[2] memory v,\n        uint256 votesNeeded\n    ) public {\n        require(\n            status[_pathwayId] != PathwayStatus.DENIED &&\n                status[_pathwayId] != PathwayStatus.APPROVED,\n            \"finalized badge\"\n        );\n        require(\n            !reviewerVotes[_pathwayId][_msgSender()],\n            \"already voted for this badge\"\n        );\n        bool voteAllowed = verifyContract.metaDataVerify(\n            _msgSender(),\n            _pathwayId,\n            _projectId,\n            r[0],\n            s[0],\n            v[0]\n        );\n        require(voteAllowed, \"sender is not approved project voter\");\n        bool thresholdCheck = verifyContract.thresholdVerify(\n            _msgSender(),\n            _pathwayId,\n            votesNeeded,\n            r[1],\n            s[1],\n            v[1]\n        );\n        require(thresholdCheck, \"incorrect votes needed sent\");\n        votes[_pathwayId]++;\n        reviewerVotes[_pathwayId][_msgSender()] = true;\n        if (status[_pathwayId] == PathwayStatus.NONEXISTENT) {\n            require(_contributors.length > 0, \"empty array\");\n            contributors[_pathwayId] = _contributors;\n            projectIdforPathway[_pathwayId] = _projectId;\n            if (votesNeeded <= votes[_pathwayId]) {\n                status[_pathwayId] = PathwayStatus.APPROVED;\n                emit PathwayApproved(_pathwayId);\n                //vrfContract.getRandomNumber(_pathwayId, contributors[_pathwayId].length);\n            } else {\n                status[_pathwayId] = PathwayStatus.PENDING;\n            }\n        } else {\n            if (votes[_pathwayId] >= votesNeeded) {\n                status[_pathwayId] = PathwayStatus.APPROVED;\n                emit PathwayApproved(_pathwayId);\n                //vrfContract.getRandomNumber(_pathwayId, contributors[_pathwayId].length);\n            }\n        }\n    }\n\n    function createToken(\n        string memory _tokenURI,\n        string memory _pathwayId,\n        string memory _projectId,\n        bytes32[2] memory r,\n        bytes32[2] memory s,\n        uint8[2] memory v,\n        uint256 votesNeeded\n    ) public returns (uint256[] memory) {\n        require(!pathwayMinted[_pathwayId], \"already minted\");\n        //require(vrfContract.blockNumberResults(_pathwayId) > 0, \"no request yet\");\n        bool mintAllowed = verifyContract.metaDataVerify(\n            _msgSender(),\n            _pathwayId,\n            _projectId,\n            r[0],\n            s[0],\n            v[0]\n        );\n        require(mintAllowed, \"sender is not approved project minter\");\n        if (status[_pathwayId] == PathwayStatus.PENDING) {\n            require(votesNeeded <= votes[_pathwayId], \"not enough votes\");\n            bool thresholdCheck = verifyContract.thresholdVerify(\n                _msgSender(),\n                _pathwayId,\n                votesNeeded,\n                r[1],\n                s[1],\n                v[1]\n            );\n            require(thresholdCheck, \"incorrect votes needed sent\");\n            status[_pathwayId] = PathwayStatus.APPROVED;\n        }\n        require(\n            status[_pathwayId] == PathwayStatus.APPROVED,\n            \"can only mint for pathways in approved status\"\n        );\n\n        //batch minting\n        uint256[] memory newItems = new uint256[](\n            contributors[_pathwayId].length\n        );\n        uint256 newItemId;\n\n        for (uint256 i = 0; i < contributors[_pathwayId].length; i++) {\n            _tokenIds.increment();\n            newItemId = _tokenIds.current();\n\n            _mint(contributors[_pathwayId][i], newItemId);\n            _setTokenURI(newItemId, _tokenURI);\n\n            emit NFTPathwayMinted(\n                contributors[_pathwayId][i],\n                _tokenURI,\n                _pathwayId\n            );\n        }\n        pathwayMinted[_pathwayId] = true;\n        return newItems;\n    }\n\n    function walletOfOwner(address _owner)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        uint256 ownerTokenCount = balanceOf(_owner);\n        uint256[] memory tokenIds = new uint256[](ownerTokenCount);\n        for (uint256 i; i < ownerTokenCount; i++) {\n            tokenIds[i] = tokenOfOwnerByIndex(_owner, i);\n        }\n        return tokenIds;\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal override(ERC721Enumerable, ERC721) {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    function _burn(uint256 tokenId)\n        internal\n        override(ERC721URIStorage, ERC721)\n    {\n        super._burn(tokenId);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(ERC721Enumerable, ERC721)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override(ERC721URIStorage, ERC721)\n        returns (string memory)\n    {\n        return super.tokenURI(tokenId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "contracts/RandomNumberConsumer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n\ncontract RandomNumberConsumer is VRFConsumerBase, Ownable {\n    \n    bytes32 internal keyHash;\n    uint256 internal fee;\n    \n    mapping(bytes32 => string) public objectRequests;//requestId to objectId (object is course or quest)\n    mapping(bytes32 => uint) public numContributors;//requestId to num of contirbutors at time of approval\n    mapping(string => uint8[]) internal objectRarities;//calculated rarities for course or quest\n    mapping(string => uint256) public blockNumberResults;//block number request was fulfilled at\n    mapping (string => uint256) public requestResults;\n    mapping (address => bool) whiteList;//approved contracts and users that can call this will eventually be multi-sig holders\n\n    event RandomNumberFulfilled(string indexed _projectId);\n\n    modifier onlyWhiteList(){\n        require(whiteList[_msgSender()], \"not authorized\");\n        _;\n    }\n    \n    /**\n     * Constructor inherits VRFConsumerBase\n     * \n     * Network: Kovan\n     * Chainlink VRF Coordinator address: 0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9\n     * LINK token address:                0xa36085F69e2889c224210F603D836748e7dC0088\n     * Key Hash: 0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4\n     */\n    constructor(address [] memory _reviewers) \n        VRFConsumerBase(\n            0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9, // VRF Coordinator\n            0xa36085F69e2889c224210F603D836748e7dC0088  // LINK Token\n        )\n    {\n        keyHash = 0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4;\n        fee = 0.1 * 10 ** 18; // 0.1 LINK (Varies by network)\n        for (uint i=0; i<_reviewers.length; i++){\n            if(_reviewers[i]!= address(0) && !whiteList[_reviewers[i]]){\n                whiteList[_reviewers[i]] = true;  \n            }\n        }\n    }\n    \n    /** \n     * Requests randomness \n     */\n    function getRandomNumber(string memory _objectId, uint _numContributors) public onlyWhiteList returns (bytes32 requestId){\n        require(LINK.balanceOf(address(this)) >= fee, \"Not enough LINK - fill contract with faucet\");\n        requestId = requestRandomness(keyHash, fee);\n        objectRequests[requestId] = _objectId;\n        numContributors[requestId] = _numContributors;\n        return requestId;\n    }\n\n    /**\n     * Callback function used by VRF Coordinator\n     */\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\n        string memory objectId = objectRequests[requestId];\n        requestResults[objectId] = randomness;\n        blockNumberResults[objectId] = block.number;\n        uint currentIndex = 0;\n        uint8[] memory rarities = new uint8[](numContributors[requestId]);\n\n        while(currentIndex < rarities.length){\n            rarities[currentIndex] = uint8((uint256(keccak256(abi.encode(randomness, currentIndex))) % 100) + 1);\n            currentIndex++;\n        }\n\n        objectRarities[objectId] = rarities;\n        emit RandomNumberFulfilled(objectId);\n    }\n    \n    function addContractToWhiteList(address _newWhiteList) public onlyWhiteList{\n        require(!whiteList[_newWhiteList], \"already approved\");\n        whiteList[_newWhiteList] = true;\n    }\n    \n    function getObjectRarities(string memory _objectId) public view returns(uint8[] memory){\n        return objectRarities[_objectId];\n    }\n\n    // function withdrawLink() external {} - Implement a withdraw function to avoid locking your LINK in the contract\n}"
    },
    "contracts/Verify.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n//import '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\n\ncontract Verify is Ownable {\n    //using ECDSA for bytes32;\n\n    mapping(string => mapping(string => uint256)) public noncesParentIdChildId; //nonce for each parentId and childid (e.g. projectId and  courseId or CourseId and questId)\n    mapping(string => uint256) public thresholdNoncesById; //nonce for each parentId Threshold (e.g. projectId for course and Course Id for quest)\n    address public serverAddress;\n    mapping(address => bool) public approvers;\n\n    constructor(address _serverAddress, address[] memory _approvers) {\n        require(_serverAddress != address(0));\n        serverAddress = _serverAddress;\n        for (uint256 i = 0; i < _approvers.length; i++) {\n            approvers[_approvers[i]] = true;\n        }\n    }\n\n    function getHash(\n        address _senderAddress,\n        string memory _objectId,\n        string memory _parentId,\n        address _contractAddress\n    ) internal view returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(\n                    noncesParentIdChildId[_parentId][_objectId],\n                    _senderAddress,\n                    _contractAddress,\n                    address(this),\n                    _objectId\n                )\n            );\n    }\n\n    function metaDataVerify(\n        address _senderAddress,\n        string memory _objectId,\n        string memory _parentId,\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) public returns (bool) {\n        bytes32 hashRecover = getHash(\n            _senderAddress,\n            _objectId,\n            _parentId,\n            _msgSender()\n        );\n        address signer = ecrecover(\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19Ethereum Signed Message:\\n32\",\n                    hashRecover\n                )\n            ),\n            v,\n            r,\n            s\n        );\n        require(signer == serverAddress, \"SIGNER MUST BE SERVER\");\n        noncesParentIdChildId[_parentId][_objectId]++;\n        return signer == serverAddress;\n    }\n\n    function thresholdVerify(\n        address _senderAddress,\n        string memory _objectId,\n        uint256 votesNeeded,\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) public returns (bool) {\n        bytes32 hashRecover = keccak256(\n            abi.encodePacked(\n                thresholdNoncesById[_objectId],\n                votesNeeded,\n                _senderAddress,\n                _msgSender(),\n                address(this),\n                _objectId\n            )\n        );\n        address signer = ecrecover(\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19Ethereum Signed Message:\\n32\",\n                    hashRecover\n                )\n            ),\n            v,\n            r,\n            s\n        );\n        require(signer == serverAddress, \"SIGNER MUST BE SERVER\");\n        thresholdNoncesById[_objectId]++;\n        return signer == serverAddress;\n    }\n\n    function setServerAddress(address _newAddress) public {\n        require(approvers[_msgSender()], \"must be approved\");\n        require(_newAddress != address(0));\n        serverAddress = _newAddress;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/LinkTokenInterface.sol\";\n\nimport \"./VRFRequestIDBase.sol\";\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\n * @dev want to generate randomness from.\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomness method.\n *\n * @dev The randomness argument to fulfillRandomness is the actual random value\n * @dev generated from your seed.\n *\n * @dev The requestId argument is generated from the keyHash and the seed by\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\n * @dev requests open, you can use the requestId to track which seed is\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.)\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ. (Which is critical to making unpredictable randomness! See the\n * @dev next section.)\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\n * @dev block in which the request is made, user-provided seeds have no impact\n * @dev on its economic security properties. They are only included for API\n * @dev compatability with previous versions of this contract.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request.\n */\nabstract contract VRFConsumerBase is VRFRequestIDBase {\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomness the VRF output\n   */\n  function fulfillRandomness(\n    bytes32 requestId,\n    uint256 randomness\n  )\n    internal\n    virtual;\n\n  /**\n   * @dev In order to keep backwards compatibility we have kept the user\n   * seed field around. We remove the use of it because given that the blockhash\n   * enters later, it overrides whatever randomness the used seed provides.\n   * Given that it adds no security, and can easily lead to misunderstandings,\n   * we have removed it from usage and can now provide a simpler API.\n   */\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\n\n  /**\n   * @notice requestRandomness initiates a request for VRF output given _seed\n   *\n   * @dev The fulfillRandomness method receives the output, once it's provided\n   * @dev by the Oracle, and verified by the vrfCoordinator.\n   *\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\n   * @dev the _fee must exceed the fee specified during registration of the\n   * @dev _keyHash.\n   *\n   * @dev The _seed parameter is vestigial, and is kept only for API\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\n   * @dev your own randomness, here, but it's not necessary because the VRF\n   * @dev oracle will mix the hash of the block containing your request into the\n   * @dev VRF seed it ultimately uses.\n   *\n   * @param _keyHash ID of public key against which randomness is generated\n   * @param _fee The amount of LINK to send with the request\n   *\n   * @return requestId unique ID for this request\n   *\n   * @dev The returned requestId can be used to distinguish responses to\n   * @dev concurrent requests. It is passed as the first argument to\n   * @dev fulfillRandomness.\n   */\n  function requestRandomness(\n    bytes32 _keyHash,\n    uint256 _fee\n  )\n    internal\n    returns (\n      bytes32 requestId\n    )\n  {\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\n    // the hash of the block containing this request to obtain the seed/input\n    // which is finally passed to the VRF cryptographic machinery.\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\n    // nonces[_keyHash] must stay in sync with\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\n    // This provides protection against the user repeating their input seed,\n    // which would result in a predictable/duplicate output, if multiple such\n    // requests appeared in the same block.\n    nonces[_keyHash] = nonces[_keyHash] + 1;\n    return makeRequestId(_keyHash, vRFSeed);\n  }\n\n  LinkTokenInterface immutable internal LINK;\n  address immutable private vrfCoordinator;\n\n  // Nonces for each VRF key from which randomness has been requested.\n  //\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   * @param _link address of LINK token contract\n   *\n   * @dev https://docs.chain.link/docs/link-token-contracts\n   */\n  constructor(\n    address _vrfCoordinator,\n    address _link\n  ) {\n    vrfCoordinator = _vrfCoordinator;\n    LINK = LinkTokenInterface(_link);\n  }\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomness(\n    bytes32 requestId,\n    uint256 randomness\n  )\n    external\n  {\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\n    fulfillRandomness(requestId, randomness);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n\n  function allowance(\n    address owner,\n    address spender\n  )\n    external\n    view\n    returns (\n      uint256 remaining\n    );\n\n  function approve(\n    address spender,\n    uint256 value\n  )\n    external\n    returns (\n      bool success\n    );\n\n  function balanceOf(\n    address owner\n  )\n    external\n    view\n    returns (\n      uint256 balance\n    );\n\n  function decimals()\n    external\n    view\n    returns (\n      uint8 decimalPlaces\n    );\n\n  function decreaseApproval(\n    address spender,\n    uint256 addedValue\n  )\n    external\n    returns (\n      bool success\n    );\n\n  function increaseApproval(\n    address spender,\n    uint256 subtractedValue\n  ) external;\n\n  function name()\n    external\n    view\n    returns (\n      string memory tokenName\n    );\n\n  function symbol()\n    external\n    view\n    returns (\n      string memory tokenSymbol\n    );\n\n  function totalSupply()\n    external\n    view\n    returns (\n      uint256 totalTokensIssued\n    );\n\n  function transfer(\n    address to,\n    uint256 value\n  )\n    external\n    returns (\n      bool success\n    );\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  )\n    external\n    returns (\n      bool success\n    );\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    external\n    returns (\n      bool success\n    );\n\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract VRFRequestIDBase {\n\n  /**\n   * @notice returns the seed which is actually input to the VRF coordinator\n   *\n   * @dev To prevent repetition of VRF output due to repetition of the\n   * @dev user-supplied seed, that seed is combined in a hash with the\n   * @dev user-specific nonce, and the address of the consuming contract. The\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\n   * @dev the final seed, but the nonce does protect against repetition in\n   * @dev requests which are included in a single block.\n   *\n   * @param _userSeed VRF seed input provided by user\n   * @param _requester Address of the requesting contract\n   * @param _nonce User-specific nonce at the time of the request\n   */\n  function makeVRFInputSeed(\n    bytes32 _keyHash,\n    uint256 _userSeed,\n    address _requester,\n    uint256 _nonce\n  )\n    internal\n    pure\n    returns (\n      uint256\n    )\n  {\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\n  }\n\n  /**\n   * @notice Returns the id for this request\n   * @param _keyHash The serviceAgreement ID to be used for this request\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\n   * @return The id for this request\n   *\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\n   * @dev contract, but the one generated by makeVRFInputSeed\n   */\n  function makeRequestId(\n    bytes32 _keyHash,\n    uint256 _vRFInputSeed\n  )\n    internal\n    pure\n    returns (\n      bytes32\n    )\n  {\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\n  }\n}"
    },
    "contracts/BadgeNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title dCompassBadgeNFT\n * @dev NFTs for creating badges\n*/\n\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./RandomNumberConsumer.sol\";\nimport \"./Verify.sol\";\n\ncontract BadgeNFT is ERC721URIStorage, ERC721Enumerable, Ownable{\n    using Counters for Counters.Counter;\n    \n    Counters.Counter private _tokenIds;\n\n    RandomNumberConsumer vrfContract;//VRF Contract used for randomness\n    Verify verifyContract;//Verify contract instance\n    address projectNFTAddress; // address for the projectNFTs\n    mapping (uint => string) public statusStrings;\n    mapping (string => bool) public badgeMinted; // tracks if mint has been done\n    mapping (string => address[]) internal contributors; //contributors to this course\n    uint8[] internal rarityThresholds;//used for getting cutoffs of common, uncommon et al\n    mapping (string => string) public projectIdforCourse;//the projectId that is the root\n    mapping (string => BadgeStatus) public status;\n    mapping (string => uint) public votes;//tally of approved votes per courseId;\n    mapping (string => mapping(address => bool)) public reviewerVotes;//vote record of approved voters for CourseId\n\n    enum BadgeStatus{ NONEXISTENT, PENDING, DENIED, APPROVED }\n\n    event ReceiveCalled(address _caller, uint _value);\n    event BadgeApproved(string indexed _badgeId);\n    event NFTBadgeMinted(address indexed _to, string indexed _tokenURI, string indexed _badgeId);\n\n    constructor(address _vrfAddress, uint8[] memory _initRarities, address _projectNFTAddress, address _verifyAddress)ERC721(\"dCompassBadge\", \"DCOMPB\"){\n        vrfContract = RandomNumberConsumer(_vrfAddress);\n        verifyContract = Verify(_verifyAddress);\n        uint rarityTotal = 0;\n        for (uint8 i =0; i<_initRarities.length; i++){\n            rarityTotal += _initRarities[i];\n        }\n        require(rarityTotal == 100, \"rarities do not add to 100\");\n        rarityThresholds = _initRarities;\n        projectNFTAddress = _projectNFTAddress;\n        statusStrings[0] = \"NONEXISTENT\";\n        statusStrings[1] = \"PENDING\";\n        statusStrings[2] = \"DENIED\";\n        statusStrings[3] = \"APPROVED\";\n    }\n\n    receive() external payable {\n        emit ReceiveCalled(msg.sender, msg.value);\n    }\n\n    function voteForApproval(address[] memory _contributors, string memory _badgeId, string memory _projectId, bytes32[2] memory r, bytes32[2] memory s, uint8[2] memory v, uint votesNeeded) public {\n        require(status[_badgeId] != BadgeStatus.DENIED && status[_badgeId] != BadgeStatus.APPROVED, \"finalized badge\");\n        require(!reviewerVotes[_badgeId][_msgSender()], \"already voted for this badge\");\n        bool voteAllowed = verifyContract.metaDataVerify(_msgSender(), _badgeId, _projectId, r[0], s[0], v[0]);\n        require(voteAllowed, \"sender is not approved project voter\");\n        bool thresholdCheck = verifyContract.thresholdVerify(_msgSender(), _badgeId, votesNeeded, r[1], s[1], v[1]);\n        require(thresholdCheck, \"incorrect votes needed sent\");\n        votes[_badgeId]++;\n        reviewerVotes[_badgeId][_msgSender()] = true;\n        if(status[_badgeId] == BadgeStatus.NONEXISTENT){\n            require(_contributors.length >0, \"empty array\");\n            contributors[_badgeId] = _contributors;\n            projectIdforCourse[_badgeId] = _projectId;\n            if(votesNeeded <= votes[_badgeId]){\n                status[_badgeId] = BadgeStatus.APPROVED;\n                emit BadgeApproved(_badgeId);\n                vrfContract.getRandomNumber(_badgeId, contributors[_badgeId].length);\n            }\n            else{\n                status[_badgeId] = BadgeStatus.PENDING;\n            }\n        }\n        else{\n            if(votes[_badgeId] >= votesNeeded){\n                status[_badgeId] = BadgeStatus.APPROVED;\n                emit BadgeApproved(_badgeId);\n                vrfContract.getRandomNumber(_badgeId, contributors[_badgeId].length);\n            }  \n        }\n    } \n\n    function createToken(string memory _tokenURI, string memory _badgeId, string memory _projectId, bytes32[2] memory r, bytes32[2] memory s, uint8[2] memory v, uint votesNeeded) public returns(uint[] memory){\n        require(!badgeMinted[_badgeId], \"already minted\");\n        require(vrfContract.blockNumberResults(_badgeId) > 0, \"no request yet\");\n        bool mintAllowed = verifyContract.metaDataVerify(_msgSender(), _badgeId, _projectId, r[0], s[0], v[0]);\n        require(mintAllowed, \"sender is not approved project minter\");\n        if(status[_badgeId]==BadgeStatus.PENDING){\n            require(votesNeeded <= votes[_badgeId], \"not enough votes\");\n            bool thresholdCheck = verifyContract.thresholdVerify(_msgSender(), _badgeId, votesNeeded, r[1], s[1], v[1]);\n            require(thresholdCheck, \"incorrect votes needed sent\");\n            status[_badgeId] = BadgeStatus.APPROVED;\n        }\n        require(status[_badgeId] == BadgeStatus.APPROVED, \"can only mint badges in approved status\");        \n\n        //batch minting\n        uint256[] memory newItems = new uint256[](contributors[_badgeId].length);\n        uint256 newItemId;\n\n        for(uint i =0; i< contributors[_badgeId].length; i++){\n        _tokenIds.increment();\n        newItemId = _tokenIds.current();\n        \n        _mint(contributors[_badgeId][i], newItemId);\n        _setTokenURI(newItemId, _tokenURI);\n        \n        emit NFTBadgeMinted(contributors[_badgeId][i], _tokenURI, _badgeId);\n        }\n        badgeMinted[_badgeId] = true;\n        return newItems;    \n    }\n\n    function walletOfOwner(address _owner) public view returns (uint256[] memory)\n  {\n    uint256 ownerTokenCount = balanceOf(_owner);\n    uint256[] memory tokenIds = new uint256[](ownerTokenCount);\n    for (uint256 i; i < ownerTokenCount; i++) {\n      tokenIds[i] = tokenOfOwnerByIndex(_owner, i);\n    }\n    return tokenIds;\n  }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal override(ERC721Enumerable, ERC721) {\n        super._beforeTokenTransfer(from,to,tokenId);\n    }\n    \n    function _burn(uint256 tokenId) internal override(ERC721URIStorage, ERC721) {\n        super._burn(tokenId);\n    }\n    \n     function supportsInterface(bytes4 interfaceId) public view override(ERC721Enumerable, ERC721) returns (bool){\n         return super.supportsInterface(interfaceId);\n     }\n     \n     function tokenURI(uint256 tokenId) public view virtual override(ERC721URIStorage, ERC721) returns (string memory){\n         return super.tokenURI(tokenId);\n     }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
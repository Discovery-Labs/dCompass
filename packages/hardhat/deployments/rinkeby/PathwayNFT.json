{
  "address": "0xfa5c02137AE9830C84aDDC5B916B1B9BCbA813e6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_projectNFTAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_verifyAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "_badgeId",
          "type": "string"
        }
      ],
      "name": "NFTPathwayMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "_pathwayId",
          "type": "string"
        }
      ],
      "name": "PathwayApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "ReceiveCalled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pathwayId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_ERC20Address",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "useNative",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addPathwayCreationReward",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_pathwayId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_projectId",
          "type": "string"
        },
        {
          "internalType": "bytes32[2]",
          "name": "r",
          "type": "bytes32[2]"
        },
        {
          "internalType": "bytes32[2]",
          "name": "s",
          "type": "bytes32[2]"
        },
        {
          "internalType": "uint8[2]",
          "name": "v",
          "type": "uint8[2]"
        },
        {
          "internalType": "uint256",
          "name": "votesNeeded",
          "type": "uint256"
        }
      ],
      "name": "createToken",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "nativeRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "pathwayMinted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "projectIdforPathway",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "reviewerVotes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "status",
      "outputs": [
        {
          "internalType": "enum PathwayNFT.PathwayStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "statusStrings",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_contributors",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "_pathwayId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_projectId",
          "type": "string"
        },
        {
          "internalType": "bytes32[2]",
          "name": "r",
          "type": "bytes32[2]"
        },
        {
          "internalType": "bytes32[2]",
          "name": "s",
          "type": "bytes32[2]"
        },
        {
          "internalType": "uint8[2]",
          "name": "v",
          "type": "uint8[2]"
        },
        {
          "internalType": "uint256",
          "name": "votesNeeded",
          "type": "uint256"
        }
      ],
      "name": "voteForApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_pathwayId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_projectId",
          "type": "string"
        },
        {
          "internalType": "bytes32[2]",
          "name": "r",
          "type": "bytes32[2]"
        },
        {
          "internalType": "bytes32[2]",
          "name": "s",
          "type": "bytes32[2]"
        },
        {
          "internalType": "uint8[2]",
          "name": "v",
          "type": "uint8[2]"
        },
        {
          "internalType": "uint256",
          "name": "votesNeeded",
          "type": "uint256"
        }
      ],
      "name": "voteForRejection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "votesReject",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "walletOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd78e36576f109b9d47a3132063146f5371bc8cd53e07b440ba6455fbe144982c",
  "receipt": {
    "to": null,
    "from": "0xD39C3Cdb811f6544067ECFeDEf40855578cA0C52",
    "contractAddress": "0xfa5c02137AE9830C84aDDC5B916B1B9BCbA813e6",
    "transactionIndex": 0,
    "gasUsed": "3692235",
    "logsBloom": "0x
    "blockHash": "0x044062f72b97ab824c436ca97a06551330e17e16bef7f0fab0f396ba2aab7fe2",
    "transactionHash": "0xd78e36576f109b9d47a3132063146f5371bc8cd53e07b440ba6455fbe144982c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10168428,
        "transactionHash": "0xd78e36576f109b9d47a3132063146f5371bc8cd53e07b440ba6455fbe144982c",
        "address": "0xfa5c02137AE9830C84aDDC5B916B1B9BCbA813e6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d39c3cdb811f6544067ecfedef40855578ca0c52"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x044062f72b97ab824c436ca97a06551330e17e16bef7f0fab0f396ba2aab7fe2"
      }
    ],
    "blockNumber": 10168428,
    "cumulativeGasUsed": "3692235",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE1616622133CAE2c59D1358218d427f1EeFb2e16",
    "0x242E4B38d65500aa40c84b19C9e1CB5160FC0230",
    "0x10e3aDcB6b2276d87a99857aaf80d0E779BDBe5E"
  ],
  "numDeployments": 3,
  "solcInputHash": "60d95d77d1127866465377513185c870",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_projectNFTAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verifyAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_badgeId\",\"type\":\"string\"}],\"name\":\"NFTPathwayMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_pathwayId\",\"type\":\"string\"}],\"name\":\"PathwayApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ReceiveCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pathwayId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_ERC20Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useNative\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addPathwayCreationReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_pathwayId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectId\",\"type\":\"string\"},{\"internalType\":\"bytes32[2]\",\"name\":\"r\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"s\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint8[2]\",\"name\":\"v\",\"type\":\"uint8[2]\"},{\"internalType\":\"uint256\",\"name\":\"votesNeeded\",\"type\":\"uint256\"}],\"name\":\"createToken\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nativeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"pathwayMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"projectIdforPathway\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reviewerVotes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum PathwayNFT.PathwayStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"statusStrings\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_pathwayId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectId\",\"type\":\"string\"},{\"internalType\":\"bytes32[2]\",\"name\":\"r\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"s\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint8[2]\",\"name\":\"v\",\"type\":\"uint8[2]\"},{\"internalType\":\"uint256\",\"name\":\"votesNeeded\",\"type\":\"uint256\"}],\"name\":\"voteForApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pathwayId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectId\",\"type\":\"string\"},{\"internalType\":\"bytes32[2]\",\"name\":\"r\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"s\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint8[2]\",\"name\":\"v\",\"type\":\"uint8[2]\"},{\"internalType\":\"uint256\",\"name\":\"votesNeeded\",\"type\":\"uint256\"}],\"name\":\"voteForRejection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"votesReject\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PathwayNFT.sol\":\"PathwayNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface internal immutable LINK;\\n  address private immutable vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\\n    private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0x778c9d88cd6d94ae866c1c3f5fec6022f07e39280d3b6d581c8cceb8a5ac4b1e\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  ) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x2bf1168e8fe548fa990e0aeaf89ef90680f80aa31eeaf901f485df60de51d51b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1cbe42915bc66227970fe99bc0f783eb1de30f2b48f984af01ad45edb9658698\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/PathwayNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title dCompassPathwayNFT\\n * @dev NFTs for creating pathways\\n */\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./RandomNumberConsumer.sol\\\";\\nimport \\\"./Verify.sol\\\";\\n\\ncontract PathwayNFT is ERC721URIStorage, ERC721Enumerable, Ownable {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _tokenIds;\\n\\n    RandomNumberConsumer vrfContract; //VRF Contract used for randomness\\n    Verify verifyContract; //Verify contract instance\\n    address projectNFTAddress; // address for the projectNFTs\\n    address appDiamond;//address needed for checking valid erc20Addrs per chain\\n    mapping(uint256 => string) public statusStrings;\\n    mapping(string => bool) public pathwayMinted; // tracks if mint has been done\\n    mapping(string => address[]) internal contributors; //contributors to this pathway\\n    uint8[] internal rarityThresholds; //used for getting cutoffs of common, uncommon et al\\n    mapping(string => string) public projectIdforPathway; //the projectId that is the root\\n    mapping(string => PathwayStatus) public status;\\n    mapping(string => uint256) public votes; //tally of approved votes per pathwayId;\\n    mapping (string => uint) public votesReject;//tally of rejection votes per pathwayId;\\n    mapping(string => mapping(address => bool)) public reviewerVotes; //vote record of approved voters for PathwayId\\n    mapping (string => uint) public nativeRewards;//pathway rewards in native token\\n    mapping (string => mapping(address => uint)) internal erc20Amounts;//pathway reward Amts in other tokens\\n\\n    enum PathwayStatus {\\n        NONEXISTENT,\\n        PENDING,\\n        DENIED,\\n        APPROVED\\n    }\\n\\n    event ReceiveCalled(address _caller, uint256 _value);\\n    event PathwayApproved(string indexed _pathwayId);\\n    event NFTPathwayMinted(\\n        address indexed _to,\\n        string indexed _tokenURI,\\n        string indexed _badgeId\\n    );\\n\\n    constructor(\\n        address _vrfAddress,\\n        address _projectNFTAddress,\\n        address _verifyAddress\\n    ) ERC721(\\\"dCompassBadge\\\", \\\"DCOMPB\\\") {\\n        vrfContract = RandomNumberConsumer(_vrfAddress);\\n        verifyContract = Verify(_verifyAddress);\\n        //uint rarityTotal = 0;\\n        /*for (uint8 i =0; i<_initRarities.length; i++){\\n            rarityTotal += _initRarities[i];\\n        }\\n        require(rarityTotal == 100, \\\"rarities do not add to 100\\\");\\n        rarityThresholds = _initRarities;*/\\n        projectNFTAddress = _projectNFTAddress;\\n        statusStrings[0] = \\\"NONEXISTENT\\\";\\n        statusStrings[1] = \\\"PENDING\\\";\\n        statusStrings[2] = \\\"DENIED\\\";\\n        statusStrings[3] = \\\"APPROVED\\\";\\n    }\\n\\n    receive() external payable {\\n        emit ReceiveCalled(msg.sender, msg.value);\\n    }\\n\\n    function voteForApproval(\\n        address[] memory _contributors,\\n        string memory _pathwayId,\\n        string memory _projectId,\\n        bytes32[2] memory r,\\n        bytes32[2] memory s,\\n        uint8[2] memory v,\\n        uint256 votesNeeded\\n    ) public {\\n        require(\\n            status[_pathwayId] != PathwayStatus.DENIED &&\\n                status[_pathwayId] != PathwayStatus.APPROVED,\\n            \\\"finalized pathway\\\"\\n        );\\n        require(\\n            !reviewerVotes[_pathwayId][_msgSender()],\\n            \\\"already voted for this pathway\\\"\\n        );\\n        bool voteAllowed = verifyContract.metaDataVerify(\\n            _msgSender(),\\n            _pathwayId,\\n            _projectId,\\n            r[0],\\n            s[0],\\n            v[0]\\n        );\\n        require(voteAllowed, \\\"sender is not approved project voter\\\");\\n        bool thresholdCheck = verifyContract.thresholdVerify(\\n            _msgSender(),\\n            _pathwayId,\\n            votesNeeded,\\n            r[1],\\n            s[1],\\n            v[1]\\n        );\\n        require(thresholdCheck, \\\"incorrect votes needed sent\\\");\\n        votes[_pathwayId]++;\\n        reviewerVotes[_pathwayId][_msgSender()] = true;\\n        if (status[_pathwayId] == PathwayStatus.NONEXISTENT) {\\n            require(_contributors.length > 0, \\\"empty array\\\");\\n            contributors[_pathwayId] = _contributors;\\n            projectIdforPathway[_pathwayId] = _projectId;\\n            if (votesNeeded <= votes[_pathwayId]) {\\n                status[_pathwayId] = PathwayStatus.APPROVED;\\n                emit PathwayApproved(_pathwayId);\\n                //vrfContract.getRandomNumber(_pathwayId, contributors[_pathwayId].length);\\n            } else {\\n                status[_pathwayId] = PathwayStatus.PENDING;\\n            }\\n        } else {\\n            if (votes[_pathwayId] >= votesNeeded) {\\n                status[_pathwayId] = PathwayStatus.APPROVED;\\n                emit PathwayApproved(_pathwayId);\\n                //vrfContract.getRandomNumber(_pathwayId, contributors[_pathwayId].length);\\n            }\\n        }\\n    }\\n\\n    function voteForRejection(string memory _pathwayId, string memory _projectId, bytes32[2] memory r, bytes32[2] memory s, uint8[2] memory v, uint256 votesNeeded) public {\\n        require(status[_pathwayId] == PathwayStatus.PENDING, \\\"pathway not pending\\\");\\n        require(!reviewerVotes[_pathwayId][_msgSender()], \\\"already voted for this pathway\\\");\\n        bool voteAllowed = verifyContract.metaDataVerify(\\n            _msgSender(),\\n            _pathwayId,\\n            _projectId,\\n            r[0],\\n            s[0],\\n            v[0]\\n        );\\n        require(voteAllowed, \\\"sender is not approved project voter\\\");\\n        bool thresholdCheck = verifyContract.thresholdVerify(\\n            _msgSender(),\\n            _pathwayId,\\n            votesNeeded,\\n            r[1],\\n            s[1],\\n            v[1]\\n        );\\n        require(thresholdCheck, \\\"incorrect votes needed sent\\\");\\n        votesReject[_pathwayId]++;\\n        reviewerVotes[_pathwayId][_msgSender()] = true;        \\n        if(votesReject[_pathwayId] >= votesNeeded){\\n            status[_pathwayId] = PathwayStatus.DENIED;\\n            /*(bool success,) = appWallet.call{value : stakePerProject[_projectId]}(\\\"\\\");\\n            require(success, \\\"transfer failed\\\");*/\\n        }\\n    }\\n\\n    //TODO: move these to rewards contract!\\n    function addPathwayCreationReward(string memory _pathwayId, address _ERC20Address, bool useNative, uint amount) external payable{\\n        require (status[_pathwayId] == PathwayStatus.PENDING, \\\"pathway not pending\\\");\\n        if(useNative){\\n            require(msg.value >= amount, \\\"not enough sent\\\");\\n            nativeRewards[_pathwayId] += msg.value;\\n            if(msg.value > amount){\\n                (bool success,) = payable(_msgSender()).call{value : msg.value - amount}(\\\"\\\");\\n                require(success);\\n            }\\n        }\\n        else{\\n            require(_ERC20Address != address(0));\\n            (bool success, bytes memory data) = appDiamond.call(abi.encodeWithSelector(bytes4(keccak256(\\\"checkApprovedERC20PerProjectByChain(string,uint256,address)\\\")), projectIdforPathway[_pathwayId],block.chainid, _ERC20Address));\\n            require(success);\\n            success = abi.decode(data, (bool));\\n            require(success, \\\"ERC20 not approved\\\");\\n            IERC20(_ERC20Address).transferFrom(_msgSender(), address(this), amount);\\n            erc20Amounts[_pathwayId][_ERC20Address] += amount;\\n        }\\n    }\\n\\n    function createToken(\\n        string memory _tokenURI,\\n        string memory _pathwayId,\\n        string memory _projectId,\\n        bytes32[2] memory r,\\n        bytes32[2] memory s,\\n        uint8[2] memory v,\\n        uint256 votesNeeded\\n    ) public returns (uint256[] memory) {\\n        require(!pathwayMinted[_pathwayId], \\\"already minted\\\");\\n        //require(vrfContract.blockNumberResults(_pathwayId) > 0, \\\"no request yet\\\");\\n        bool allowed = verifyContract.metaDataVerify(\\n            _msgSender(),\\n            _pathwayId,\\n            _projectId,\\n            r[0],\\n            s[0],\\n            v[0]\\n        );\\n        require(allowed, \\\"sender is not approved project minter\\\");\\n        if (status[_pathwayId] == PathwayStatus.PENDING) {\\n            require(votesNeeded <= votes[_pathwayId], \\\"not enough votes\\\");\\n            allowed = verifyContract.thresholdVerify(\\n                _msgSender(),\\n                _pathwayId,\\n                votesNeeded,\\n                r[1],\\n                s[1],\\n                v[1]\\n            );\\n            require(allowed, \\\"incorrect votes needed sent\\\");\\n            status[_pathwayId] = PathwayStatus.APPROVED;\\n        }\\n        require(\\n            status[_pathwayId] == PathwayStatus.APPROVED,\\n            \\\"can only mint for pathways in approved status\\\"\\n        );\\n\\n        //TODO : this can later be made a require instead of if statement?\\n        bytes memory data;\\n\\n        (allowed, data) = appDiamond.call(abi.encodeWithSelector(bytes4(keccak256(\\\"projectDiamondAddrs(string)\\\")), _projectId));\\n        require(allowed);\\n        address projectDiamond = abi.decode(data, (address));\\n        if(projectDiamond != address(0)){\\n            (allowed, data) = projectDiamond.call(abi.encodeWithSelector(bytes4(keccak256(\\\"addPathwayId(string)\\\")), _pathwayId));\\n            require(allowed);\\n        }\\n\\n        //batch minting\\n        uint256[] memory newItems = new uint256[](\\n            contributors[_pathwayId].length\\n        );\\n        uint256 newItemId;\\n\\n        for (uint256 i = 0; i < contributors[_pathwayId].length; i++) {\\n            _tokenIds.increment();\\n            newItemId = _tokenIds.current();\\n\\n            _mint(contributors[_pathwayId][i], newItemId);\\n            _setTokenURI(newItemId, _tokenURI);\\n\\n            emit NFTPathwayMinted(\\n                contributors[_pathwayId][i],\\n                _tokenURI,\\n                _pathwayId\\n            );\\n        }\\n        pathwayMinted[_pathwayId] = true;\\n        return newItems;\\n    }\\n\\n    function walletOfOwner(address _owner)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256 ownerTokenCount = balanceOf(_owner);\\n        uint256[] memory tokenIds = new uint256[](ownerTokenCount);\\n        for (uint256 i; i < ownerTokenCount; i++) {\\n            tokenIds[i] = tokenOfOwnerByIndex(_owner, i);\\n        }\\n        return tokenIds;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override(ERC721Enumerable, ERC721) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function _burn(uint256 tokenId)\\n        internal\\n        override(ERC721URIStorage, ERC721)\\n    {\\n        super._burn(tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721Enumerable, ERC721)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override(ERC721URIStorage, ERC721)\\n        returns (string memory)\\n    {\\n        return super.tokenURI(tokenId);\\n    }\\n}\",\"keccak256\":\"0x5cca6b8f90c12f47d51b4cf0feea1cfc548432993331a3cd31f1cd982f568f32\",\"license\":\"MIT\"},\"contracts/RandomNumberConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\ncontract RandomNumberConsumer is VRFConsumerBase, Ownable {\\n    \\n    bytes32 internal keyHash;\\n    uint256 internal fee;\\n    \\n    mapping(bytes32 => string) public objectRequests;//requestId to objectId (object is course or quest)\\n    mapping(bytes32 => uint) public numContributors;//requestId to num of contirbutors at time of approval\\n    mapping(string => uint8[]) internal objectRarities;//calculated rarities for course or quest\\n    mapping(string => uint256) public blockNumberResults;//block number request was fulfilled at\\n    mapping (string => uint256) public requestResults;\\n    mapping (address => bool) whiteList;//approved contracts and users that can call this will eventually be multi-sig holders\\n\\n    event RandomNumberFulfilled(string indexed _projectId);\\n\\n    modifier onlyWhiteList(){\\n        require(whiteList[_msgSender()], \\\"not authorized\\\");\\n        _;\\n    }\\n    \\n    /**\\n     * Constructor inherits VRFConsumerBase\\n     * \\n     * Network: Kovan\\n     * Chainlink VRF Coordinator address: 0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9\\n     * LINK token address:                0xa36085F69e2889c224210F603D836748e7dC0088\\n     * Key Hash: 0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4\\n     */\\n    constructor(address [] memory _reviewers) \\n        VRFConsumerBase(\\n            0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9, // VRF Coordinator\\n            0xa36085F69e2889c224210F603D836748e7dC0088  // LINK Token\\n        )\\n    {\\n        keyHash = 0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4;\\n        fee = 0.1 * 10 ** 18; // 0.1 LINK (Varies by network)\\n        for (uint i=0; i<_reviewers.length; i++){\\n            if(_reviewers[i]!= address(0) && !whiteList[_reviewers[i]]){\\n                whiteList[_reviewers[i]] = true;  \\n            }\\n        }\\n    }\\n    \\n    /** \\n     * Requests randomness \\n     */\\n    function getRandomNumber(string memory _objectId, uint _numContributors) public onlyWhiteList returns (bytes32 requestId){\\n        require(LINK.balanceOf(address(this)) >= fee, \\\"Not enough LINK - fill contract with faucet\\\");\\n        requestId = requestRandomness(keyHash, fee);\\n        objectRequests[requestId] = _objectId;\\n        numContributors[requestId] = _numContributors;\\n        return requestId;\\n    }\\n\\n    /**\\n     * Callback function used by VRF Coordinator\\n     */\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\n        string memory objectId = objectRequests[requestId];\\n        requestResults[objectId] = randomness;\\n        blockNumberResults[objectId] = block.number;\\n        uint currentIndex = 0;\\n        uint8[] memory rarities = new uint8[](numContributors[requestId]);\\n\\n        while(currentIndex < rarities.length){\\n            rarities[currentIndex] = uint8((uint256(keccak256(abi.encode(randomness, currentIndex))) % 100) + 1);\\n            currentIndex++;\\n        }\\n\\n        objectRarities[objectId] = rarities;\\n        emit RandomNumberFulfilled(objectId);\\n    }\\n    \\n    function addContractToWhiteList(address _newWhiteList) public onlyWhiteList{\\n        require(!whiteList[_newWhiteList], \\\"already approved\\\");\\n        whiteList[_newWhiteList] = true;\\n    }\\n    \\n    function getObjectRarities(string memory _objectId) public view returns(uint8[] memory){\\n        return objectRarities[_objectId];\\n    }\\n\\n    // function withdrawLink() external {} - Implement a withdraw function to avoid locking your LINK in the contract\\n}\",\"keccak256\":\"0x705ad5a33cb7d1f2f8f4103b4daf793b67a25d9cadcded6b3a4654b15479e014\",\"license\":\"MIT\"},\"contracts/Verify.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n//import '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\n\\ncontract Verify is Ownable {\\n    //using ECDSA for bytes32;\\n\\n    mapping(string => mapping(string => uint256)) public noncesParentIdChildId; //nonce for each parentId and childid (e.g. projectId and  courseId or CourseId and questId)\\n    mapping(string => uint256) public thresholdNoncesById; //nonce for each parentId Threshold (e.g. projectId for course and Course Id for quest)\\n    mapping(string => uint256) public deployNoncesById; //nonce for each projectId deploy of a diamond\\n    address public serverAddress;\\n    mapping(address => bool) public approvers;\\n\\n    constructor(address _serverAddress, address[] memory _approvers) {\\n        require(_serverAddress != address(0));\\n        serverAddress = _serverAddress;\\n        for (uint256 i = 0; i < _approvers.length; i++) {\\n            approvers[_approvers[i]] = true;\\n        }\\n    }\\n\\n    function getHash(\\n        address _senderAddress,\\n        string memory _objectId,\\n        string memory _parentId,\\n        address _contractAddress\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    noncesParentIdChildId[_parentId][_objectId],\\n                    _senderAddress,\\n                    _contractAddress,\\n                    address(this),\\n                    _objectId\\n                )\\n            );\\n    }\\n\\n    function metaDataVerify(\\n        address _senderAddress,\\n        string memory _objectId,\\n        string memory _parentId,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) public returns (bool) {\\n        bytes32 hashRecover = getHash(\\n            _senderAddress,\\n            _objectId,\\n            _parentId,\\n            _msgSender()\\n        );\\n        address signer = ecrecover(\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    hashRecover\\n                )\\n            ),\\n            v,\\n            r,\\n            s\\n        );\\n        require(signer == serverAddress, \\\"SIGNER MUST BE SERVER\\\");\\n        noncesParentIdChildId[_parentId][_objectId]++;\\n        return signer == serverAddress;\\n    }\\n\\n    function thresholdVerify(\\n        address _senderAddress,\\n        string memory _objectId,\\n        uint256 votesNeeded,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) public returns (bool) {\\n        bytes32 hashRecover = keccak256(\\n            abi.encodePacked(\\n                thresholdNoncesById[_objectId],\\n                votesNeeded,\\n                _senderAddress,\\n                _msgSender(),\\n                address(this),\\n                _objectId\\n            )\\n        );\\n        address signer = ecrecover(\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    hashRecover\\n                )\\n            ),\\n            v,\\n            r,\\n            s\\n        );\\n        require(signer == serverAddress, \\\"SIGNER MUST BE SERVER\\\");\\n        thresholdNoncesById[_objectId]++;\\n        return signer == serverAddress;\\n    }\\n\\n    function deployDiamondVerify(\\n        address _senderAddress,\\n        string memory _projectId,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) public returns (bool) {\\n        bytes32 hashRecover = keccak256(\\n            abi.encodePacked(\\n                deployNoncesById[_projectId],\\n                _senderAddress,\\n                _msgSender(),\\n                address(this),\\n                _projectId\\n            )\\n        );\\n        address signer = ecrecover(\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    hashRecover\\n                )\\n            ),\\n            v,\\n            r,\\n            s\\n        );\\n        require(signer == serverAddress, \\\"SIGNER MUST BE SERVER\\\");\\n        deployNoncesById[_projectId]++;\\n        return signer == serverAddress;\\n    }\\n\\n    function setServerAddress(address _newAddress) public {\\n        require(approvers[_msgSender()], \\\"must be approved\\\");\\n        require(_newAddress != address(0));\\n        serverAddress = _newAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x4feabfae0dcd90a92408c6d250ed845411fd594c947cdf5243fdb2162eda186b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200418a3803806200418a833981016040819052620000349162000384565b604080518082018252600d81526c64436f6d70617373426164676560981b6020808301918252835180850190945260068452652221a7a6a82160d11b9084015281519192916200008791600091620002c1565b5080516200009d906001906020840190620002c1565b505050620000ba620000b46200026b60201b60201c565b6200026f565b600d80546001600160a01b038086166001600160a01b031992831617909255600e8054848416908316179055600f80549285169290911691909117905560408051808201909152600b81526a1393d391561254d511539560aa1b60208083019182526000805260119052905162000153917f4ad3b33220dddc71b994a52d72c06b10862965f7d926534c05c00fb7e819e7b791620002c1565b5060408051808201909152600781526650454e44494e4760c81b60208083019182526001600052601190529051620001ad917f17bc176d2408558f6e4111feebc3cab4e16b63e967be91cde721f4c8a488b55291620002c1565b5060408051808201909152600681526511115392515160d21b6020808301918252600260005260119052905162000206917f08037d7b151cc412d25674a4e66b334d9ae9d2e5517a7feaae5cdb828bf1c62891620002c1565b506040805180820190915260088152671054141493d5915160c21b6020808301918252600360005260119052905162000261917f9bfbaa59f8e10e7868f8b402de9d605a390c45ddaebd8c9de3c6f31e733c87ff91620002c1565b505050506200040b565b3390565b600b80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620002cf90620003ce565b90600052602060002090601f016020900481019282620002f357600085556200033e565b82601f106200030e57805160ff19168380011785556200033e565b828001600101855582156200033e579182015b828111156200033e57825182559160200191906001019062000321565b506200034c92915062000350565b5090565b5b808211156200034c576000815560010162000351565b80516001600160a01b03811681146200037f57600080fd5b919050565b6000806000606084860312156200039a57600080fd5b620003a58462000367565b9250620003b56020850162000367565b9150620003c56040850162000367565b90509250925092565b600181811c90821680620003e357607f821691505b602082108114156200040557634e487b7160e01b600052602260045260246000fd5b50919050565b613d6f806200041b6000396000f3fe6080604052600436106101e75760003560e01c806368aa4dff11610102578063a22cb46511610095578063e8ca64f411610064578063e8ca64f414610651578063e985e9c514610699578063ebcb309a146106e2578063f2fde38b1461070257600080fd5b8063a22cb465146105b9578063b88d4fde146105d9578063b99ef1fa146105f9578063c87b56dd1461063157600080fd5b80638b11cf8a116100d15780638b11cf8a1461051b5780638da5cb5b1461053b57806395d89b41146105595780639e1b567c1461056e57600080fd5b806368aa4dff1461049b57806370a08231146104ae578063715018a6146104ce57806376032f0e146104e357600080fd5b80632f745c591161017a5780635398ba74116101495780635398ba74146103e85780636352211e146104235780636810b4cf1461044357806368929b5c1461046357600080fd5b80632f745c591461036857806342842e0e14610388578063438b6300146103a85780634f6ccce7146103c857600080fd5b8063095ea7b3116101b6578063095ea7b3146102da5780630d0654d9146102fc57806318160ddd1461032957806323b872dd1461034857600080fd5b806301ffc9a71461022b57806304dcd3001461026057806306fdde031461028d578063081812fc146102a257600080fd5b3661022657604080513381523460208201527f64c983f10188c30a885d77970aa5aae9a86e80ef9b459ad33cc620eb5999e070910160405180910390a1005b600080fd5b34801561023757600080fd5b5061024b61024636600461352e565b610722565b60405190151581526020015b60405180910390f35b34801561026c57600080fd5b5061028061027b366004613781565b610733565b604051610257919061395e565b34801561029957600080fd5b506102806107cd565b3480156102ae57600080fd5b506102c26102bd366004613781565b61085f565b6040516001600160a01b039091168152602001610257565b3480156102e657600080fd5b506102fa6102f53660046133a4565b6108ec565b005b34801561030857600080fd5b5061031c6103173660046136ed565b610a02565b60405161025791906138f2565b34801561033557600080fd5b506009545b604051908152602001610257565b34801561035457600080fd5b506102fa6103633660046132b6565b61112d565b34801561037457600080fd5b5061033a6103833660046133a4565b61115e565b34801561039457600080fd5b506102fa6103a33660046132b6565b6111f4565b3480156103b457600080fd5b5061031c6103c3366004613243565b61120f565b3480156103d457600080fd5b5061033a6103e3366004613781565b6112b0565b3480156103f457600080fd5b5061024b610403366004613568565b805160208183018101805160128252928201919093012091525460ff1681565b34801561042f57600080fd5b506102c261043e366004613781565b611343565b34801561044f57600080fd5b506102fa61045e36600461364b565b6113ba565b34801561046f57600080fd5b5061033a61047e366004613568565b805160208183018101805160188252928201919093012091525481565b6102fa6104a93660046135e2565b61172d565b3480156104ba57600080fd5b5061033a6104c9366004613243565b611ae2565b3480156104da57600080fd5b506102fa611b69565b3480156104ef57600080fd5b5061033a6104fe366004613568565b8051602081830181018051601a8252928201919093012091525481565b34801561052757600080fd5b50610280610536366004613568565b611bcf565b34801561054757600080fd5b50600b546001600160a01b03166102c2565b34801561056557600080fd5b50610280611bf3565b34801561057a57600080fd5b5061024b61058936600461359c565b81516020818401810180516019825292820194820194909420919093529091526000908152604090205460ff1681565b3480156105c557600080fd5b506102fa6105d4366004613376565b611c02565b3480156105e557600080fd5b506102fa6105f43660046132f7565b611c11565b34801561060557600080fd5b5061033a610614366004613568565b805160208183018101805160178252928201919093012091525481565b34801561063d57600080fd5b5061028061064c366004613781565b611c43565b34801561065d57600080fd5b5061068c61066c366004613568565b805160208183018101805160168252928201919093012091525460ff1681565b6040516102579190613936565b3480156106a557600080fd5b5061024b6106b436600461327d565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156106ee57600080fd5b506102fa6106fd3660046133d0565b611c4e565b34801561070e57600080fd5b506102fa61071d366004613243565b6121ff565b600061072d826122ca565b92915050565b6011602052600090815260409020805461074c90613c12565b80601f016020809104026020016040519081016040528092919081815260200182805461077890613c12565b80156107c55780601f1061079a576101008083540402835291602001916107c5565b820191906000526020600020905b8154815290600101906020018083116107a857829003601f168201915b505050505081565b6060600080546107dc90613c12565b80601f016020809104026020016040519081016040528092919081815260200182805461080890613c12565b80156108555780601f1061082a57610100808354040283529160200191610855565b820191906000526020600020905b81548152906001019060200180831161083857829003601f168201915b5050505050905090565b600061086a826122ef565b6108d05760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006108f782611343565b9050806001600160a01b0316836001600160a01b031614156109655760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016108c7565b336001600160a01b0382161480610981575061098181336106b4565b6109f35760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016108c7565b6109fd838361230c565b505050565b6060601287604051610a1491906137c6565b9081526040519081900360200190205460ff1615610a655760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481b5a5b9d195960921b60448201526064016108c7565b600e54855185518551604051630903288360e11b81526000946001600160a01b031693631206510693610aa49333938f938f939092909160040161384e565b602060405180830381600087803b158015610abe57600080fd5b505af1158015610ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af69190613511565b905080610b535760405162461bcd60e51b815260206004820152602560248201527f73656e646572206973206e6f7420617070726f7665642070726f6a656374206d60448201526434b73a32b960d91b60648201526084016108c7565b6001601689604051610b6591906137c6565b9081526040519081900360200190205460ff166003811115610b8957610b89613ca8565b1415610ce657601788604051610b9f91906137c6565b908152602001604051809103902054831115610bf05760405162461bcd60e51b815260206004820152601060248201526f6e6f7420656e6f75676820766f74657360801b60448201526064016108c7565b600e546020878101518782015191870151604051632336629f60e11b81526001600160a01b039094169363466cc53e93610c349333938f938b9391906004016138a6565b602060405180830381600087803b158015610c4e57600080fd5b505af1158015610c62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c869190613511565b905080610ca55760405162461bcd60e51b81526004016108c790613b14565b6003601689604051610cb791906137c6565b908152604051908190036020019020805460ff19166001836003811115610ce057610ce0613ca8565b02179055505b6003601689604051610cf891906137c6565b9081526040519081900360200190205460ff166003811115610d1c57610d1c613ca8565b14610d7f5760405162461bcd60e51b815260206004820152602d60248201527f63616e206f6e6c79206d696e7420666f7220706174687761797320696e20617060448201526c70726f7665642073746174757360981b60648201526084016108c7565b6010546040516060916001600160a01b0316907f65a35964691f73fd1604104300b719081f6abd939cb2fc62b713db949a3b240990610dc2908b9060240161395e565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051610e0091906137c6565b6000604051808303816000865af19150503d8060008114610e3d576040519150601f19603f3d011682016040523d82523d6000602084013e610e42565b606091505b50909250905081610e5257600080fd5b600081806020019051810190610e689190613260565b90506001600160a01b03811615610f4557806001600160a01b03167f7c83c11f9ec76afed5429fa5830b7cc482416d05625066ce8f77199e2f5faaee8b604051602401610eb5919061395e565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051610ef391906137c6565b6000604051808303816000865af19150503d8060008114610f30576040519150601f19603f3d011682016040523d82523d6000602084013e610f35565b606091505b50909350915082610f4557600080fd5b600060138b604051610f5791906137c6565b908152604051908190036020019020546001600160401b03811115610f7e57610f7e613cea565b604051908082528060200260200182016040528015610fa7578160200160208202803683370190505b5090506000805b60138d604051610fbe91906137c6565b908152604051908190036020019020548110156110e957610fe3600c80546001019055565b600c54915061103560138e604051610ffb91906137c6565b9081526020016040518091039020828154811061101a5761101a613cd4565b6000918252602090912001546001600160a01b03168361237a565b61103f828f6124b9565b8c60405161104d91906137c6565b60405180910390208e60405161106391906137c6565b604051809103902060138f60405161107b91906137c6565b9081526020016040518091039020838154811061109a5761109a613cd4565b60009182526020822001546040516001600160a01b03909116917f323af8e82495eba529e101c6ea8614b66233683ec49766c746a7203ba276185e91a4806110e181613c4d565b915050610fae565b50600160128d6040516110fc91906137c6565b908152604051908190036020019020805491151560ff19909216919091179055509350505050979650505050505050565b6111373382612544565b6111535760405162461bcd60e51b81526004016108c790613ac3565b6109fd83838361262e565b600061116983611ae2565b82106111cb5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016108c7565b506001600160a01b03919091166000908152600760209081526040808320938352929052205490565b6109fd83838360405180602001604052806000815250611c11565b6060600061121c83611ae2565b90506000816001600160401b0381111561123857611238613cea565b604051908082528060200260200182016040528015611261578160200160208202803683370190505b50905060005b828110156112a857611279858261115e565b82828151811061128b5761128b613cd4565b6020908102919091010152806112a081613c4d565b915050611267565b509392505050565b60006112bb60095490565b821061131e5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016108c7565b6009828154811061133157611331613cd4565b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b03168061072d5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016108c7565b60016016876040516113cc91906137c6565b9081526040519081900360200190205460ff1660038111156113f0576113f0613ca8565b146114335760405162461bcd60e51b815260206004820152601360248201527270617468776179206e6f742070656e64696e6760681b60448201526064016108c7565b60198660405161144391906137c6565b9081526020016040518091039020600061145a3390565b6001600160a01b0316815260208101919091526040016000205460ff16156114c45760405162461bcd60e51b815260206004820152601e60248201527f616c726561647920766f74656420666f7220746869732070617468776179000060448201526064016108c7565b600e54845184518451604051630903288360e11b81526000946001600160a01b0316936312065106936115039333938e938e939092909160040161384e565b602060405180830381600087803b15801561151d57600080fd5b505af1158015611531573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115559190613511565b9050806115745760405162461bcd60e51b81526004016108c790613a7f565b600e546020868101518682015191860151604051632336629f60e11b81526000946001600160a01b03169363466cc53e936115ba9333938f938b939290916004016138a6565b602060405180830381600087803b1580156115d457600080fd5b505af11580156115e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160c9190613511565b90508061162b5760405162461bcd60e51b81526004016108c790613b14565b60188860405161163b91906137c6565b908152604051908190036020019020805490600061165883613c4d565b9190505550600160198960405161166f91906137c6565b908152602001604051809103902060006116863390565b6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550826018896040516116ce91906137c6565b908152602001604051809103902054106117235760026016896040516116f491906137c6565b908152604051908190036020019020805460ff1916600183600381111561171d5761171d613ca8565b02179055505b5050505050505050565b600160168560405161173f91906137c6565b9081526040519081900360200190205460ff16600381111561176357611763613ca8565b146117a65760405162461bcd60e51b815260206004820152601360248201527270617468776179206e6f742070656e64696e6760681b60448201526064016108c7565b811561188c57803410156117ee5760405162461bcd60e51b815260206004820152600f60248201526e1b9bdd08195b9bdd59da081cd95b9d608a1b60448201526064016108c7565b34601a856040516117ff91906137c6565b9081526020016040518091039020600082825461181c9190613ba3565b909155505034811015611887576000336118368334613bcf565b604051600081818185875af1925050503d8060008114611872576040519150601f19603f3d011682016040523d82523d6000602084013e611877565b606091505b505090508061188557600080fd5b505b611adc565b6001600160a01b03831661189f57600080fd5b60105460405160009182916001600160a01b03909116907f11f69039648f0dd87bd7c96fa7501d8c9b90ae27f5d68bb2f9adfc6ae113637a906015906118e6908a906137c6565b9081526040519081900360200181206119059146908a90602401613971565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161194391906137c6565b6000604051808303816000865af19150503d8060008114611980576040519150601f19603f3d011682016040523d82523d6000602084013e611985565b606091505b50915091508161199457600080fd5b808060200190518101906119a89190613511565b9150816119ec5760405162461bcd60e51b8152602060048201526012602482015271115490cc8c081b9bdd08185c1c1c9bdd995960721b60448201526064016108c7565b6001600160a01b0385166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101869052606401602060405180830381600087803b158015611a4a57600080fd5b505af1158015611a5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a829190613511565b5082601b87604051611a9491906137c6565b90815260200160405180910390206000876001600160a01b03166001600160a01b031681526020019081526020016000206000828254611ad49190613ba3565b909155505050505b50505050565b60006001600160a01b038216611b4d5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016108c7565b506001600160a01b031660009081526003602052604090205490565b600b546001600160a01b03163314611bc35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108c7565b611bcd60006127d5565b565b80516020818301810180516015825292820191909301209152805461074c90613c12565b6060600180546107dc90613c12565b611c0d338383612827565b5050565b611c1b3383612544565b611c375760405162461bcd60e51b81526004016108c790613ac3565b611adc848484846128f6565b606061072d82612929565b6002601687604051611c6091906137c6565b9081526040519081900360200190205460ff166003811115611c8457611c84613ca8565b14158015611cc657506003601687604051611c9f91906137c6565b9081526040519081900360200190205460ff166003811115611cc357611cc3613ca8565b14155b611d065760405162461bcd60e51b815260206004820152601160248201527066696e616c697a6564207061746877617960781b60448201526064016108c7565b601986604051611d1691906137c6565b90815260200160405180910390206000611d2d3390565b6001600160a01b0316815260208101919091526040016000205460ff1615611d975760405162461bcd60e51b815260206004820152601e60248201527f616c726561647920766f74656420666f7220746869732070617468776179000060448201526064016108c7565b600e54845184518451604051630903288360e11b81526000946001600160a01b031693631206510693611dd69333938e938e939092909160040161384e565b602060405180830381600087803b158015611df057600080fd5b505af1158015611e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e289190613511565b905080611e475760405162461bcd60e51b81526004016108c790613a7f565b600e546020868101518682015191860151604051632336629f60e11b81526000946001600160a01b03169363466cc53e93611e8d9333938f938b939290916004016138a6565b602060405180830381600087803b158015611ea757600080fd5b505af1158015611ebb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611edf9190613511565b905080611efe5760405162461bcd60e51b81526004016108c790613b14565b601788604051611f0e91906137c6565b9081526040519081900360200190208054906000611f2b83613c4d565b91905055506001601989604051611f4291906137c6565b90815260200160405180910390206000611f593390565b6001600160a01b0316815260208101919091526040016000908120805460ff191692151592909217909155601689604051611f9491906137c6565b9081526040519081900360200190205460ff166003811115611fb857611fb8613ca8565b1415612150576000895111611ffd5760405162461bcd60e51b815260206004820152600b60248201526a656d70747920617272617960a81b60448201526064016108c7565b8860138960405161200e91906137c6565b9081526020016040518091039020908051906020019061202f92919061301d565b508660158960405161204191906137c6565b90815260200160405180910390209080519060200190612062929190613082565b5060178860405161207391906137c6565b908152602001604051809103902054831161210b57600360168960405161209a91906137c6565b908152604051908190036020019020805460ff191660018360038111156120c3576120c3613ca8565b0217905550876040516120d691906137c6565b604051908190038120907fcf525faa39dde00362f50602e2030eb0b110857c69ffaf3c69a504b41962bf0f90600090a26121f4565b600160168960405161211d91906137c6565b908152604051908190036020019020805460ff1916600183600381111561214657612146613ca8565b02179055506121f4565b8260178960405161216191906137c6565b908152602001604051809103902054106121f457600360168960405161218791906137c6565b908152604051908190036020019020805460ff191660018360038111156121b0576121b0613ca8565b0217905550876040516121c391906137c6565b604051908190038120907fcf525faa39dde00362f50602e2030eb0b110857c69ffaf3c69a504b41962bf0f90600090a25b505050505050505050565b600b546001600160a01b031633146122595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108c7565b6001600160a01b0381166122be5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108c7565b6122c7816127d5565b50565b60006001600160e01b0319821663780e9d6360e01b148061072d575061072d82612a98565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061234182611343565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6001600160a01b0382166123d05760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016108c7565b6123d9816122ef565b156124265760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016108c7565b61243260008383612ae8565b6001600160a01b038216600090815260036020526040812080546001929061245b908490613ba3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6124c2826122ef565b6125255760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b60648201526084016108c7565b600082815260066020908152604090912082516109fd92840190613082565b600061254f826122ef565b6125b05760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016108c7565b60006125bb83611343565b9050806001600160a01b0316846001600160a01b031614806125f65750836001600160a01b03166125eb8461085f565b6001600160a01b0316145b8061262657506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b031661264182611343565b6001600160a01b0316146126a55760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016108c7565b6001600160a01b0382166127075760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016108c7565b612712838383612ae8565b61271d60008261230c565b6001600160a01b0383166000908152600360205260408120805460019290612746908490613bcf565b90915550506001600160a01b0382166000908152600360205260408120805460019290612774908490613ba3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600b80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156128895760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016108c7565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61290184848461262e565b61290d84848484612af3565b611adc5760405162461bcd60e51b81526004016108c790613a2d565b6060612934826122ef565b61299a5760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b60648201526084016108c7565b600082815260066020526040812080546129b390613c12565b80601f01602080910402602001604051908101604052809291908181526020018280546129df90613c12565b8015612a2c5780601f10612a0157610100808354040283529160200191612a2c565b820191906000526020600020905b815481529060010190602001808311612a0f57829003601f168201915b505050505090506000612a4a60408051602081019091526000815290565b9050805160001415612a5d575092915050565b815115612a8f578082604051602001612a779291906137e2565b60405160208183030381529060405292505050919050565b61262684612c00565b60006001600160e01b031982166380ac58cd60e01b1480612ac957506001600160e01b03198216635b5e139f60e01b145b8061072d57506301ffc9a760e01b6001600160e01b031983161461072d565b6109fd838383612cd8565b60006001600160a01b0384163b15612bf557604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612b37903390899088908890600401613811565b602060405180830381600087803b158015612b5157600080fd5b505af1925050508015612b81575060408051601f3d908101601f19168201909252612b7e9181019061354b565b60015b612bdb573d808015612baf576040519150601f19603f3d011682016040523d82523d6000602084013e612bb4565b606091505b508051612bd35760405162461bcd60e51b81526004016108c790613a2d565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612626565b506001949350505050565b6060612c0b826122ef565b612c6f5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016108c7565b6000612c8660408051602081019091526000815290565b90506000815111612ca65760405180602001604052806000815250612cd1565b80612cb084612d90565b604051602001612cc19291906137e2565b6040516020818303038152906040525b9392505050565b6001600160a01b038316612d3357612d2e81600980546000838152600a60205260408120829055600182018355919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0155565b612d56565b816001600160a01b0316836001600160a01b031614612d5657612d568382612e8d565b6001600160a01b038216612d6d576109fd81612f2a565b826001600160a01b0316826001600160a01b0316146109fd576109fd8282612fd9565b606081612db45750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612dde5780612dc881613c4d565b9150612dd79050600a83613bbb565b9150612db8565b6000816001600160401b03811115612df857612df8613cea565b6040519080825280601f01601f191660200182016040528015612e22576020820181803683370190505b5090505b841561262657612e37600183613bcf565b9150612e44600a86613c68565b612e4f906030613ba3565b60f81b818381518110612e6457612e64613cd4565b60200101906001600160f81b031916908160001a905350612e86600a86613bbb565b9450612e26565b60006001612e9a84611ae2565b612ea49190613bcf565b600083815260086020526040902054909150808214612ef7576001600160a01b03841660009081526007602090815260408083208584528252808320548484528184208190558352600890915290208190555b5060009182526008602090815260408084208490556001600160a01b039094168352600781528383209183525290812055565b600954600090612f3c90600190613bcf565b6000838152600a602052604081205460098054939450909284908110612f6457612f64613cd4565b906000526020600020015490508060098381548110612f8557612f85613cd4565b6000918252602080832090910192909255828152600a90915260408082208490558582528120556009805480612fbd57612fbd613cbe565b6001900381819060005260206000200160009055905550505050565b6000612fe483611ae2565b6001600160a01b039093166000908152600760209081526040808320868452825280832085905593825260089052919091209190915550565b828054828255906000526020600020908101928215613072579160200282015b8281111561307257825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061303d565b5061307e9291506130f6565b5090565b82805461308e90613c12565b90600052602060002090601f0160209004810192826130b05760008555613072565b82601f106130c957805160ff1916838001178555613072565b82800160010185558215613072579182015b828111156130725782518255916020019190600101906130db565b5b8082111561307e57600081556001016130f7565b60006001600160401b0383111561312457613124613cea565b613137601f8401601f1916602001613b73565b905082815283838301111561314b57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261317357600080fd5b61317b613b4b565b80838560408601111561318d57600080fd5b60005b60028110156131af578135845260209384019390910190600101613190565b509095945050505050565b600082601f8301126131cb57600080fd5b6131d3613b4b565b8083856040860111156131e557600080fd5b6000805b600281101561321757823560ff81168114613202578283fd5b855260209485019492909201916001016131e9565b50919695505050505050565b600082601f83011261323457600080fd5b612cd18383356020850161310b565b60006020828403121561325557600080fd5b8135612cd181613d00565b60006020828403121561327257600080fd5b8151612cd181613d00565b6000806040838503121561329057600080fd5b823561329b81613d00565b915060208301356132ab81613d00565b809150509250929050565b6000806000606084860312156132cb57600080fd5b83356132d681613d00565b925060208401356132e681613d00565b929592945050506040919091013590565b6000806000806080858703121561330d57600080fd5b843561331881613d00565b9350602085013561332881613d00565b92506040850135915060608501356001600160401b0381111561334a57600080fd5b8501601f8101871361335b57600080fd5b61336a8782356020840161310b565b91505092959194509250565b6000806040838503121561338957600080fd5b823561339481613d00565b915060208301356132ab81613d15565b600080604083850312156133b757600080fd5b82356133c281613d00565b946020939093013593505050565b6000806000806000806000610140888a0312156133ec57600080fd5b6001600160401b03808935111561340257600080fd5b883589018a601f82011261341557600080fd5b80358281111561342757613427613cea565b8060051b61343760208201613b73565b80838252602082019150602085018f602085880101111561345757600080fd5b600095505b848610156134855761346e8135613d00565b80358352600195909501946020928301920161345c565b509b5050505060208a013590508181111561349f57600080fd5b6134ab8b828c01613223565b9750506040890135818111156134c057600080fd5b6134cc8b828c01613223565b965050506134dd8960608a01613162565b93506134ec8960a08a01613162565b92506134fb8960e08a016131ba565b9150610120880135905092959891949750929550565b60006020828403121561352357600080fd5b8151612cd181613d15565b60006020828403121561354057600080fd5b8135612cd181613d23565b60006020828403121561355d57600080fd5b8151612cd181613d23565b60006020828403121561357a57600080fd5b81356001600160401b0381111561359057600080fd5b61262684828501613223565b600080604083850312156135af57600080fd5b82356001600160401b038111156135c557600080fd5b6135d185828601613223565b92505060208301356132ab81613d00565b600080600080608085870312156135f857600080fd5b84356001600160401b0381111561360e57600080fd5b61361a87828801613223565b945050602085013561362b81613d00565b9250604085013561363b81613d15565b9396929550929360600135925050565b600080600080600080610120878903121561366557600080fd5b86356001600160401b038082111561367c57600080fd5b6136888a838b01613223565b9750602089013591508082111561369e57600080fd5b506136ab89828a01613223565b9550506136bb8860408901613162565b93506136ca8860808901613162565b92506136d98860c089016131ba565b915061010087013590509295509295509295565b6000806000806000806000610140888a03121561370957600080fd5b87356001600160401b038082111561372057600080fd5b61372c8b838c01613223565b985060208a013591508082111561374257600080fd5b61374e8b838c01613223565b975060408a013591508082111561376457600080fd5b506137718a828b01613223565b9550506134dd8960608a01613162565b60006020828403121561379357600080fd5b5035919050565b600081518084526137b2816020860160208601613be6565b601f01601f19169290920160200192915050565b600082516137d8818460208701613be6565b9190910192915050565b600083516137f4818460208801613be6565b835190830190613808818360208801613be6565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906138449083018461379a565b9695505050505050565b6001600160a01b038716815260c0602082018190526000906138729083018861379a565b8281036040840152613884818861379a565b60608401969096525050608081019290925260ff1660a0909101529392505050565b6001600160a01b038716815260c0602082018190526000906138ca9083018861379a565b905085604083015284606083015283608083015260ff831660a0830152979650505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561392a5783518352928401929184019160010161390e565b50909695505050505050565b602081016004831061395857634e487b7160e01b600052602160045260246000fd5b91905290565b602081526000612cd1602083018461379a565b60608152600080855481600182811c91508083168061399157607f831692505b60208084108214156139b157634e487b7160e01b86526022600452602486fd5b60608801849052608088018280156139d057600181146139e157613a0c565b60ff19871682528282019750613a0c565b60008d81526020902060005b87811015613a06578154848201529086019084016139ed565b83019850505b505087018990525050506001600160a01b0385166040850152509050612626565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526024908201527f73656e646572206973206e6f7420617070726f7665642070726f6a656374207660408201526337ba32b960e11b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601b908201527f696e636f727265637420766f746573206e65656465642073656e740000000000604082015260600190565b604080519081016001600160401b0381118282101715613b6d57613b6d613cea565b60405290565b604051601f8201601f191681016001600160401b0381118282101715613b9b57613b9b613cea565b604052919050565b60008219821115613bb657613bb6613c7c565b500190565b600082613bca57613bca613c92565b500490565b600082821015613be157613be1613c7c565b500390565b60005b83811015613c01578181015183820152602001613be9565b83811115611adc5750506000910152565b600181811c90821680613c2657607f821691505b60208210811415613c4757634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613c6157613c61613c7c565b5060010190565b600082613c7757613c77613c92565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146122c757600080fd5b80151581146122c757600080fd5b6001600160e01b0319811681146122c757600080fdfea26469706673582212207a04ba7e6c6233863e0f98cd1bf6673904249744e2155d8aa552aca608039afa64736f6c63430008070033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1748,
        "contract": "contracts/PathwayNFT.sol:PathwayNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1750,
        "contract": "contracts/PathwayNFT.sol:PathwayNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1754,
        "contract": "contracts/PathwayNFT.sol:PathwayNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1758,
        "contract": "contracts/PathwayNFT.sol:PathwayNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1762,
        "contract": "contracts/PathwayNFT.sol:PathwayNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1768,
        "contract": "contracts/PathwayNFT.sol:PathwayNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3073,
        "contract": "contracts/PathwayNFT.sol:PathwayNFT",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2737,
        "contract": "contracts/PathwayNFT.sol:PathwayNFT",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2741,
        "contract": "contracts/PathwayNFT.sol:PathwayNFT",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2744,
        "contract": "contracts/PathwayNFT.sol:PathwayNFT",
        "label": "_allTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2748,
        "contract": "contracts/PathwayNFT.sol:PathwayNFT",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 273,
        "contract": "contracts/PathwayNFT.sol:PathwayNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 5123,
        "contract": "contracts/PathwayNFT.sol:PathwayNFT",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Counter)3569_storage"
      },
      {
        "astId": 5126,
        "contract": "contracts/PathwayNFT.sol:PathwayNFT",
        "label": "vrfContract",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(RandomNumberConsumer)8252"
      },
      {
        "astId": 5129,
        "contract": "contracts/PathwayNFT.sol:PathwayNFT",
        "label": "verifyContract",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(Verify)8948"
      },
      {
        "astId": 5131,
        "contract": "contracts/PathwayNFT.sol:PathwayNFT",
        "label": "projectNFTAddress",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 5133,
        "contract": "contracts/PathwayNFT.sol:PathwayNFT",
        "label": "appDiamond",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 5137,
        "contract": "contracts/PathwayNFT.sol:PathwayNFT",
        "label": "statusStrings",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 5141,
        "contract": "contracts/PathwayNFT.sol:PathwayNFT",
        "label": "pathwayMinted",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 5146,
        "contract": "contracts/PathwayNFT.sol:PathwayNFT",
        "label": "contributors",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 5149,
        "contract": "contracts/PathwayNFT.sol:PathwayNFT",
        "label": "rarityThresholds",
        "offset": 0,
        "slot": "20",
        "type": "t_array(t_uint8)dyn_storage"
      },
      {
        "astId": 5153,
        "contract": "contracts/PathwayNFT.sol:PathwayNFT",
        "label": "projectIdforPathway",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_string_memory_ptr,t_string_storage)"
      },
      {
        "astId": 5158,
        "contract": "contracts/PathwayNFT.sol:PathwayNFT",
        "label": "status",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_string_memory_ptr,t_enum(PathwayStatus)5187)"
      },
      {
        "astId": 5162,
        "contract": "contracts/PathwayNFT.sol:PathwayNFT",
        "label": "votes",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 5166,
        "contract": "contracts/PathwayNFT.sol:PathwayNFT",
        "label": "votesReject",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 5172,
        "contract": "contracts/PathwayNFT.sol:PathwayNFT",
        "label": "reviewerVotes",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5176,
        "contract": "contracts/PathwayNFT.sol:PathwayNFT",
        "label": "nativeRewards",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 5182,
        "contract": "contracts/PathwayNFT.sol:PathwayNFT",
        "label": "erc20Amounts",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(RandomNumberConsumer)8252": {
        "encoding": "inplace",
        "label": "contract RandomNumberConsumer",
        "numberOfBytes": "20"
      },
      "t_contract(Verify)8948": {
        "encoding": "inplace",
        "label": "contract Verify",
        "numberOfBytes": "20"
      },
      "t_enum(PathwayStatus)5187": {
        "encoding": "inplace",
        "label": "enum PathwayNFT.PathwayStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_enum(PathwayStatus)5187)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => enum PathwayNFT.PathwayStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(PathwayStatus)5187"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_string_memory_ptr,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)3569_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 3568,
            "contract": "contracts/PathwayNFT.sol:PathwayNFT",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
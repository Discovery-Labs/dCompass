{
  "address": "0x2cb03F591Cdc08769ad8c2AdB28AC73B4cFa1EC0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_walletAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_reviewers",
          "type": "address[]"
        },
        {
          "internalType": "uint128",
          "name": "_initialThreshold",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "_questId",
          "type": "string"
        }
      ],
      "name": "NFTProjectMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "_projectId",
          "type": "string"
        }
      ],
      "name": "ProjectApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "ReceiveCalled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_projectId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "newContributor",
          "type": "address"
        }
      ],
      "name": "addProjectContributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reviewer",
          "type": "address"
        }
      ],
      "name": "addReviewer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "firstURIParts",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "secondURIParts",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "_projectId",
          "type": "string"
        }
      ],
      "name": "createToken",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_projectId",
          "type": "string"
        }
      ],
      "name": "getContributors",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multiSigThreshold",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numReviewers",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "projectMinted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "projectThresholds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "reviewerVotes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "reviewers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newName",
          "type": "string"
        }
      ],
      "name": "setStatusString",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_newThreshold",
          "type": "uint128"
        }
      ],
      "name": "setThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "status",
      "outputs": [
        {
          "internalType": "enum ProjectNFT.ProjectStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "statusStrings",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_contributors",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_projectId",
          "type": "string"
        }
      ],
      "name": "voteForApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x25cefbe99e513d77afff8b5ccf50da67847232ace4de57f034f696cf715e5cd1",
  "receipt": {
    "to": null,
    "from": "0x92C29C2888C467e123DBaA6eE9eC77855992a8E2",
    "contractAddress": "0x2cb03F591Cdc08769ad8c2AdB28AC73B4cFa1EC0",
    "transactionIndex": 5,
    "gasUsed": "3284804",
    "logsBloom": "0x
    "blockHash": "0xb5eee87b7180078b52f7d70d81b84c2329ff8baec2ab36c0562cb4a12fd70eda",
    "transactionHash": "0x25cefbe99e513d77afff8b5ccf50da67847232ace4de57f034f696cf715e5cd1",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 29209629,
        "transactionHash": "0x25cefbe99e513d77afff8b5ccf50da67847232ace4de57f034f696cf715e5cd1",
        "address": "0x2cb03F591Cdc08769ad8c2AdB28AC73B4cFa1EC0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000092c29c2888c467e123dbaa6ee9ec77855992a8e2"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xb5eee87b7180078b52f7d70d81b84c2329ff8baec2ab36c0562cb4a12fd70eda"
      }
    ],
    "blockNumber": 29209629,
    "cumulativeGasUsed": "4033999",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x92C29C2888C467e123DBaA6eE9eC77855992a8E2",
    [
      "0x92C29C2888C467e123DBaA6eE9eC77855992a8E2",
      "0xA072f8Bd3847E21C8EdaAf38D7425631a2A63631",
      "0x2c0B08C414A8EE088596832cf64eFcA283D46703",
      "0x16eBE01dCae1338f8d1802C63712C5279e768d29",
      "0x3E31155a1c17c9F85e74828447aec412090a4622",
      "0x4678854dB7421fF1B3C5ACAe6c5C11e73f4F5702",
      "0xDAFf97a69408Cdb4AeFE331eA029a55e189ef60b"
    ],
    10
  ],
  "solcInputHash": "8fc4b6516f55665ff46823cd784174a7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_walletAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_reviewers\",\"type\":\"address[]\"},{\"internalType\":\"uint128\",\"name\":\"_initialThreshold\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_questId\",\"type\":\"string\"}],\"name\":\"NFTProjectMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_projectId\",\"type\":\"string\"}],\"name\":\"ProjectApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ReceiveCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_projectId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"newContributor\",\"type\":\"address\"}],\"name\":\"addProjectContributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reviewer\",\"type\":\"address\"}],\"name\":\"addReviewer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"firstURIParts\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"secondURIParts\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_projectId\",\"type\":\"string\"}],\"name\":\"createToken\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_projectId\",\"type\":\"string\"}],\"name\":\"getContributors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiSigThreshold\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numReviewers\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"projectMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"projectThresholds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reviewerVotes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reviewers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"setStatusString\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_newThreshold\",\"type\":\"uint128\"}],\"name\":\"setThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum ProjectNFT.ProjectStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"statusStrings\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_projectId\",\"type\":\"string\"}],\"name\":\"voteForApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProjectNFT.sol\":\"ProjectNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x188d038a65a945481cc13fe30db334472dfbed61f7959d4478d05feb6303b1ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/ProjectNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title dCompassProjectNFT\\n * @dev NFTs for creating project\\n*/\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract ProjectNFT is ERC721URIStorage, Ownable{\\n    using Counters for Counters.Counter;\\n    \\n    Counters.Counter private _tokenIds;\\n    Counters.Counter private _multiSigRequest;\\n    \\n    mapping (address => bool) public reviewers;\\n    uint128 public multiSigThreshold; //gives minimum multisig percentage (30 = 30% )\\n    uint128 public numReviewers;//number of Reviewers. Needed for threshold calculation\\n    address payable _projectWallet;//sign in a script and also withdraw\\n    enum ProjectStatus{ NONEXISTENT, PENDING, DENIED, APPROVED }\\n    \\n    mapping (string => address[]) internal contributors;\\n    mapping (uint => string) public statusStrings;\\n    mapping (string => ProjectStatus) public status;\\n    mapping (string => uint) public votes;//tally of approved votes;\\n    mapping (string => mapping(address => bool)) public reviewerVotes;//vote record of reviewers for ProjectId\\n    //mapping (string => uint16[]) public rarities; // rarities of each image uint16 used for pakcing purposes\\n    mapping (string => bool) public projectMinted; // tracks if mint has been done\\n    mapping (string => uint) public projectThresholds;// threshold for the project contributors to approve courses\\n    \\n    event NFTProjectMinted(address indexed _to, string indexed _tokenURI, string indexed _questId);\\n    event ReceiveCalled(address _caller, uint _value);\\n    event ProjectApproved(string indexed _projectId);\\n\\n    constructor(address payable _walletAddress, address[] memory _reviewers, uint128 _initialThreshold) ERC721(\\\"dCompassProject\\\", \\\"DCOMPROJ\\\") public{\\n        require(_reviewers.length > 0, \\\"Must have at least 1 reviewer\\\");\\n        require(_initialThreshold > 0 && _initialThreshold <=100, \\\"invalid threshold\\\");\\n        multiSigThreshold = _initialThreshold;\\n        _projectWallet = _walletAddress;\\n        for (uint i=0; i<_reviewers.length; i++){\\n            if(_reviewers[i]!= address(0) && !reviewers[_reviewers[i]]){\\n                reviewers[_reviewers[i]] = true;\\n                numReviewers++;\\n            }\\n        }\\n        statusStrings[0] = \\\"NONEXISTENT\\\";\\n        statusStrings[1] = \\\"PENDING\\\";\\n        statusStrings[2] = \\\"DENIED\\\";\\n        statusStrings[3] = \\\"APPROVED\\\";\\n    } \\n\\n    modifier onlyReviewer(){\\n        require(reviewers[_msgSender()], \\\"not a reviewer\\\");\\n        _;\\n    }\\n\\n    receive() external payable {\\n        emit ReceiveCalled(msg.sender, msg.value);\\n    }\\n    \\n    function voteForApproval(address[] memory _contributors, uint _threshold, string memory _projectId) public onlyReviewer{\\n        require(status[_projectId] != ProjectStatus.DENIED && status[_projectId] != ProjectStatus.APPROVED, \\\"finalized project\\\");\\n        require(!reviewerVotes[_projectId][_msgSender()], \\\"already voted for this project\\\");\\n        votes[_projectId]++;\\n        reviewerVotes[_projectId][_msgSender()] = true;\\n        if(status[_projectId] == ProjectStatus.NONEXISTENT){\\n            require(_contributors.length >0, \\\"empty array\\\");\\n            require(_threshold > 0 && _threshold <= 100, \\\"invalid threshold\\\");\\n            //rarities[_projectId] = _rarities;\\n            contributors[_projectId] = _contributors;\\n            projectThresholds[_projectId] = _threshold;\\n            if(multiSigThreshold*numReviewers/100 == 0){\\n                status[_projectId] = ProjectStatus.APPROVED;\\n                emit ProjectApproved(_projectId);\\n                //approveMint(_projectId);\\n            }\\n            else{\\n                status[_projectId] = ProjectStatus.PENDING;\\n            }\\n        }\\n        else{\\n            uint minVotes = multiSigThreshold*numReviewers/100;\\n            if(minVotes * 100 < multiSigThreshold*numReviewers){\\n                minVotes++;\\n            }\\n            if(votes[_projectId] >= minVotes){\\n                status[_projectId] = ProjectStatus.APPROVED;\\n                emit ProjectApproved(_projectId);\\n                //approveMint(_projectId);\\n            }  \\n        }\\n    }\\n    \\n\\n    function createToken(uint32[] memory firstURIParts, uint256[] memory secondURIParts, string memory _projectId) public onlyReviewer returns(uint[] memory){\\n        require(status[_projectId] == ProjectStatus.APPROVED, \\\"job not approved yet\\\");\\n        require(!projectMinted[_projectId], \\\"already minted\\\");\\n        require(firstURIParts.length == secondURIParts.length && firstURIParts.length == contributors[_projectId].length, \\\"incorrect arrs\\\");\\n\\n        //batch minting\\n        uint256[] memory newItems = new uint256[](contributors[_projectId].length);\\n        uint256 newItemId;\\n        string memory _tokenURI;\\n\\n        for(uint i =0; i< contributors[_projectId].length; i++){\\n        _tokenIds.increment();\\n        newItemId = _tokenIds.current();\\n        _tokenURI = string(abi.encodePacked(\\\"ipfs://f\\\",uint32tohexstr(firstURIParts[i]),uint256tohexstr(secondURIParts[i])));\\n        \\n        _mint(contributors[_projectId][i], newItemId);\\n        _setTokenURI(newItemId, _tokenURI);\\n        \\n        emit NFTProjectMinted(contributors[_projectId][i], _tokenURI, _projectId);\\n        }\\n        projectMinted[_projectId] = true;\\n        return newItems;    \\n    }\\n\\n    function addReviewer(address _reviewer) public onlyReviewer {\\n        require (!reviewers[_reviewer], \\\"already reviewer\\\");\\n        reviewers[_reviewer]=true;\\n        numReviewers++;\\n    }\\n\\n    function setStatusString(uint index, string memory newName) external onlyReviewer{\\n        statusStrings[index] = newName;\\n    }\\n\\n    function addProjectContributor(string memory _projectId, address newContributor) external{\\n        require(status[_projectId]!= ProjectStatus.NONEXISTENT, \\\"project doesn't exist\\\");\\n        require(!projectMinted[_projectId], \\\"project already minted\\\");\\n        bool isAllowed = reviewers[_msgSender()];\\n        bool notContributor = true;\\n        if(!isAllowed){\\n            address[] memory currContributors = contributors[_projectId];\\n            for(uint i=0; i<currContributors.length; i++){\\n                if(_msgSender() == currContributors[i]){\\n                    isAllowed = true;\\n                }\\n                if(newContributor == currContributors[i]){\\n                    notContributor = false;\\n                }\\n            }\\n        }\\n        require(isAllowed, \\\"must be a project contributor or reviewer\\\");\\n        require(notContributor, \\\"already a contributor on project\\\");\\n        contributors[_projectId].push(newContributor);\\n    }\\n\\n    function setThreshold(uint128 _newThreshold) public onlyReviewer{\\n        require(_newThreshold > 0 && _newThreshold <=100, \\\"invalid threshold\\\");\\n        multiSigThreshold = _newThreshold;\\n    }\\n    \\n    //helpers for building URIs\\n    function uint8tohexchar(uint8 i) internal pure returns (uint8) {\\n        return (i > 9) ?\\n            (i + 87) : // ascii a-f\\n            (i + 48); // ascii 0-9\\n    }\\n    \\n    function uint32tohexstr(uint32 i) internal pure returns (string memory) {\\n            bytes memory o = new bytes(8);\\n            uint32 mask = 0x0000000f;\\n            uint count =8;\\n            while (count>0){\\n                o[count-1]=bytes1(uint8tohexchar(uint8(i & mask)));\\n                if(count>1){\\n                    i = i >> 4;\\n                }\\n                count--;\\n            }\\n            return string(o);\\n        }\\n \\n    function uint256tohexstr(uint256 i) internal pure returns (string memory) {\\n        bytes memory o = new bytes(64);\\n        uint256 mask = 0x0000000000000000000000000000000f;\\n        \\n        uint count = 64;\\n        while (count>0){\\n            o[count-1]=bytes1(uint8tohexchar(uint8(i & mask)));\\n            if(count>1){\\n                i = i >> 4;\\n            }\\n            count--; \\n        }\\n        return string(o);\\n    }\\n\\n    function getContributors(string memory _projectId) external view returns(address[] memory){\\n        return contributors[_projectId];\\n    }\\n}\",\"keccak256\":\"0x491e7b38c6de9845fae171c73bce1bb62a22cf2d73e7f1563e3aad74aa6c1276\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003aa938038062003aa9833981016040819052620000349162000586565b604080518082018252600f81526e1910dbdb5c185cdcd41c9bda9958dd608a1b6020808301918252835180850190945260088452672221a7a6a82927a560c11b9084015281519192916200008b91600091620004b6565b508051620000a1906001906020840190620004b6565b505050620000be620000b86200046060201b60201c565b62000464565b6000825111620001155760405162461bcd60e51b815260206004820152601d60248201527f4d7573742068617665206174206c65617374203120726576696577657200000060448201526064015b60405180910390fd5b6000816001600160801b03161180156200013957506064816001600160801b031611155b6200017b5760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a59081d1a1c995cda1bdb19607a1b60448201526064016200010c565b600b80546001600160801b0319166001600160801b038316179055600c80546001600160a01b0319166001600160a01b03851617905560005b8251811015620002eb5760006001600160a01b0316838281518110620001de57620001de62000725565b60200260200101516001600160a01b0316141580156200023b5750600a600084838151811062000212576200021262000725565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16155b15620002d6576001600a60008584815181106200025c576200025c62000725565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600b8054600160801b90046001600160801b0316906010620002b083620006c7565b91906101000a8154816001600160801b0302191690836001600160801b03160217905550505b80620002e281620006f1565b915050620001b4565b5060408051808201909152600b81526a1393d391561254d511539560aa1b602080830191825260008052600e9052905162000348917fe710864318d4a32f37d6ce54cb3fadbef648dd12d8dbdf53973564d56b7f881c91620004b6565b5060408051808201909152600781526650454e44494e4760c81b60208083019182526001600052600e90529051620003a2917fa7c5ba7114a813b50159add3a36832908dc83db71d0b9a24c2ad0f83be95820791620004b6565b5060408051808201909152600681526511115392515160d21b60208083019182526002600052600e90529051620003fb917f9adb202b1492743bc00c81d33cdc6423fa8c79109027eb6a845391e8fc1f048191620004b6565b506040805180820190915260088152671054141493d5915160c21b60208083019182526003600052600e9052905162000456917fe0283e559c29e31ee7f56467acc9dd307779c843a883aeeb3bf5c6128c90814491620004b6565b505050506200076a565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620004c4906200068a565b90600052602060002090601f016020900481019282620004e8576000855562000533565b82601f106200050357805160ff191683800117855562000533565b8280016001018555821562000533579182015b828111156200053357825182559160200191906001019062000516565b506200054192915062000545565b5090565b5b8082111562000541576000815560010162000546565b8051620005698162000751565b919050565b80516001600160801b03811681146200056957600080fd5b6000806000606084860312156200059c57600080fd5b8351620005a98162000751565b602085810151919450906001600160401b0380821115620005c957600080fd5b818701915087601f830112620005de57600080fd5b815181811115620005f357620005f36200073b565b8060051b604051601f19603f830116810181811085821117156200061b576200061b6200073b565b604052828152858101935084860182860187018c10156200063b57600080fd5b600095505b83861015620006695762000654816200055c565b85526001959095019493860193860162000640565b5080975050505050505062000681604085016200056e565b90509250925092565b600181811c908216806200069f57607f821691505b60208210811415620006c157634e487b7160e01b600052602260045260246000fd5b50919050565b60006001600160801b0382811680821415620006e757620006e76200070f565b6001019392505050565b60006000198214156200070857620007086200070f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200076757600080fd5b50565b61332f806200077a6000396000f3fe6080604052600436106101e75760003560e01c80638da5cb5b11610102578063b88d4fde11610095578063e985e9c511610064578063e985e9c5146106a9578063ee335b42146106f2578063f2fde38b14610712578063f7cbb1b21461073257600080fd5b8063b88d4fde146105e9578063b99ef1fa14610609578063c87b56dd14610641578063e8ca64f41461066157600080fd5b8063a479030b116100d1578063a479030b14610548578063aaa545d014610575578063b03e4dd5146105a2578063b2f3f80c146105c257600080fd5b80638da5cb5b146104aa57806395d89b41146104c85780639e1b567c146104dd578063a22cb4651461052857600080fd5b806338b686cb1161017a57806370a082311161014957806370a082311461041a578063715018a61461043a57806373a82b5f1461044f57806382171fbe1461046f57600080fd5b806338b686cb1461035c57806342842e0e146103a25780634badfeb2146103c25780636352211e146103fa57600080fd5b8063095ea7b3116101b6578063095ea7b3146102da5780630d46ed21146102fc5780631e97aa5c1461031c57806323b872dd1461033c57600080fd5b806301ffc9a71461022b57806304dcd3001461026057806306fdde031461028d578063081812fc146102a257600080fd5b3661022657604080513381523460208201527f64c983f10188c30a885d77970aa5aae9a86e80ef9b459ad33cc620eb5999e070910160405180910390a1005b600080fd5b34801561023757600080fd5b5061024b610246366004612cae565b610762565b60405190151581526020015b60405180910390f35b34801561026c57600080fd5b5061028061027b366004612d8b565b6107b4565b6040516102579190612f92565b34801561029957600080fd5b5061028061084e565b3480156102ae57600080fd5b506102c26102bd366004612d8b565b6108e0565b6040516001600160a01b039091168152602001610257565b3480156102e657600080fd5b506102fa6102f5366004612ad5565b61096d565b005b34801561030857600080fd5b506102fa610317366004612da4565b610a83565b34801561032857600080fd5b506102fa610337366004612aff565b610ad1565b34801561034857600080fd5b506102fa6103573660046129e1565b611013565b34801561036857600080fd5b50610394610377366004612ce8565b805160208183018101805160138252928201919093012091525481565b604051908152602001610257565b3480156103ae57600080fd5b506102fa6103bd3660046129e1565b611044565b3480156103ce57600080fd5b50600b546103e2906001600160801b031681565b6040516001600160801b039091168152602001610257565b34801561040657600080fd5b506102c2610415366004612d8b565b61105f565b34801561042657600080fd5b50610394610435366004612993565b6110d6565b34801561044657600080fd5b506102fa61115d565b34801561045b57600080fd5b506102fa61046a366004612993565b6111c3565b34801561047b57600080fd5b5061024b61048a366004612ce8565b805160208183018101805160128252928201919093012091525460ff1681565b3480156104b657600080fd5b506007546001600160a01b03166102c2565b3480156104d457600080fd5b506102806112ba565b3480156104e957600080fd5b5061024b6104f8366004612d1d565b81516020818401810180516011825292820194820194909420919093529091526000908152604090205460ff1681565b34801561053457600080fd5b506102fa610543366004612a99565b6112c9565b34801561055457600080fd5b50610568610563366004612bcf565b61138e565b6040516102579190612f32565b34801561058157600080fd5b50610595610590366004612ce8565b611755565b6040516102579190612ee5565b3480156105ae57600080fd5b506102fa6105bd366004612d62565b6117cf565b3480156105ce57600080fd5b50600b546103e290600160801b90046001600160801b031681565b3480156105f557600080fd5b506102fa610604366004612a1d565b61188c565b34801561061557600080fd5b50610394610624366004612ce8565b805160208183018101805160108252928201919093012091525481565b34801561064d57600080fd5b5061028061065c366004612d8b565b6118be565b34801561066d57600080fd5b5061069c61067c366004612ce8565b8051602081830181018051600f8252928201919093012091525460ff1681565b6040516102579190612f6a565b3480156106b557600080fd5b5061024b6106c43660046129ae565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156106fe57600080fd5b506102fa61070d366004612d1d565b611a35565b34801561071e57600080fd5b506102fa61072d366004612993565b611d41565b34801561073e57600080fd5b5061024b61074d366004612993565b600a6020526000908152604090205460ff1681565b60006001600160e01b031982166380ac58cd60e01b148061079357506001600160e01b03198216635b5e139f60e01b145b806107ae57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600e60205260009081526040902080546107cd906131e4565b80601f01602080910402602001604051908101604052809291908181526020018280546107f9906131e4565b80156108465780601f1061081b57610100808354040283529160200191610846565b820191906000526020600020905b81548152906001019060200180831161082957829003601f168201915b505050505081565b60606000805461085d906131e4565b80601f0160208091040260200160405190810160405280929190818152602001828054610889906131e4565b80156108d65780601f106108ab576101008083540402835291602001916108d6565b820191906000526020600020905b8154815290600101906020018083116108b957829003601f168201915b5050505050905090565b60006108eb82611e0c565b6109515760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006109788261105f565b9050806001600160a01b0316836001600160a01b031614156109e65760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610948565b336001600160a01b0382161480610a025750610a0281336106c4565b610a745760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610948565b610a7e8383611e29565b505050565b336000908152600a602052604090205460ff16610ab25760405162461bcd60e51b815260040161094890612fa5565b6000828152600e602090815260409091208251610a7e9284019061279f565b336000908152600a602052604090205460ff16610b005760405162461bcd60e51b815260040161094890612fa5565b6002600f82604051610b129190612e17565b9081526040519081900360200190205460ff166003811115610b3657610b366132a1565b14158015610b7857506003600f82604051610b519190612e17565b9081526040519081900360200190205460ff166003811115610b7557610b756132a1565b14155b610bb85760405162461bcd60e51b8152602060048201526011602482015270199a5b985b1a5e9959081c1c9bda9958dd607a1b6044820152606401610948565b601181604051610bc89190612e17565b90815260200160405180910390206000610bdf3390565b6001600160a01b0316815260208101919091526040016000205460ff1615610c495760405162461bcd60e51b815260206004820152601e60248201527f616c726561647920766f74656420666f7220746869732070726f6a65637400006044820152606401610948565b601081604051610c599190612e17565b9081526040519081900360200190208054906000610c7683613246565b91905055506001601182604051610c8d9190612e17565b90815260200160405180910390206000610ca43390565b6001600160a01b0316815260208101919091526040016000908120805460ff191692151592909217909155600f82604051610cdf9190612e17565b9081526040519081900360200190205460ff166003811115610d0357610d036132a1565b1415610eee576000835111610d485760405162461bcd60e51b815260206004820152600b60248201526a656d70747920617272617960a81b6044820152606401610948565b600082118015610d59575060648211155b610d995760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a59081d1a1c995cda1bdb19607a1b6044820152606401610948565b82600d82604051610daa9190612e17565b90815260200160405180910390209080519060200190610dcb929190612823565b5081601382604051610ddd9190612e17565b90815260405190819003602001902055600b54606490610e0f906001600160801b03600160801b82048116911661313c565b610e199190613102565b6001600160801b0316610ea9576003600f82604051610e389190612e17565b908152604051908190036020019020805460ff19166001836003811115610e6157610e616132a1565b021790555080604051610e749190612e17565b604051908190038120907fae4295c58d61bc95278d93c0ce50389c66907d23767828ed2cf0c1b0cb80483e90600090a2505050565b6001600f82604051610ebb9190612e17565b908152604051908190036020019020805460ff19166001836003811115610ee457610ee46132a1565b0217905550505050565b600b54600090606490610f13906001600160801b03600160801b82048116911661313c565b610f1d9190613102565b600b546001600160801b039182169250610f4191600160801b82048116911661313c565b6001600160801b0316610f5582606461316b565b1015610f695780610f6581613246565b9150505b80601083604051610f7a9190612e17565b9081526020016040518091039020541061100d576003600f83604051610fa09190612e17565b908152604051908190036020019020805460ff19166001836003811115610fc957610fc96132a1565b021790555081604051610fdc9190612e17565b604051908190038120907fae4295c58d61bc95278d93c0ce50389c66907d23767828ed2cf0c1b0cb80483e90600090a25b50505050565b61101d3382611e97565b6110395760405162461bcd60e51b81526004016109489061301f565b610a7e838383611f7d565b610a7e8383836040518060200160405280600081525061188c565b6000818152600260205260408120546001600160a01b0316806107ae5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610948565b60006001600160a01b0382166111415760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610948565b506001600160a01b031660009081526003602052604090205490565b6007546001600160a01b031633146111b75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610948565b6111c1600061211d565b565b336000908152600a602052604090205460ff166111f25760405162461bcd60e51b815260040161094890612fa5565b6001600160a01b0381166000908152600a602052604090205460ff161561124e5760405162461bcd60e51b815260206004820152601060248201526f30b63932b0b23c903932bb34b2bbb2b960811b6044820152606401610948565b6001600160a01b0381166000908152600a60205260409020805460ff19166001179055600b80546001600160801b03600160801b909104169060106112928361321f565b91906101000a8154816001600160801b0302191690836001600160801b031602179055505050565b60606001805461085d906131e4565b6001600160a01b0382163314156113225760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610948565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b336000908152600a602052604090205460609060ff166113c05760405162461bcd60e51b815260040161094890612fa5565b6003600f836040516113d29190612e17565b9081526040519081900360200190205460ff1660038111156113f6576113f66132a1565b1461143a5760405162461bcd60e51b81526020600482015260146024820152731a9bd8881b9bdd08185c1c1c9bdd9959081e595d60621b6044820152606401610948565b60128260405161144a9190612e17565b9081526040519081900360200190205460ff161561149b5760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481b5a5b9d195960921b6044820152606401610948565b825184511480156114cb5750600d826040516114b79190612e17565b908152604051908190036020019020548451145b6115085760405162461bcd60e51b815260206004820152600e60248201526d696e636f7272656374206172727360901b6044820152606401610948565b6000600d8360405161151a9190612e17565b9081526040519081900360200190205467ffffffffffffffff811115611542576115426132cd565b60405190808252806020026020018201604052801561156b578160200160208202803683370190505b5090506000606060005b600d866040516115859190612e17565b90815260405190819003602001902054811015611716576115aa600880546001019055565b60085492506115d18882815181106115c4576115c46132b7565b602002602001015161216f565b6115f38883815181106115e6576115e66132b7565b6020026020010151612212565b604051602001611604929190612e62565b6040516020818303038152906040529150611662600d876040516116289190612e17565b90815260200160405180910390208281548110611647576116476132b7565b6000918252602090912001546001600160a01b0316846122a3565b61166c83836123d6565b8560405161167a9190612e17565b6040518091039020826040516116909190612e17565b6040518091039020600d886040516116a89190612e17565b908152602001604051809103902083815481106116c7576116c76132b7565b60009182526020822001546040516001600160a01b03909116917f7ae1edbeb69892774d94c2010b6183269d48e647bbfddb34d22d5aaf08dd4ad491a48061170e81613246565b915050611575565b5060016012866040516117299190612e17565b908152604051908190036020019020805491151560ff1990921691909117905550909150509392505050565b6060600d826040516117679190612e17565b90815260408051918290036020908101832080548083028501830190935282845291908301828280156117c357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116117a5575b50505050509050919050565b336000908152600a602052604090205460ff166117fe5760405162461bcd60e51b815260040161094890612fa5565b6000816001600160801b031611801561182157506064816001600160801b031611155b6118615760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a59081d1a1c995cda1bdb19607a1b6044820152606401610948565b600b80546fffffffffffffffffffffffffffffffff19166001600160801b0392909216919091179055565b6118963383611e97565b6118b25760405162461bcd60e51b81526004016109489061301f565b61100d84848484612461565b60606118c982611e0c565b61192f5760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b6064820152608401610948565b60008281526006602052604081208054611948906131e4565b80601f0160208091040260200160405190810160405280929190818152602001828054611974906131e4565b80156119c15780601f10611996576101008083540402835291602001916119c1565b820191906000526020600020905b8154815290600101906020018083116119a457829003601f168201915b5050505050905060006119df60408051602081019091526000815290565b90508051600014156119f2575092915050565b815115611a24578082604051602001611a0c929190612e33565b60405160208183030381529060405292505050919050565b611a2d84612494565b949350505050565b6000600f83604051611a479190612e17565b9081526040519081900360200190205460ff166003811115611a6b57611a6b6132a1565b1415611ab15760405162461bcd60e51b81526020600482015260156024820152741c1c9bda9958dd08191bd95cdb89dd08195e1a5cdd605a1b6044820152606401610948565b601282604051611ac19190612e17565b9081526040519081900360200190205460ff1615611b1a5760405162461bcd60e51b81526020600482015260166024820152751c1c9bda9958dd08185b1c9958591e481b5a5b9d195960521b6044820152606401610948565b336000908152600a602052604090205460ff16600181611c40576000600d85604051611b469190612e17565b9081526040805191829003602090810183208054808302850183019093528284529190830182828015611ba257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611b84575b5050505050905060005b8151811015611c3d57818181518110611bc757611bc76132b7565b60200260200101516001600160a01b0316611bdf3390565b6001600160a01b03161415611bf357600193505b818181518110611c0557611c056132b7565b60200260200101516001600160a01b0316856001600160a01b03161415611c2b57600092505b80611c3581613246565b915050611bac565b50505b81611c9f5760405162461bcd60e51b815260206004820152602960248201527f6d75737420626520612070726f6a65637420636f6e7472696275746f72206f72604482015268103932bb34b2bbb2b960b91b6064820152608401610948565b80611cec5760405162461bcd60e51b815260206004820181905260248201527f616c7265616479206120636f6e7472696275746f72206f6e2070726f6a6563746044820152606401610948565b600d84604051611cfc9190612e17565b90815260405160209181900382019020805460018101825560009182529190200180546001600160a01b0319166001600160a01b039490941693909317909255505050565b6007546001600160a01b03163314611d9b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610948565b6001600160a01b038116611e005760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610948565b611e098161211d565b50565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611e5e8261105f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611ea282611e0c565b611f035760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610948565b6000611f0e8361105f565b9050806001600160a01b0316846001600160a01b03161480611f495750836001600160a01b0316611f3e846108e0565b6001600160a01b0316145b80611a2d57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16611a2d565b826001600160a01b0316611f908261105f565b6001600160a01b031614611ff85760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610948565b6001600160a01b03821661205a5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610948565b612065600082611e29565b6001600160a01b038316600090815260036020526040812080546001929061208e90849061318a565b90915550506001600160a01b03821660009081526003602052604081208054600192906120bc9084906130c5565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60408051600880825281830190925260609160009190602082018180368337019050509050600f60085b8015612209576121aa82861661256c565b60f81b836121b960018461318a565b815181106121c9576121c96132b7565b60200101906001600160f81b031916908160001a90535060018111156121f75760048563ffffffff16901c94505b80612201816131cd565b915050612199565b50909392505050565b60408051818152606081810183529160009190602082018180368337019050509050600f60405b80156122095761224a82861661256c565b60f81b8361225960018461318a565b81518110612269576122696132b7565b60200101906001600160f81b031916908160001a905350600181111561229157600485901c94505b8061229b816131cd565b915050612239565b6001600160a01b0382166122f95760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610948565b61230281611e0c565b1561234f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610948565b6001600160a01b03821660009081526003602052604081208054600192906123789084906130c5565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6123df82611e0c565b6124425760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610948565b60008281526006602090815260409091208251610a7e9284019061279f565b61246c848484611f7d565b61247884848484612594565b61100d5760405162461bcd60e51b815260040161094890612fcd565b606061249f82611e0c565b6125035760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610948565b600061251a60408051602081019091526000815290565b9050600081511161253a5760405180602001604052806000815250612565565b80612544846126a1565b604051602001612555929190612e33565b6040516020818303038152906040525b9392505050565b600060098260ff1611612589576125848260306130dd565b6107ae565b6107ae8260576130dd565b60006001600160a01b0384163b1561269657604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906125d8903390899088908890600401612ea8565b602060405180830381600087803b1580156125f257600080fd5b505af1925050508015612622575060408051601f3d908101601f1916820190925261261f91810190612ccb565b60015b61267c573d808015612650576040519150601f19603f3d011682016040523d82523d6000602084013e612655565b606091505b5080516126745760405162461bcd60e51b815260040161094890612fcd565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611a2d565b506001949350505050565b6060816126c55750506040805180820190915260018152600360fc1b602082015290565b8160005b81156126ef57806126d981613246565b91506126e89050600a83613128565b91506126c9565b60008167ffffffffffffffff81111561270a5761270a6132cd565b6040519080825280601f01601f191660200182016040528015612734576020820181803683370190505b5090505b8415611a2d5761274960018361318a565b9150612756600a86613261565b6127619060306130c5565b60f81b818381518110612776576127766132b7565b60200101906001600160f81b031916908160001a905350612798600a86613128565b9450612738565b8280546127ab906131e4565b90600052602060002090601f0160209004810192826127cd5760008555612813565b82601f106127e657805160ff1916838001178555612813565b82800160010185558215612813579182015b828111156128135782518255916020019190600101906127f8565b5061281f929150612878565b5090565b828054828255906000526020600020908101928215612813579160200282015b8281111561281357825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612843565b5b8082111561281f5760008155600101612879565b600067ffffffffffffffff8311156128a7576128a76132cd565b6128ba601f8401601f1916602001613070565b90508281528383830111156128ce57600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b03811681146128fc57600080fd5b919050565b600082601f83011261291257600080fd5b81356020612927612922836130a1565b613070565b80838252828201915082860187848660051b890101111561294757600080fd5b60005b858110156129665781358452928401929084019060010161294a565b5090979650505050505050565b600082601f83011261298457600080fd5b6125658383356020850161288d565b6000602082840312156129a557600080fd5b612565826128e5565b600080604083850312156129c157600080fd5b6129ca836128e5565b91506129d8602084016128e5565b90509250929050565b6000806000606084860312156129f657600080fd5b6129ff846128e5565b9250612a0d602085016128e5565b9150604084013590509250925092565b60008060008060808587031215612a3357600080fd5b612a3c856128e5565b9350612a4a602086016128e5565b925060408501359150606085013567ffffffffffffffff811115612a6d57600080fd5b8501601f81018713612a7e57600080fd5b612a8d8782356020840161288d565b91505092959194509250565b60008060408385031215612aac57600080fd5b612ab5836128e5565b915060208301358015158114612aca57600080fd5b809150509250929050565b60008060408385031215612ae857600080fd5b612af1836128e5565b946020939093013593505050565b600080600060608486031215612b1457600080fd5b833567ffffffffffffffff80821115612b2c57600080fd5b818601915086601f830112612b4057600080fd5b81356020612b50612922836130a1565b8083825282820191508286018b848660051b8901011115612b7057600080fd5b600096505b84871015612b9a57612b86816128e5565b835260019690960195918301918301612b75565b509750508701359450506040860135915080821115612bb857600080fd5b50612bc586828701612973565b9150509250925092565b600080600060608486031215612be457600080fd5b833567ffffffffffffffff80821115612bfc57600080fd5b818601915086601f830112612c1057600080fd5b81356020612c20612922836130a1565b8083825282820191508286018b848660051b8901011115612c4057600080fd5b600096505b84871015612c7557803563ffffffff81168114612c6157600080fd5b835260019690960195918301918301612c45565b5097505087013592505080821115612c8c57600080fd5b612c9887838801612901565b93506040860135915080821115612bb857600080fd5b600060208284031215612cc057600080fd5b8135612565816132e3565b600060208284031215612cdd57600080fd5b8151612565816132e3565b600060208284031215612cfa57600080fd5b813567ffffffffffffffff811115612d1157600080fd5b611a2d84828501612973565b60008060408385031215612d3057600080fd5b823567ffffffffffffffff811115612d4757600080fd5b612d5385828601612973565b9250506129d8602084016128e5565b600060208284031215612d7457600080fd5b81356001600160801b038116811461256557600080fd5b600060208284031215612d9d57600080fd5b5035919050565b60008060408385031215612db757600080fd5b82359150602083013567ffffffffffffffff811115612dd557600080fd5b612de185828601612973565b9150509250929050565b60008151808452612e038160208601602086016131a1565b601f01601f19169290920160200192915050565b60008251612e298184602087016131a1565b9190910192915050565b60008351612e458184602088016131a1565b835190830190612e598183602088016131a1565b01949350505050565b6734b833399d1797b360c11b815260008351612e858160088501602088016131a1565b835190830190612e9c8160088401602088016131a1565b01600801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612edb90830184612deb565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612f265783516001600160a01b031683529284019291840191600101612f01565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612f2657835183529284019291840191600101612f4e565b6020810160048310612f8c57634e487b7160e01b600052602160045260246000fd5b91905290565b6020815260006125656020830184612deb565b6020808252600e908201526d3737ba1030903932bb34b2bbb2b960911b604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff81118282101715613099576130996132cd565b604052919050565b600067ffffffffffffffff8211156130bb576130bb6132cd565b5060051b60200190565b600082198211156130d8576130d8613275565b500190565b600060ff821660ff84168060ff038211156130fa576130fa613275565b019392505050565b60006001600160801b038084168061311c5761311c61328b565b92169190910492915050565b6000826131375761313761328b565b500490565b60006001600160801b038083168185168183048111821515161561316257613162613275565b02949350505050565b600081600019048311821515161561318557613185613275565b500290565b60008282101561319c5761319c613275565b500390565b60005b838110156131bc5781810151838201526020016131a4565b8381111561100d5750506000910152565b6000816131dc576131dc613275565b506000190190565b600181811c908216806131f857607f821691505b6020821081141561321957634e487b7160e01b600052602260045260246000fd5b50919050565b60006001600160801b038083168181141561323c5761323c613275565b6001019392505050565b600060001982141561325a5761325a613275565b5060010190565b6000826132705761327061328b565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114611e0957600080fdfea26469706673582212202602ae9f9e634dfe6d0809c64f9721184d5a4a9a7dcedd627e80d318bb833bb864736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106101e75760003560e01c80638da5cb5b11610102578063b88d4fde11610095578063e985e9c511610064578063e985e9c5146106a9578063ee335b42146106f2578063f2fde38b14610712578063f7cbb1b21461073257600080fd5b8063b88d4fde146105e9578063b99ef1fa14610609578063c87b56dd14610641578063e8ca64f41461066157600080fd5b8063a479030b116100d1578063a479030b14610548578063aaa545d014610575578063b03e4dd5146105a2578063b2f3f80c146105c257600080fd5b80638da5cb5b146104aa57806395d89b41146104c85780639e1b567c146104dd578063a22cb4651461052857600080fd5b806338b686cb1161017a57806370a082311161014957806370a082311461041a578063715018a61461043a57806373a82b5f1461044f57806382171fbe1461046f57600080fd5b806338b686cb1461035c57806342842e0e146103a25780634badfeb2146103c25780636352211e146103fa57600080fd5b8063095ea7b3116101b6578063095ea7b3146102da5780630d46ed21146102fc5780631e97aa5c1461031c57806323b872dd1461033c57600080fd5b806301ffc9a71461022b57806304dcd3001461026057806306fdde031461028d578063081812fc146102a257600080fd5b3661022657604080513381523460208201527f64c983f10188c30a885d77970aa5aae9a86e80ef9b459ad33cc620eb5999e070910160405180910390a1005b600080fd5b34801561023757600080fd5b5061024b610246366004612cae565b610762565b60405190151581526020015b60405180910390f35b34801561026c57600080fd5b5061028061027b366004612d8b565b6107b4565b6040516102579190612f92565b34801561029957600080fd5b5061028061084e565b3480156102ae57600080fd5b506102c26102bd366004612d8b565b6108e0565b6040516001600160a01b039091168152602001610257565b3480156102e657600080fd5b506102fa6102f5366004612ad5565b61096d565b005b34801561030857600080fd5b506102fa610317366004612da4565b610a83565b34801561032857600080fd5b506102fa610337366004612aff565b610ad1565b34801561034857600080fd5b506102fa6103573660046129e1565b611013565b34801561036857600080fd5b50610394610377366004612ce8565b805160208183018101805160138252928201919093012091525481565b604051908152602001610257565b3480156103ae57600080fd5b506102fa6103bd3660046129e1565b611044565b3480156103ce57600080fd5b50600b546103e2906001600160801b031681565b6040516001600160801b039091168152602001610257565b34801561040657600080fd5b506102c2610415366004612d8b565b61105f565b34801561042657600080fd5b50610394610435366004612993565b6110d6565b34801561044657600080fd5b506102fa61115d565b34801561045b57600080fd5b506102fa61046a366004612993565b6111c3565b34801561047b57600080fd5b5061024b61048a366004612ce8565b805160208183018101805160128252928201919093012091525460ff1681565b3480156104b657600080fd5b506007546001600160a01b03166102c2565b3480156104d457600080fd5b506102806112ba565b3480156104e957600080fd5b5061024b6104f8366004612d1d565b81516020818401810180516011825292820194820194909420919093529091526000908152604090205460ff1681565b34801561053457600080fd5b506102fa610543366004612a99565b6112c9565b34801561055457600080fd5b50610568610563366004612bcf565b61138e565b6040516102579190612f32565b34801561058157600080fd5b50610595610590366004612ce8565b611755565b6040516102579190612ee5565b3480156105ae57600080fd5b506102fa6105bd366004612d62565b6117cf565b3480156105ce57600080fd5b50600b546103e290600160801b90046001600160801b031681565b3480156105f557600080fd5b506102fa610604366004612a1d565b61188c565b34801561061557600080fd5b50610394610624366004612ce8565b805160208183018101805160108252928201919093012091525481565b34801561064d57600080fd5b5061028061065c366004612d8b565b6118be565b34801561066d57600080fd5b5061069c61067c366004612ce8565b8051602081830181018051600f8252928201919093012091525460ff1681565b6040516102579190612f6a565b3480156106b557600080fd5b5061024b6106c43660046129ae565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156106fe57600080fd5b506102fa61070d366004612d1d565b611a35565b34801561071e57600080fd5b506102fa61072d366004612993565b611d41565b34801561073e57600080fd5b5061024b61074d366004612993565b600a6020526000908152604090205460ff1681565b60006001600160e01b031982166380ac58cd60e01b148061079357506001600160e01b03198216635b5e139f60e01b145b806107ae57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600e60205260009081526040902080546107cd906131e4565b80601f01602080910402602001604051908101604052809291908181526020018280546107f9906131e4565b80156108465780601f1061081b57610100808354040283529160200191610846565b820191906000526020600020905b81548152906001019060200180831161082957829003601f168201915b505050505081565b60606000805461085d906131e4565b80601f0160208091040260200160405190810160405280929190818152602001828054610889906131e4565b80156108d65780601f106108ab576101008083540402835291602001916108d6565b820191906000526020600020905b8154815290600101906020018083116108b957829003601f168201915b5050505050905090565b60006108eb82611e0c565b6109515760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006109788261105f565b9050806001600160a01b0316836001600160a01b031614156109e65760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610948565b336001600160a01b0382161480610a025750610a0281336106c4565b610a745760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610948565b610a7e8383611e29565b505050565b336000908152600a602052604090205460ff16610ab25760405162461bcd60e51b815260040161094890612fa5565b6000828152600e602090815260409091208251610a7e9284019061279f565b336000908152600a602052604090205460ff16610b005760405162461bcd60e51b815260040161094890612fa5565b6002600f82604051610b129190612e17565b9081526040519081900360200190205460ff166003811115610b3657610b366132a1565b14158015610b7857506003600f82604051610b519190612e17565b9081526040519081900360200190205460ff166003811115610b7557610b756132a1565b14155b610bb85760405162461bcd60e51b8152602060048201526011602482015270199a5b985b1a5e9959081c1c9bda9958dd607a1b6044820152606401610948565b601181604051610bc89190612e17565b90815260200160405180910390206000610bdf3390565b6001600160a01b0316815260208101919091526040016000205460ff1615610c495760405162461bcd60e51b815260206004820152601e60248201527f616c726561647920766f74656420666f7220746869732070726f6a65637400006044820152606401610948565b601081604051610c599190612e17565b9081526040519081900360200190208054906000610c7683613246565b91905055506001601182604051610c8d9190612e17565b90815260200160405180910390206000610ca43390565b6001600160a01b0316815260208101919091526040016000908120805460ff191692151592909217909155600f82604051610cdf9190612e17565b9081526040519081900360200190205460ff166003811115610d0357610d036132a1565b1415610eee576000835111610d485760405162461bcd60e51b815260206004820152600b60248201526a656d70747920617272617960a81b6044820152606401610948565b600082118015610d59575060648211155b610d995760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a59081d1a1c995cda1bdb19607a1b6044820152606401610948565b82600d82604051610daa9190612e17565b90815260200160405180910390209080519060200190610dcb929190612823565b5081601382604051610ddd9190612e17565b90815260405190819003602001902055600b54606490610e0f906001600160801b03600160801b82048116911661313c565b610e199190613102565b6001600160801b0316610ea9576003600f82604051610e389190612e17565b908152604051908190036020019020805460ff19166001836003811115610e6157610e616132a1565b021790555080604051610e749190612e17565b604051908190038120907fae4295c58d61bc95278d93c0ce50389c66907d23767828ed2cf0c1b0cb80483e90600090a2505050565b6001600f82604051610ebb9190612e17565b908152604051908190036020019020805460ff19166001836003811115610ee457610ee46132a1565b0217905550505050565b600b54600090606490610f13906001600160801b03600160801b82048116911661313c565b610f1d9190613102565b600b546001600160801b039182169250610f4191600160801b82048116911661313c565b6001600160801b0316610f5582606461316b565b1015610f695780610f6581613246565b9150505b80601083604051610f7a9190612e17565b9081526020016040518091039020541061100d576003600f83604051610fa09190612e17565b908152604051908190036020019020805460ff19166001836003811115610fc957610fc96132a1565b021790555081604051610fdc9190612e17565b604051908190038120907fae4295c58d61bc95278d93c0ce50389c66907d23767828ed2cf0c1b0cb80483e90600090a25b50505050565b61101d3382611e97565b6110395760405162461bcd60e51b81526004016109489061301f565b610a7e838383611f7d565b610a7e8383836040518060200160405280600081525061188c565b6000818152600260205260408120546001600160a01b0316806107ae5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610948565b60006001600160a01b0382166111415760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610948565b506001600160a01b031660009081526003602052604090205490565b6007546001600160a01b031633146111b75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610948565b6111c1600061211d565b565b336000908152600a602052604090205460ff166111f25760405162461bcd60e51b815260040161094890612fa5565b6001600160a01b0381166000908152600a602052604090205460ff161561124e5760405162461bcd60e51b815260206004820152601060248201526f30b63932b0b23c903932bb34b2bbb2b960811b6044820152606401610948565b6001600160a01b0381166000908152600a60205260409020805460ff19166001179055600b80546001600160801b03600160801b909104169060106112928361321f565b91906101000a8154816001600160801b0302191690836001600160801b031602179055505050565b60606001805461085d906131e4565b6001600160a01b0382163314156113225760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610948565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b336000908152600a602052604090205460609060ff166113c05760405162461bcd60e51b815260040161094890612fa5565b6003600f836040516113d29190612e17565b9081526040519081900360200190205460ff1660038111156113f6576113f66132a1565b1461143a5760405162461bcd60e51b81526020600482015260146024820152731a9bd8881b9bdd08185c1c1c9bdd9959081e595d60621b6044820152606401610948565b60128260405161144a9190612e17565b9081526040519081900360200190205460ff161561149b5760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481b5a5b9d195960921b6044820152606401610948565b825184511480156114cb5750600d826040516114b79190612e17565b908152604051908190036020019020548451145b6115085760405162461bcd60e51b815260206004820152600e60248201526d696e636f7272656374206172727360901b6044820152606401610948565b6000600d8360405161151a9190612e17565b9081526040519081900360200190205467ffffffffffffffff811115611542576115426132cd565b60405190808252806020026020018201604052801561156b578160200160208202803683370190505b5090506000606060005b600d866040516115859190612e17565b90815260405190819003602001902054811015611716576115aa600880546001019055565b60085492506115d18882815181106115c4576115c46132b7565b602002602001015161216f565b6115f38883815181106115e6576115e66132b7565b6020026020010151612212565b604051602001611604929190612e62565b6040516020818303038152906040529150611662600d876040516116289190612e17565b90815260200160405180910390208281548110611647576116476132b7565b6000918252602090912001546001600160a01b0316846122a3565b61166c83836123d6565b8560405161167a9190612e17565b6040518091039020826040516116909190612e17565b6040518091039020600d886040516116a89190612e17565b908152602001604051809103902083815481106116c7576116c76132b7565b60009182526020822001546040516001600160a01b03909116917f7ae1edbeb69892774d94c2010b6183269d48e647bbfddb34d22d5aaf08dd4ad491a48061170e81613246565b915050611575565b5060016012866040516117299190612e17565b908152604051908190036020019020805491151560ff1990921691909117905550909150509392505050565b6060600d826040516117679190612e17565b90815260408051918290036020908101832080548083028501830190935282845291908301828280156117c357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116117a5575b50505050509050919050565b336000908152600a602052604090205460ff166117fe5760405162461bcd60e51b815260040161094890612fa5565b6000816001600160801b031611801561182157506064816001600160801b031611155b6118615760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a59081d1a1c995cda1bdb19607a1b6044820152606401610948565b600b80546fffffffffffffffffffffffffffffffff19166001600160801b0392909216919091179055565b6118963383611e97565b6118b25760405162461bcd60e51b81526004016109489061301f565b61100d84848484612461565b60606118c982611e0c565b61192f5760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b6064820152608401610948565b60008281526006602052604081208054611948906131e4565b80601f0160208091040260200160405190810160405280929190818152602001828054611974906131e4565b80156119c15780601f10611996576101008083540402835291602001916119c1565b820191906000526020600020905b8154815290600101906020018083116119a457829003601f168201915b5050505050905060006119df60408051602081019091526000815290565b90508051600014156119f2575092915050565b815115611a24578082604051602001611a0c929190612e33565b60405160208183030381529060405292505050919050565b611a2d84612494565b949350505050565b6000600f83604051611a479190612e17565b9081526040519081900360200190205460ff166003811115611a6b57611a6b6132a1565b1415611ab15760405162461bcd60e51b81526020600482015260156024820152741c1c9bda9958dd08191bd95cdb89dd08195e1a5cdd605a1b6044820152606401610948565b601282604051611ac19190612e17565b9081526040519081900360200190205460ff1615611b1a5760405162461bcd60e51b81526020600482015260166024820152751c1c9bda9958dd08185b1c9958591e481b5a5b9d195960521b6044820152606401610948565b336000908152600a602052604090205460ff16600181611c40576000600d85604051611b469190612e17565b9081526040805191829003602090810183208054808302850183019093528284529190830182828015611ba257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611b84575b5050505050905060005b8151811015611c3d57818181518110611bc757611bc76132b7565b60200260200101516001600160a01b0316611bdf3390565b6001600160a01b03161415611bf357600193505b818181518110611c0557611c056132b7565b60200260200101516001600160a01b0316856001600160a01b03161415611c2b57600092505b80611c3581613246565b915050611bac565b50505b81611c9f5760405162461bcd60e51b815260206004820152602960248201527f6d75737420626520612070726f6a65637420636f6e7472696275746f72206f72604482015268103932bb34b2bbb2b960b91b6064820152608401610948565b80611cec5760405162461bcd60e51b815260206004820181905260248201527f616c7265616479206120636f6e7472696275746f72206f6e2070726f6a6563746044820152606401610948565b600d84604051611cfc9190612e17565b90815260405160209181900382019020805460018101825560009182529190200180546001600160a01b0319166001600160a01b039490941693909317909255505050565b6007546001600160a01b03163314611d9b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610948565b6001600160a01b038116611e005760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610948565b611e098161211d565b50565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611e5e8261105f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611ea282611e0c565b611f035760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610948565b6000611f0e8361105f565b9050806001600160a01b0316846001600160a01b03161480611f495750836001600160a01b0316611f3e846108e0565b6001600160a01b0316145b80611a2d57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16611a2d565b826001600160a01b0316611f908261105f565b6001600160a01b031614611ff85760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610948565b6001600160a01b03821661205a5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610948565b612065600082611e29565b6001600160a01b038316600090815260036020526040812080546001929061208e90849061318a565b90915550506001600160a01b03821660009081526003602052604081208054600192906120bc9084906130c5565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60408051600880825281830190925260609160009190602082018180368337019050509050600f60085b8015612209576121aa82861661256c565b60f81b836121b960018461318a565b815181106121c9576121c96132b7565b60200101906001600160f81b031916908160001a90535060018111156121f75760048563ffffffff16901c94505b80612201816131cd565b915050612199565b50909392505050565b60408051818152606081810183529160009190602082018180368337019050509050600f60405b80156122095761224a82861661256c565b60f81b8361225960018461318a565b81518110612269576122696132b7565b60200101906001600160f81b031916908160001a905350600181111561229157600485901c94505b8061229b816131cd565b915050612239565b6001600160a01b0382166122f95760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610948565b61230281611e0c565b1561234f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610948565b6001600160a01b03821660009081526003602052604081208054600192906123789084906130c5565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6123df82611e0c565b6124425760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610948565b60008281526006602090815260409091208251610a7e9284019061279f565b61246c848484611f7d565b61247884848484612594565b61100d5760405162461bcd60e51b815260040161094890612fcd565b606061249f82611e0c565b6125035760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610948565b600061251a60408051602081019091526000815290565b9050600081511161253a5760405180602001604052806000815250612565565b80612544846126a1565b604051602001612555929190612e33565b6040516020818303038152906040525b9392505050565b600060098260ff1611612589576125848260306130dd565b6107ae565b6107ae8260576130dd565b60006001600160a01b0384163b1561269657604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906125d8903390899088908890600401612ea8565b602060405180830381600087803b1580156125f257600080fd5b505af1925050508015612622575060408051601f3d908101601f1916820190925261261f91810190612ccb565b60015b61267c573d808015612650576040519150601f19603f3d011682016040523d82523d6000602084013e612655565b606091505b5080516126745760405162461bcd60e51b815260040161094890612fcd565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611a2d565b506001949350505050565b6060816126c55750506040805180820190915260018152600360fc1b602082015290565b8160005b81156126ef57806126d981613246565b91506126e89050600a83613128565b91506126c9565b60008167ffffffffffffffff81111561270a5761270a6132cd565b6040519080825280601f01601f191660200182016040528015612734576020820181803683370190505b5090505b8415611a2d5761274960018361318a565b9150612756600a86613261565b6127619060306130c5565b60f81b818381518110612776576127766132b7565b60200101906001600160f81b031916908160001a905350612798600a86613128565b9450612738565b8280546127ab906131e4565b90600052602060002090601f0160209004810192826127cd5760008555612813565b82601f106127e657805160ff1916838001178555612813565b82800160010185558215612813579182015b828111156128135782518255916020019190600101906127f8565b5061281f929150612878565b5090565b828054828255906000526020600020908101928215612813579160200282015b8281111561281357825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612843565b5b8082111561281f5760008155600101612879565b600067ffffffffffffffff8311156128a7576128a76132cd565b6128ba601f8401601f1916602001613070565b90508281528383830111156128ce57600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b03811681146128fc57600080fd5b919050565b600082601f83011261291257600080fd5b81356020612927612922836130a1565b613070565b80838252828201915082860187848660051b890101111561294757600080fd5b60005b858110156129665781358452928401929084019060010161294a565b5090979650505050505050565b600082601f83011261298457600080fd5b6125658383356020850161288d565b6000602082840312156129a557600080fd5b612565826128e5565b600080604083850312156129c157600080fd5b6129ca836128e5565b91506129d8602084016128e5565b90509250929050565b6000806000606084860312156129f657600080fd5b6129ff846128e5565b9250612a0d602085016128e5565b9150604084013590509250925092565b60008060008060808587031215612a3357600080fd5b612a3c856128e5565b9350612a4a602086016128e5565b925060408501359150606085013567ffffffffffffffff811115612a6d57600080fd5b8501601f81018713612a7e57600080fd5b612a8d8782356020840161288d565b91505092959194509250565b60008060408385031215612aac57600080fd5b612ab5836128e5565b915060208301358015158114612aca57600080fd5b809150509250929050565b60008060408385031215612ae857600080fd5b612af1836128e5565b946020939093013593505050565b600080600060608486031215612b1457600080fd5b833567ffffffffffffffff80821115612b2c57600080fd5b818601915086601f830112612b4057600080fd5b81356020612b50612922836130a1565b8083825282820191508286018b848660051b8901011115612b7057600080fd5b600096505b84871015612b9a57612b86816128e5565b835260019690960195918301918301612b75565b509750508701359450506040860135915080821115612bb857600080fd5b50612bc586828701612973565b9150509250925092565b600080600060608486031215612be457600080fd5b833567ffffffffffffffff80821115612bfc57600080fd5b818601915086601f830112612c1057600080fd5b81356020612c20612922836130a1565b8083825282820191508286018b848660051b8901011115612c4057600080fd5b600096505b84871015612c7557803563ffffffff81168114612c6157600080fd5b835260019690960195918301918301612c45565b5097505087013592505080821115612c8c57600080fd5b612c9887838801612901565b93506040860135915080821115612bb857600080fd5b600060208284031215612cc057600080fd5b8135612565816132e3565b600060208284031215612cdd57600080fd5b8151612565816132e3565b600060208284031215612cfa57600080fd5b813567ffffffffffffffff811115612d1157600080fd5b611a2d84828501612973565b60008060408385031215612d3057600080fd5b823567ffffffffffffffff811115612d4757600080fd5b612d5385828601612973565b9250506129d8602084016128e5565b600060208284031215612d7457600080fd5b81356001600160801b038116811461256557600080fd5b600060208284031215612d9d57600080fd5b5035919050565b60008060408385031215612db757600080fd5b82359150602083013567ffffffffffffffff811115612dd557600080fd5b612de185828601612973565b9150509250929050565b60008151808452612e038160208601602086016131a1565b601f01601f19169290920160200192915050565b60008251612e298184602087016131a1565b9190910192915050565b60008351612e458184602088016131a1565b835190830190612e598183602088016131a1565b01949350505050565b6734b833399d1797b360c11b815260008351612e858160088501602088016131a1565b835190830190612e9c8160088401602088016131a1565b01600801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612edb90830184612deb565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612f265783516001600160a01b031683529284019291840191600101612f01565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612f2657835183529284019291840191600101612f4e565b6020810160048310612f8c57634e487b7160e01b600052602160045260246000fd5b91905290565b6020815260006125656020830184612deb565b6020808252600e908201526d3737ba1030903932bb34b2bbb2b960911b604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff81118282101715613099576130996132cd565b604052919050565b600067ffffffffffffffff8211156130bb576130bb6132cd565b5060051b60200190565b600082198211156130d8576130d8613275565b500190565b600060ff821660ff84168060ff038211156130fa576130fa613275565b019392505050565b60006001600160801b038084168061311c5761311c61328b565b92169190910492915050565b6000826131375761313761328b565b500490565b60006001600160801b038083168185168183048111821515161561316257613162613275565b02949350505050565b600081600019048311821515161561318557613185613275565b500290565b60008282101561319c5761319c613275565b500390565b60005b838110156131bc5781810151838201526020016131a4565b8381111561100d5750506000910152565b6000816131dc576131dc613275565b506000190190565b600181811c908216806131f857607f821691505b6020821081141561321957634e487b7160e01b600052602260045260246000fd5b50919050565b60006001600160801b038083168181141561323c5761323c613275565b6001019392505050565b600060001982141561325a5761325a613275565b5060010190565b6000826132705761327061328b565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114611e0957600080fdfea26469706673582212202602ae9f9e634dfe6d0809c64f9721184d5a4a9a7dcedd627e80d318bb833bb864736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 395,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 397,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 401,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 405,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 409,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 415,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1670,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 273,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 3859,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Counter)2168_storage"
      },
      {
        "astId": 3862,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_multiSigRequest",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(Counter)2168_storage"
      },
      {
        "astId": 3866,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "reviewers",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3868,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "multiSigThreshold",
        "offset": 0,
        "slot": "11",
        "type": "t_uint128"
      },
      {
        "astId": 3870,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "numReviewers",
        "offset": 16,
        "slot": "11",
        "type": "t_uint128"
      },
      {
        "astId": 3872,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_projectWallet",
        "offset": 0,
        "slot": "12",
        "type": "t_address_payable"
      },
      {
        "astId": 3882,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "contributors",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 3886,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "statusStrings",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3891,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "status",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_string_memory_ptr,t_enum(ProjectStatus)3877)"
      },
      {
        "astId": 3895,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "votes",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 3901,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "reviewerVotes",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3905,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "projectMinted",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 3909,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "projectThresholds",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(ProjectStatus)3877": {
        "encoding": "inplace",
        "label": "enum ProjectNFT.ProjectStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_enum(ProjectStatus)3877)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => enum ProjectNFT.ProjectStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(ProjectStatus)3877"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2168_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2167,
            "contract": "contracts/ProjectNFT.sol:ProjectNFT",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
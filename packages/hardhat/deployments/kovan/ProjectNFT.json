{
  "address": "0xD031A08028561EC2329d2CA22595448E31927D1A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_walletAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_reviewers",
          "type": "address[]"
        },
        {
          "internalType": "uint128",
          "name": "_initialThreshold",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "_questId",
          "type": "string"
        }
      ],
      "name": "NFTProjectMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "_projectId",
          "type": "string"
        }
      ],
      "name": "ProjectApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "ReceiveCalled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_projectId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "newContributor",
          "type": "address"
        }
      ],
      "name": "addProjectContributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_projectId",
          "type": "string"
        }
      ],
      "name": "addProjectWallet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reviewer",
          "type": "address"
        }
      ],
      "name": "addReviewer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "firstURIParts",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "secondURIParts",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "_projectId",
          "type": "string"
        }
      ],
      "name": "createToken",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_projectId",
          "type": "string"
        }
      ],
      "name": "getApprovedAddrs",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_projectId",
          "type": "string"
        }
      ],
      "name": "getContributors",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multiSigThreshold",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numReviewers",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "projectMinted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "projectThresholds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "projectWallets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "reviewerVotes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "reviewers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_appDiamond",
          "type": "address"
        }
      ],
      "name": "setAppDiamond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newStake",
          "type": "uint256"
        }
      ],
      "name": "setStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newName",
          "type": "string"
        }
      ],
      "name": "setStatusString",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_newThreshold",
          "type": "uint128"
        }
      ],
      "name": "setThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "status",
      "outputs": [
        {
          "internalType": "enum ProjectNFT.ProjectStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "statusStrings",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_contributors",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "approvedAddrs",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_projectId",
          "type": "string"
        }
      ],
      "name": "voteForApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_projectId",
          "type": "string"
        }
      ],
      "name": "voteForRejection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "votesReject",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4e2660d2bf75fa8e54433ac0e248c592820fe4dd038180e4f6b2878fc4bbfde6",
  "receipt": {
    "to": null,
    "from": "0x7E13623dd5D070967c8568066bE81a3E5bF75226",
    "contractAddress": "0xD031A08028561EC2329d2CA22595448E31927D1A",
    "transactionIndex": 2,
    "gasUsed": "3867526",
    "logsBloom": "0x
    "blockHash": "0x28416e3f17dd43d72f42a8a3cf8fea083b466691035d63ae3b510f6c1bb8a1be",
    "transactionHash": "0x4e2660d2bf75fa8e54433ac0e248c592820fe4dd038180e4f6b2878fc4bbfde6",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 29313905,
        "transactionHash": "0x4e2660d2bf75fa8e54433ac0e248c592820fe4dd038180e4f6b2878fc4bbfde6",
        "address": "0xD031A08028561EC2329d2CA22595448E31927D1A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007e13623dd5d070967c8568066be81a3e5bf75226"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x28416e3f17dd43d72f42a8a3cf8fea083b466691035d63ae3b510f6c1bb8a1be"
      }
    ],
    "blockNumber": 29313905,
    "cumulativeGasUsed": "4911307",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7E13623dd5D070967c8568066bE81a3E5bF75226",
    [
      "0x7E13623dd5D070967c8568066bE81a3E5bF75226",
      "0xA072f8Bd3847E21C8EdaAf38D7425631a2A63631",
      "0x2c0B08C414A8EE088596832cf64eFcA283D46703",
      "0x16eBE01dCae1338f8d1802C63712C5279e768d29",
      "0x3E31155a1c17c9F85e74828447aec412090a4622",
      "0x4678854dB7421fF1B3C5ACAe6c5C11e73f4F5702",
      "0xDAFf97a69408Cdb4AeFE331eA029a55e189ef60b"
    ],
    10
  ],
  "solcInputHash": "8fd304358dbe062342bf4ba0ef2216b2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_walletAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_reviewers\",\"type\":\"address[]\"},{\"internalType\":\"uint128\",\"name\":\"_initialThreshold\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_questId\",\"type\":\"string\"}],\"name\":\"NFTProjectMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_projectId\",\"type\":\"string\"}],\"name\":\"ProjectApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ReceiveCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_projectId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"newContributor\",\"type\":\"address\"}],\"name\":\"addProjectContributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_projectId\",\"type\":\"string\"}],\"name\":\"addProjectWallet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reviewer\",\"type\":\"address\"}],\"name\":\"addReviewer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"firstURIParts\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"secondURIParts\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_projectId\",\"type\":\"string\"}],\"name\":\"createToken\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_projectId\",\"type\":\"string\"}],\"name\":\"getApprovedAddrs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_projectId\",\"type\":\"string\"}],\"name\":\"getContributors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiSigThreshold\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numReviewers\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"projectMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"projectThresholds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"projectWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reviewerVotes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reviewers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_appDiamond\",\"type\":\"address\"}],\"name\":\"setAppDiamond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStake\",\"type\":\"uint256\"}],\"name\":\"setStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"setStatusString\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_newThreshold\",\"type\":\"uint128\"}],\"name\":\"setThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum ProjectNFT.ProjectStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"statusStrings\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"approvedAddrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_projectId\",\"type\":\"string\"}],\"name\":\"voteForApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_projectId\",\"type\":\"string\"}],\"name\":\"voteForRejection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"votesReject\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProjectNFT.sol\":\"ProjectNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x188d038a65a945481cc13fe30db334472dfbed61f7959d4478d05feb6303b1ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/ProjectNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title dCompassProjectNFT\\n * @dev NFTs for creating project\\n*/\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract ProjectNFT is ERC721URIStorage, Ownable{\\n    using Counters for Counters.Counter;\\n    \\n    Counters.Counter private _tokenIds;\\n    Counters.Counter private _multiSigRequest;\\n    \\n    uint public stakeAmount = 0.001 ether;\\n    mapping (address => bool) public reviewers;\\n    uint128 public multiSigThreshold; //gives minimum multisig percentage (30 = 30% )\\n    uint128 public numReviewers;//number of Reviewers. Needed for threshold calculation\\n    address payable appWallet;//sign in a script and also withdraw slashed stakes\\n    address payable appDiamond;//address of the app level diamond\\n    enum ProjectStatus{ NONEXISTENT, PENDING, DENIED, APPROVED }\\n    \\n    mapping (string => address[]) internal contributors;\\n    mapping (string => address[]) internal approvedERC20Addrs;\\n    mapping (string => address) public projectWallets;\\n    mapping (string => uint) internal stakePerProject;\\n    mapping (uint => string) public statusStrings;\\n    mapping (string => ProjectStatus) public status;\\n    mapping (string => uint) public votes;//tally of approved votes;\\n    mapping (string => uint) public votesReject;//tally of rejection votes;\\n    mapping (string => mapping(address => bool)) public reviewerVotes;//vote record of reviewers for ProjectId\\n    //mapping (string => uint16[]) public rarities; // rarities of each image uint16 used for pakcing purposes\\n    mapping (string => bool) public projectMinted; // tracks if mint has been done\\n    mapping (string => uint) public projectThresholds;// threshold for the project contributors to approve courses\\n    \\n    event NFTProjectMinted(address indexed _to, string indexed _tokenURI, string indexed _questId);\\n    event ReceiveCalled(address _caller, uint _value);\\n    event ProjectApproved(string indexed _projectId);\\n\\n    constructor(address payable _walletAddress, address[] memory _reviewers, uint128 _initialThreshold) ERC721(\\\"dCompassProject\\\", \\\"DCOMPROJ\\\"){\\n        require(_reviewers.length > 0, \\\"Must have at least 1 reviewer\\\");\\n        require(_initialThreshold > 0 && _initialThreshold <=100, \\\"invalid threshold\\\");\\n        multiSigThreshold = _initialThreshold;\\n        appWallet = _walletAddress;\\n        for (uint i=0; i<_reviewers.length; i++){\\n            if(_reviewers[i]!= address(0) && !reviewers[_reviewers[i]]){\\n                reviewers[_reviewers[i]] = true;\\n                numReviewers++;\\n            }\\n        }\\n        statusStrings[0] = \\\"NONEXISTENT\\\";\\n        statusStrings[1] = \\\"PENDING\\\";\\n        statusStrings[2] = \\\"DENIED\\\";\\n        statusStrings[3] = \\\"APPROVED\\\";\\n    } \\n\\n    modifier onlyReviewer(){\\n        require(reviewers[_msgSender()], \\\"not a reviewer\\\");\\n        _;\\n    }\\n\\n    receive() external payable {\\n        emit ReceiveCalled(msg.sender, msg.value);\\n    }\\n    \\n    function voteForApproval(address[] memory _contributors,  address[] memory approvedAddrs, uint _threshold, string memory _projectId) public onlyReviewer{\\n        require(status[_projectId] != ProjectStatus.DENIED && status[_projectId] != ProjectStatus.APPROVED, \\\"finalized project\\\");\\n        require(!reviewerVotes[_projectId][_msgSender()], \\\"already voted for this project\\\");\\n        //require (projectWallets[_projectId] != address(0), \\\"no project wallet\\\");\\n        votes[_projectId]++;\\n        reviewerVotes[_projectId][_msgSender()] = true;\\n        if(status[_projectId] == ProjectStatus.NONEXISTENT){\\n            require(_contributors.length >0, \\\"empty array\\\");\\n            require(_threshold > 0 && _threshold <= 100, \\\"invalid threshold\\\");\\n            //rarities[_projectId] = _rarities;\\n            contributors[_projectId] = _contributors;\\n            projectThresholds[_projectId] = _threshold;\\n            approvedERC20Addrs[_projectId] = approvedAddrs;\\n            if(multiSigThreshold*numReviewers/100 == 0){\\n                status[_projectId] = ProjectStatus.APPROVED;\\n                (bool success,) = payable(projectWallets[_projectId]).call{value : stakePerProject[_projectId]}(\\\"\\\");\\n                require(success, \\\"transfer failed\\\");\\n                emit ProjectApproved(_projectId);\\n                //approveMint(_projectId);\\n            }\\n            else{\\n                status[_projectId] = ProjectStatus.PENDING;\\n            }\\n        }\\n        else{\\n            uint minVotes = multiSigThreshold*numReviewers/100;\\n            if(minVotes * 100 < multiSigThreshold*numReviewers){\\n                minVotes++;\\n            }\\n            if(votes[_projectId] >= minVotes){\\n                status[_projectId] = ProjectStatus.APPROVED;\\n                (bool success,) = payable(projectWallets[_projectId]).call{value : stakePerProject[_projectId]}(\\\"\\\");\\n                require(success, \\\"transfer failed\\\");\\n                emit ProjectApproved(_projectId);\\n                //approveMint(_projectId);\\n            }  \\n        }\\n    }\\n\\n    function voteForRejection(string memory _projectId) public onlyReviewer{\\n        require(status[_projectId] == ProjectStatus.PENDING, \\\"project not pending\\\");\\n        require(!reviewerVotes[_projectId][_msgSender()], \\\"already voted for this project\\\");\\n        votesReject[_projectId]++;\\n        reviewerVotes[_projectId][_msgSender()] = true;\\n        uint minVotes = multiSigThreshold*numReviewers/100;\\n        if(minVotes * 100 < multiSigThreshold*numReviewers){\\n            minVotes++;\\n        }\\n        if(votesReject[_projectId] >= minVotes){\\n            status[_projectId] = ProjectStatus.DENIED;\\n            (bool success,) = appWallet.call{value : stakePerProject[_projectId]}(\\\"\\\");\\n            require(success, \\\"transfer failed\\\");\\n        }\\n    }\\n    \\n    function createToken(uint32[] memory firstURIParts, uint256[] memory secondURIParts, string memory _projectId) public onlyReviewer returns(uint[] memory){\\n        require(status[_projectId] == ProjectStatus.APPROVED, \\\"job not approved yet\\\");\\n        require(!projectMinted[_projectId], \\\"already minted\\\");\\n        require(firstURIParts.length == secondURIParts.length && firstURIParts.length == contributors[_projectId].length, \\\"incorrect arrs\\\");\\n\\n        //batch minting\\n        uint256[] memory newItems = new uint256[](contributors[_projectId].length);\\n        uint256 newItemId;\\n        string memory _tokenURI;\\n\\n        for(uint i =0; i< contributors[_projectId].length; i++){\\n        _tokenIds.increment();\\n        newItemId = _tokenIds.current();\\n        _tokenURI = string(abi.encodePacked(\\\"ipfs://f\\\",uint32tohexstr(firstURIParts[i]),uint256tohexstr(secondURIParts[i])));\\n        \\n        _mint(contributors[_projectId][i], newItemId);\\n        _setTokenURI(newItemId, _tokenURI);\\n\\n        //set the approval within app Diamond contract\\n        (bool success, ) = appDiamond.call(abi.encodeWithSelector(bytes4(keccak256(\\\"setApproved(string)\\\")), _projectId));\\n        require(success, \\\"diamond approval failed\\\");\\n        \\n        emit NFTProjectMinted(contributors[_projectId][i], _tokenURI, _projectId);\\n        }\\n        projectMinted[_projectId] = true;\\n        return newItems;    \\n    }\\n\\n    function addProjectWallet(string memory _projectId) external payable{\\n        require (projectWallets[_projectId] == address(0), \\\"already project wallet\\\");\\n        require (msg.value >= stakeAmount, \\\"not enough staked\\\");\\n        projectWallets[_projectId] = _msgSender();\\n        stakePerProject[_projectId] = stakeAmount;\\n        if(msg.value > stakeAmount){\\n            (bool success, ) = payable(_msgSender()).call{value : msg.value - stakeAmount}(\\\"\\\");\\n            require(success, \\\"failed refund\\\");\\n        }\\n    }\\n\\n    function addReviewer(address _reviewer) public onlyReviewer {\\n        require (!reviewers[_reviewer], \\\"already reviewer\\\");\\n        reviewers[_reviewer]=true;\\n        numReviewers++;\\n    }\\n\\n    function setStatusString(uint index, string memory newName) external onlyReviewer{\\n        statusStrings[index] = newName;\\n    }\\n\\n    function setStake(uint newStake) external onlyReviewer{\\n        stakeAmount = newStake;\\n    }\\n\\n    function addProjectContributor(string memory _projectId, address newContributor) external{\\n        require(status[_projectId]!= ProjectStatus.NONEXISTENT, \\\"project doesn't exist\\\");\\n        require(!projectMinted[_projectId], \\\"project already minted\\\");\\n        bool isAllowed = reviewers[_msgSender()];\\n        bool notContributor = true;\\n        if(!isAllowed){\\n            address[] memory currContributors = contributors[_projectId];\\n            for(uint i=0; i<currContributors.length; i++){\\n                if(_msgSender() == currContributors[i]){\\n                    isAllowed = true;\\n                }\\n                if(newContributor == currContributors[i]){\\n                    notContributor = false;\\n                }\\n            }\\n        }\\n        require(isAllowed, \\\"must be a project contributor or reviewer\\\");\\n        require(notContributor, \\\"already a contributor on project\\\");\\n        contributors[_projectId].push(newContributor);\\n    }\\n\\n    function setThreshold(uint128 _newThreshold) public onlyReviewer{\\n        require(_newThreshold > 0 && _newThreshold <=100, \\\"invalid threshold\\\");\\n        multiSigThreshold = _newThreshold;\\n    }\\n    \\n    //helpers for building URIs\\n    function uint8tohexchar(uint8 i) internal pure returns (uint8) {\\n        return (i > 9) ?\\n            (i + 87) : // ascii a-f\\n            (i + 48); // ascii 0-9\\n    }\\n    \\n    function uint32tohexstr(uint32 i) internal pure returns (string memory) {\\n            bytes memory o = new bytes(8);\\n            uint32 mask = 0x0000000f;\\n            uint count =8;\\n            while (count>0){\\n                o[count-1]=bytes1(uint8tohexchar(uint8(i & mask)));\\n                if(count>1){\\n                    i = i >> 4;\\n                }\\n                count--;\\n            }\\n            return string(o);\\n        }\\n \\n    function uint256tohexstr(uint256 i) internal pure returns (string memory) {\\n        bytes memory o = new bytes(64);\\n        uint256 mask = 0x0000000000000000000000000000000f;\\n        \\n        uint count = 64;\\n        while (count>0){\\n            o[count-1]=bytes1(uint8tohexchar(uint8(i & mask)));\\n            if(count>1){\\n                i = i >> 4;\\n            }\\n            count--; \\n        }\\n        return string(o);\\n    }\\n\\n    function getContributors(string memory _projectId) external view returns(address[] memory){\\n        return contributors[_projectId];\\n    }\\n\\n    function getApprovedAddrs(string memory _projectId) external view returns(address[] memory){\\n        return approvedERC20Addrs[_projectId];\\n    }\\n\\n    function setAppDiamond(address payable _appDiamond) external onlyReviewer{\\n        require(_appDiamond != address(0));\\n        appDiamond = _appDiamond;\\n    }\\n}\",\"keccak256\":\"0x7f3fe8fb8b72e28fea009a99ade2dba0f7da7908a996af9510e0504f10999f87\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405266038d7ea4c68000600a553480156200001c57600080fd5b50604051620044d7380380620044d78339810160408190526200003f9162000591565b604080518082018252600f81526e1910dbdb5c185cdcd41c9bda9958dd608a1b6020808301918252835180850190945260088452672221a7a6a82927a560c11b9084015281519192916200009691600091620004c1565b508051620000ac906001906020840190620004c1565b505050620000c9620000c36200046b60201b60201c565b6200046f565b6000825111620001205760405162461bcd60e51b815260206004820152601d60248201527f4d7573742068617665206174206c65617374203120726576696577657200000060448201526064015b60405180910390fd5b6000816001600160801b03161180156200014457506064816001600160801b031611155b620001865760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a59081d1a1c995cda1bdb19607a1b604482015260640162000117565b600c80546001600160801b0319166001600160801b038316179055600d80546001600160a01b0319166001600160a01b03851617905560005b8251811015620002f65760006001600160a01b0316838281518110620001e957620001e962000730565b60200260200101516001600160a01b031614158015620002465750600b60008483815181106200021d576200021d62000730565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16155b15620002e1576001600b600085848151811062000267576200026762000730565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600c8054600160801b90046001600160801b0316906010620002bb83620006d2565b91906101000a8154816001600160801b0302191690836001600160801b03160217905550505b80620002ed81620006fc565b915050620001bf565b5060408051808201909152600b81526a1393d391561254d511539560aa1b60208083019182526000805260139052905162000353917f8fa6efc3be94b5b348b21fea823fe8d100408cee9b7f90524494500445d8ff6c91620004c1565b5060408051808201909152600781526650454e44494e4760c81b60208083019182526001600052601390529051620003ad917f4155c2f711f2cdd34f8262ab8fb9b7020a700fe7b6948222152f7670d1fdf34d91620004c1565b5060408051808201909152600681526511115392515160d21b6020808301918252600260005260139052905162000406917f0b9d2c0c271bb30544eb78c59bdaebdae2728e5f65814c07768a0abe90ed192391620004c1565b506040805180820190915260088152671054141493d5915160c21b6020808301918252600360005260139052905162000461917f0d2a6872ef858a7f8ead18dc4f3f2e8d35c853d47e2816cbb9cdd49202554e0c91620004c1565b5050505062000775565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620004cf9062000695565b90600052602060002090601f016020900481019282620004f357600085556200053e565b82601f106200050e57805160ff19168380011785556200053e565b828001600101855582156200053e579182015b828111156200053e57825182559160200191906001019062000521565b506200054c92915062000550565b5090565b5b808211156200054c576000815560010162000551565b805162000574816200075c565b919050565b80516001600160801b03811681146200057457600080fd5b600080600060608486031215620005a757600080fd5b8351620005b4816200075c565b602085810151919450906001600160401b0380821115620005d457600080fd5b818701915087601f830112620005e957600080fd5b815181811115620005fe57620005fe62000746565b8060051b604051601f19603f8301168101818110858211171562000626576200062662000746565b604052828152858101935084860182860187018c10156200064657600080fd5b600095505b8386101562000674576200065f8162000567565b8552600195909501949386019386016200064b565b508097505050505050506200068c6040850162000579565b90509250925092565b600181811c90821680620006aa57607f821691505b60208210811415620006cc57634e487b7160e01b600052602260045260246000fd5b50919050565b60006001600160801b0382811680821415620006f257620006f26200071a565b6001019392505050565b60006000198214156200071357620007136200071a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200077257600080fd5b50565b613d5280620007856000396000f3fe60806040526004361061023f5760003560e01c806382171fbe1161012e578063b2f3f80c116100ab578063e8ca64f41161006f578063e8ca64f4146107db578063e985e9c514610823578063ee335b421461086c578063f2fde38b1461088c578063f7cbb1b2146108ac57600080fd5b8063b2f3f80c1461071c578063b88d4fde14610743578063b99ef1fa14610763578063c87b56dd1461079b578063d699e96d146107bb57600080fd5b8063a22cb465116100f2578063a22cb4651461066f578063a41641b61461068f578063a479030b146106af578063aaa545d0146106dc578063b03e4dd5146106fc57600080fd5b806382171fbe146105895780638da5cb5b146105c457806395d89b41146105e2578063965f055c146105f75780639e1b567c1461062457600080fd5b806338b686cb116101bc5780636352211e116101805780636352211e146104dc57806368929b5c146104fc57806370a0823114610534578063715018a61461055457806373a82b5f1461056957600080fd5b806338b686cb1461041557806342842e0e1461045b5780634badfeb21461047b57806358c84551146104b357806360c7dc47146104c657600080fd5b80630d46ed21116102035780630d46ed21146103545780630d58dd08146103745780630e3c22cb146103b557806323b872dd146103d557806335d9db53146103f557600080fd5b806301ffc9a71461028357806304dcd300146102b857806306fdde03146102e5578063081812fc146102fa578063095ea7b31461033257600080fd5b3661027e57604080513381523460208201527f64c983f10188c30a885d77970aa5aae9a86e80ef9b459ad33cc620eb5999e070910160405180910390a1005b600080fd5b34801561028f57600080fd5b506102a361029e366004613691565b6108dc565b60405190151581526020015b60405180910390f35b3480156102c457600080fd5b506102d86102d3366004613770565b61092e565b6040516102af9190613977565b3480156102f157600080fd5b506102d86109c8565b34801561030657600080fd5b5061031a610315366004613770565b610a5a565b6040516001600160a01b0390911681526020016102af565b34801561033e57600080fd5b5061035261034d3660046134e9565b610ae7565b005b34801561036057600080fd5b5061035261036f366004613789565b610bfd565b34801561038057600080fd5b5061031a61038f3660046136cb565b80516020818301810180516011825292820191909301209152546001600160a01b031681565b3480156103c157600080fd5b506103526103d036600461339f565b610c4b565b3480156103e157600080fd5b506103526103f03660046133f5565b610caf565b34801561040157600080fd5b50610352610410366004613770565b610ce0565b34801561042157600080fd5b5061044d6104303660046136cb565b805160208183018101805160198252928201919093012091525481565b6040519081526020016102af565b34801561046757600080fd5b506103526104763660046133f5565b610d14565b34801561048757600080fd5b50600c5461049b906001600160801b031681565b6040516001600160801b0390911681526020016102af565b6103526104c13660046136cb565b610d2f565b3480156104d257600080fd5b5061044d600a5481565b3480156104e857600080fd5b5061031a6104f7366004613770565b610ef8565b34801561050857600080fd5b5061044d6105173660046136cb565b805160208183018101805160168252928201919093012091525481565b34801561054057600080fd5b5061044d61054f36600461339f565b610f6f565b34801561056057600080fd5b50610352610ff6565b34801561057557600080fd5b5061035261058436600461339f565b61105c565b34801561059557600080fd5b506102a36105a43660046136cb565b805160208183018101805160188252928201919093012091525460ff1681565b3480156105d057600080fd5b506007546001600160a01b031661031a565b3480156105ee57600080fd5b506102d8611153565b34801561060357600080fd5b506106176106123660046136cb565b611162565b6040516102af91906138ca565b34801561063057600080fd5b506102a361063f366004613700565b81516020818401810180516017825292820194820194909420919093529091526000908152604090205460ff1681565b34801561067b57600080fd5b5061035261068a3660046134b6565b6111dc565b34801561069b57600080fd5b506103526106aa3660046136cb565b6112a1565b3480156106bb57600080fd5b506106cf6106ca36600461359b565b6115cf565b6040516102af9190613917565b3480156106e857600080fd5b506106176106f73660046136cb565b611aab565b34801561070857600080fd5b50610352610717366004613747565b611abd565b34801561072857600080fd5b50600c5461049b90600160801b90046001600160801b031681565b34801561074f57600080fd5b5061035261075e366004613436565b611b7a565b34801561076f57600080fd5b5061044d61077e3660046136cb565b805160208183018101805160158252928201919093012091525481565b3480156107a757600080fd5b506102d86107b6366004613770565b611bb2565b3480156107c757600080fd5b506103526107d6366004613515565b611d29565b3480156107e757600080fd5b506108166107f63660046136cb565b805160208183018101805160148252928201919093012091525460ff1681565b6040516102af919061394f565b34801561082f57600080fd5b506102a361083e3660046133bc565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561087857600080fd5b50610352610887366004613700565b6123f7565b34801561089857600080fd5b506103526108a736600461339f565b612703565b3480156108b857600080fd5b506102a36108c736600461339f565b600b6020526000908152604090205460ff1681565b60006001600160e01b031982166380ac58cd60e01b148061090d57506001600160e01b03198216635b5e139f60e01b145b8061092857506301ffc9a760e01b6001600160e01b03198316145b92915050565b6013602052600090815260409020805461094790613bf2565b80601f016020809104026020016040519081016040528092919081815260200182805461097390613bf2565b80156109c05780601f10610995576101008083540402835291602001916109c0565b820191906000526020600020905b8154815290600101906020018083116109a357829003601f168201915b505050505081565b6060600080546109d790613bf2565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0390613bf2565b8015610a505780601f10610a2557610100808354040283529160200191610a50565b820191906000526020600020905b815481529060010190602001808311610a3357829003601f168201915b5050505050905090565b6000610a65826127cb565b610acb5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610af282610ef8565b9050806001600160a01b0316836001600160a01b03161415610b605760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610ac2565b336001600160a01b0382161480610b7c5750610b7c813361083e565b610bee5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610ac2565b610bf883836127e8565b505050565b336000908152600b602052604090205460ff16610c2c5760405162461bcd60e51b8152600401610ac29061398a565b60008281526013602090815260409091208251610bf89284019061315e565b336000908152600b602052604090205460ff16610c7a5760405162461bcd60e51b8152600401610ac29061398a565b6001600160a01b038116610c8d57600080fd5b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b610cb93382612856565b610cd55760405162461bcd60e51b8152600401610ac290613a04565b610bf883838361293c565b336000908152600b602052604090205460ff16610d0f5760405162461bcd60e51b8152600401610ac29061398a565b600a55565b610bf883838360405180602001604052806000815250611b7a565b60006001600160a01b0316601182604051610d4a91906137fc565b908152604051908190036020019020546001600160a01b031614610da95760405162461bcd60e51b8152602060048201526016602482015275185b1c9958591e481c1c9bda9958dd081dd85b1b195d60521b6044820152606401610ac2565b600a54341015610def5760405162461bcd60e51b81526020600482015260116024820152701b9bdd08195b9bdd59da081cdd185ad959607a1b6044820152606401610ac2565b33601182604051610e0091906137fc565b908152602001604051809103902060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600a54601282604051610e4591906137fc565b90815260405190819003602001902055600a54341115610ef557600a546000903390610e719034613b98565b604051600081818185875af1925050503d8060008114610ead576040519150601f19603f3d011682016040523d82523d6000602084013e610eb2565b606091505b5050905080610ef35760405162461bcd60e51b815260206004820152600d60248201526c19985a5b1959081c99599d5b99609a1b6044820152606401610ac2565b505b50565b6000818152600260205260408120546001600160a01b0316806109285760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610ac2565b60006001600160a01b038216610fda5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610ac2565b506001600160a01b031660009081526003602052604090205490565b6007546001600160a01b031633146110505760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ac2565b61105a6000612adc565b565b336000908152600b602052604090205460ff1661108b5760405162461bcd60e51b8152600401610ac29061398a565b6001600160a01b0381166000908152600b602052604090205460ff16156110e75760405162461bcd60e51b815260206004820152601060248201526f30b63932b0b23c903932bb34b2bbb2b960811b6044820152606401610ac2565b6001600160a01b0381166000908152600b60205260409020805460ff19166001179055600c80546001600160801b03600160801b9091041690601061112b83613c2d565b91906101000a8154816001600160801b0302191690836001600160801b031602179055505050565b6060600180546109d790613bf2565b606060108260405161117491906137fc565b90815260408051918290036020908101832080548083028501830190935282845291908301828280156111d057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116111b2575b50505050509050919050565b6001600160a01b0382163314156112355760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610ac2565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b336000908152600b602052604090205460ff166112d05760405162461bcd60e51b8152600401610ac29061398a565b60016014826040516112e291906137fc565b9081526040519081900360200190205460ff16600381111561130657611306613caf565b146113495760405162461bcd60e51b815260206004820152601360248201527270726f6a656374206e6f742070656e64696e6760681b6044820152606401610ac2565b60178160405161135991906137fc565b908152602001604051809103902060006113703390565b6001600160a01b0316815260208101919091526040016000205460ff16156113da5760405162461bcd60e51b815260206004820152601e60248201527f616c726561647920766f74656420666f7220746869732070726f6a65637400006044820152606401610ac2565b6016816040516113ea91906137fc565b908152604051908190036020019020805490600061140783613c54565b9190505550600160178260405161141e91906137fc565b908152602001604051809103902060006114353390565b6001600160a01b0316815260208101919091526040016000908120805460ff191692151592909217909155600c5460649061148390600160801b81046001600160801b039081169116613b4a565b61148d9190613b10565b600c546001600160801b0391821692506114b191600160801b820481169116613b4a565b6001600160801b03166114c5826064613b79565b10156114d957806114d581613c54565b9150505b806016836040516114ea91906137fc565b90815260200160405180910390205410610ef357600260148360405161151091906137fc565b908152604051908190036020019020805460ff1916600183600381111561153957611539613caf565b0217905550600d546040516000916001600160a01b03169060129061155f9086906137fc565b9081526040519081900360200181205490600081818185875af1925050503d80600081146115a9576040519150601f19603f3d011682016040523d82523d6000602084013e6115ae565b606091505b5050905080610bf85760405162461bcd60e51b8152600401610ac290613a55565b336000908152600b602052604090205460609060ff166116015760405162461bcd60e51b8152600401610ac29061398a565b600360148360405161161391906137fc565b9081526040519081900360200190205460ff16600381111561163757611637613caf565b1461167b5760405162461bcd60e51b81526020600482015260146024820152731a9bd8881b9bdd08185c1c1c9bdd9959081e595d60621b6044820152606401610ac2565b60188260405161168b91906137fc565b9081526040519081900360200190205460ff16156116dc5760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481b5a5b9d195960921b6044820152606401610ac2565b8251845114801561170c5750600f826040516116f891906137fc565b908152604051908190036020019020548451145b6117495760405162461bcd60e51b815260206004820152600e60248201526d696e636f7272656374206172727360901b6044820152606401610ac2565b6000600f8360405161175b91906137fc565b9081526040519081900360200190205467ffffffffffffffff81111561178357611783613cdb565b6040519080825280602002602001820160405280156117ac578160200160208202803683370190505b5090506000606060005b600f866040516117c691906137fc565b90815260405190819003602001902054811015611a6c576117eb600880546001019055565b600854925061181288828151811061180557611805613cc5565b6020026020010151612b2e565b61183488838151811061182757611827613cc5565b6020026020010151612bd1565b604051602001611845929190613847565b60405160208183030381529060405291506118a3600f8760405161186991906137fc565b9081526020016040518091039020828154811061188857611888613cc5565b6000918252602090912001546001600160a01b031684612c62565b6118ad8383612d95565b600e546040516000916001600160a01b0316907fc50441ae845872978b51f82be155098d8562f1c2acdfbdcd81e2617131c30d5f906118f0908a90602401613977565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161192e91906137fc565b6000604051808303816000865af19150503d806000811461196b576040519150601f19603f3d011682016040523d82523d6000602084013e611970565b606091505b50509050806119c15760405162461bcd60e51b815260206004820152601760248201527f6469616d6f6e6420617070726f76616c206661696c65640000000000000000006044820152606401610ac2565b866040516119cf91906137fc565b6040518091039020836040516119e591906137fc565b6040518091039020600f896040516119fd91906137fc565b90815260200160405180910390208481548110611a1c57611a1c613cc5565b60009182526020822001546040516001600160a01b03909116917f7ae1edbeb69892774d94c2010b6183269d48e647bbfddb34d22d5aaf08dd4ad491a45080611a6481613c54565b9150506117b6565b506001601886604051611a7f91906137fc565b908152604051908190036020019020805491151560ff1990921691909117905550909150509392505050565b6060600f8260405161117491906137fc565b336000908152600b602052604090205460ff16611aec5760405162461bcd60e51b8152600401610ac29061398a565b6000816001600160801b0316118015611b0f57506064816001600160801b031611155b611b4f5760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a59081d1a1c995cda1bdb19607a1b6044820152606401610ac2565b600c80546fffffffffffffffffffffffffffffffff19166001600160801b0392909216919091179055565b611b843383612856565b611ba05760405162461bcd60e51b8152600401610ac290613a04565b611bac84848484612e20565b50505050565b6060611bbd826127cb565b611c235760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b6064820152608401610ac2565b60008281526006602052604081208054611c3c90613bf2565b80601f0160208091040260200160405190810160405280929190818152602001828054611c6890613bf2565b8015611cb55780601f10611c8a57610100808354040283529160200191611cb5565b820191906000526020600020905b815481529060010190602001808311611c9857829003601f168201915b505050505090506000611cd360408051602081019091526000815290565b9050805160001415611ce6575092915050565b815115611d18578082604051602001611d00929190613818565b60405160208183030381529060405292505050919050565b611d2184612e53565b949350505050565b336000908152600b602052604090205460ff16611d585760405162461bcd60e51b8152600401610ac29061398a565b6002601482604051611d6a91906137fc565b9081526040519081900360200190205460ff166003811115611d8e57611d8e613caf565b14158015611dd057506003601482604051611da991906137fc565b9081526040519081900360200190205460ff166003811115611dcd57611dcd613caf565b14155b611e105760405162461bcd60e51b8152602060048201526011602482015270199a5b985b1a5e9959081c1c9bda9958dd607a1b6044820152606401610ac2565b601781604051611e2091906137fc565b90815260200160405180910390206000611e373390565b6001600160a01b0316815260208101919091526040016000205460ff1615611ea15760405162461bcd60e51b815260206004820152601e60248201527f616c726561647920766f74656420666f7220746869732070726f6a65637400006044820152606401610ac2565b601581604051611eb191906137fc565b9081526040519081900360200190208054906000611ece83613c54565b91905055506001601782604051611ee591906137fc565b90815260200160405180910390206000611efc3390565b6001600160a01b0316815260208101919091526040016000908120805460ff191692151592909217909155601482604051611f3791906137fc565b9081526040519081900360200190205460ff166003811115611f5b57611f5b613caf565b1415612226576000845111611fa05760405162461bcd60e51b815260206004820152600b60248201526a656d70747920617272617960a81b6044820152606401610ac2565b600082118015611fb1575060648211155b611ff15760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a59081d1a1c995cda1bdb19607a1b6044820152606401610ac2565b83600f8260405161200291906137fc565b908152602001604051809103902090805190602001906120239291906131e2565b508160198260405161203591906137fc565b9081526020016040518091039020819055508260108260405161205891906137fc565b908152602001604051809103902090805190602001906120799291906131e2565b50600c5460649061209c906001600160801b03600160801b820481169116613b4a565b6120a69190613b10565b6001600160801b03166121e15760036014826040516120c591906137fc565b908152604051908190036020019020805460ff191660018360038111156120ee576120ee613caf565b0217905550600060118260405161210591906137fc565b908152604051908190036020018120546001600160a01b03169060129061212d9085906137fc565b9081526040519081900360200181205490600081818185875af1925050503d8060008114612177576040519150601f19603f3d011682016040523d82523d6000602084013e61217c565b606091505b505090508061219d5760405162461bcd60e51b8152600401610ac290613a55565b816040516121ab91906137fc565b604051908190038120907fae4295c58d61bc95278d93c0ce50389c66907d23767828ed2cf0c1b0cb80483e90600090a250611bac565b60016014826040516121f391906137fc565b908152604051908190036020019020805460ff1916600183600381111561221c5761221c613caf565b0217905550611bac565b600c5460009060649061224b906001600160801b03600160801b820481169116613b4a565b6122559190613b10565b600c546001600160801b03918216925061227991600160801b820481169116613b4a565b6001600160801b031661228d826064613b79565b10156122a1578061229d81613c54565b9150505b806015836040516122b291906137fc565b908152602001604051809103902054106123f05760036014836040516122d891906137fc565b908152604051908190036020019020805460ff1916600183600381111561230157612301613caf565b0217905550600060118360405161231891906137fc565b908152604051908190036020018120546001600160a01b0316906012906123409086906137fc565b9081526040519081900360200181205490600081818185875af1925050503d806000811461238a576040519150601f19603f3d011682016040523d82523d6000602084013e61238f565b606091505b50509050806123b05760405162461bcd60e51b8152600401610ac290613a55565b826040516123be91906137fc565b604051908190038120907fae4295c58d61bc95278d93c0ce50389c66907d23767828ed2cf0c1b0cb80483e90600090a2505b5050505050565b600060148360405161240991906137fc565b9081526040519081900360200190205460ff16600381111561242d5761242d613caf565b14156124735760405162461bcd60e51b81526020600482015260156024820152741c1c9bda9958dd08191bd95cdb89dd08195e1a5cdd605a1b6044820152606401610ac2565b60188260405161248391906137fc565b9081526040519081900360200190205460ff16156124dc5760405162461bcd60e51b81526020600482015260166024820152751c1c9bda9958dd08185b1c9958591e481b5a5b9d195960521b6044820152606401610ac2565b336000908152600b602052604090205460ff16600181612602576000600f8560405161250891906137fc565b908152604080519182900360209081018320805480830285018301909352828452919083018282801561256457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612546575b5050505050905060005b81518110156125ff5781818151811061258957612589613cc5565b60200260200101516001600160a01b03166125a13390565b6001600160a01b031614156125b557600193505b8181815181106125c7576125c7613cc5565b60200260200101516001600160a01b0316856001600160a01b031614156125ed57600092505b806125f781613c54565b91505061256e565b50505b816126615760405162461bcd60e51b815260206004820152602960248201527f6d75737420626520612070726f6a65637420636f6e7472696275746f72206f72604482015268103932bb34b2bbb2b960b91b6064820152608401610ac2565b806126ae5760405162461bcd60e51b815260206004820181905260248201527f616c7265616479206120636f6e7472696275746f72206f6e2070726f6a6563746044820152606401610ac2565b600f846040516126be91906137fc565b90815260405160209181900382019020805460018101825560009182529190200180546001600160a01b0319166001600160a01b039490941693909317909255505050565b6007546001600160a01b0316331461275d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ac2565b6001600160a01b0381166127c25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610ac2565b610ef581612adc565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061281d82610ef8565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000612861826127cb565b6128c25760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610ac2565b60006128cd83610ef8565b9050806001600160a01b0316846001600160a01b031614806129085750836001600160a01b03166128fd84610a5a565b6001600160a01b0316145b80611d2157506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16611d21565b826001600160a01b031661294f82610ef8565b6001600160a01b0316146129b75760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610ac2565b6001600160a01b038216612a195760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610ac2565b612a246000826127e8565b6001600160a01b0383166000908152600360205260408120805460019290612a4d908490613b98565b90915550506001600160a01b0382166000908152600360205260408120805460019290612a7b908490613ad3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60408051600880825281830190925260609160009190602082018180368337019050509050600f60085b8015612bc857612b69828616612f2b565b60f81b83612b78600184613b98565b81518110612b8857612b88613cc5565b60200101906001600160f81b031916908160001a9053506001811115612bb65760048563ffffffff16901c94505b80612bc081613bdb565b915050612b58565b50909392505050565b60408051818152606081810183529160009190602082018180368337019050509050600f60405b8015612bc857612c09828616612f2b565b60f81b83612c18600184613b98565b81518110612c2857612c28613cc5565b60200101906001600160f81b031916908160001a9053506001811115612c5057600485901c94505b80612c5a81613bdb565b915050612bf8565b6001600160a01b038216612cb85760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610ac2565b612cc1816127cb565b15612d0e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610ac2565b6001600160a01b0382166000908152600360205260408120805460019290612d37908490613ad3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b612d9e826127cb565b612e015760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610ac2565b60008281526006602090815260409091208251610bf89284019061315e565b612e2b84848461293c565b612e3784848484612f53565b611bac5760405162461bcd60e51b8152600401610ac2906139b2565b6060612e5e826127cb565b612ec25760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610ac2565b6000612ed960408051602081019091526000815290565b90506000815111612ef95760405180602001604052806000815250612f24565b80612f0384613060565b604051602001612f14929190613818565b6040516020818303038152906040525b9392505050565b600060098260ff1611612f4857612f43826030613aeb565b610928565b610928826057613aeb565b60006001600160a01b0384163b1561305557604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612f9790339089908890889060040161388d565b602060405180830381600087803b158015612fb157600080fd5b505af1925050508015612fe1575060408051601f3d908101601f19168201909252612fde918101906136ae565b60015b61303b573d80801561300f576040519150601f19603f3d011682016040523d82523d6000602084013e613014565b606091505b5080516130335760405162461bcd60e51b8152600401610ac2906139b2565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611d21565b506001949350505050565b6060816130845750506040805180820190915260018152600360fc1b602082015290565b8160005b81156130ae578061309881613c54565b91506130a79050600a83613b36565b9150613088565b60008167ffffffffffffffff8111156130c9576130c9613cdb565b6040519080825280601f01601f1916602001820160405280156130f3576020820181803683370190505b5090505b8415611d2157613108600183613b98565b9150613115600a86613c6f565b613120906030613ad3565b60f81b81838151811061313557613135613cc5565b60200101906001600160f81b031916908160001a905350613157600a86613b36565b94506130f7565b82805461316a90613bf2565b90600052602060002090601f01602090048101928261318c57600085556131d2565b82601f106131a557805160ff19168380011785556131d2565b828001600101855582156131d2579182015b828111156131d25782518255916020019190600101906131b7565b506131de929150613237565b5090565b8280548282559060005260206000209081019282156131d2579160200282015b828111156131d257825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190613202565b5b808211156131de5760008155600101613238565b600067ffffffffffffffff83111561326657613266613cdb565b613279601f8401601f1916602001613a7e565b905082815283838301111561328d57600080fd5b828260208301376000602084830101529392505050565b600082601f8301126132b557600080fd5b813560206132ca6132c583613aaf565b613a7e565b80838252828201915082860187848660051b89010111156132ea57600080fd5b60005b8581101561331257813561330081613cf1565b845292840192908401906001016132ed565b5090979650505050505050565b600082601f83011261333057600080fd5b813560206133406132c583613aaf565b80838252828201915082860187848660051b890101111561336057600080fd5b60005b8581101561331257813584529284019290840190600101613363565b600082601f83011261339057600080fd5b612f248383356020850161324c565b6000602082840312156133b157600080fd5b8135612f2481613cf1565b600080604083850312156133cf57600080fd5b82356133da81613cf1565b915060208301356133ea81613cf1565b809150509250929050565b60008060006060848603121561340a57600080fd5b833561341581613cf1565b9250602084013561342581613cf1565b929592945050506040919091013590565b6000806000806080858703121561344c57600080fd5b843561345781613cf1565b9350602085013561346781613cf1565b925060408501359150606085013567ffffffffffffffff81111561348a57600080fd5b8501601f8101871361349b57600080fd5b6134aa8782356020840161324c565b91505092959194509250565b600080604083850312156134c957600080fd5b82356134d481613cf1565b9150602083013580151581146133ea57600080fd5b600080604083850312156134fc57600080fd5b823561350781613cf1565b946020939093013593505050565b6000806000806080858703121561352b57600080fd5b843567ffffffffffffffff8082111561354357600080fd5b61354f888389016132a4565b9550602087013591508082111561356557600080fd5b613571888389016132a4565b945060408701359350606087013591508082111561358e57600080fd5b506134aa8782880161337f565b6000806000606084860312156135b057600080fd5b833567ffffffffffffffff808211156135c857600080fd5b818601915086601f8301126135dc57600080fd5b813560206135ec6132c583613aaf565b8083825282820191508286018b848660051b890101111561360c57600080fd5b600096505b8487101561364157803563ffffffff8116811461362d57600080fd5b835260019690960195918301918301613611565b509750508701359250508082111561365857600080fd5b6136648783880161331f565b9350604086013591508082111561367a57600080fd5b506136878682870161337f565b9150509250925092565b6000602082840312156136a357600080fd5b8135612f2481613d06565b6000602082840312156136c057600080fd5b8151612f2481613d06565b6000602082840312156136dd57600080fd5b813567ffffffffffffffff8111156136f457600080fd5b611d218482850161337f565b6000806040838503121561371357600080fd5b823567ffffffffffffffff81111561372a57600080fd5b6137368582860161337f565b92505060208301356133ea81613cf1565b60006020828403121561375957600080fd5b81356001600160801b0381168114612f2457600080fd5b60006020828403121561378257600080fd5b5035919050565b6000806040838503121561379c57600080fd5b82359150602083013567ffffffffffffffff8111156137ba57600080fd5b6137c68582860161337f565b9150509250929050565b600081518084526137e8816020860160208601613baf565b601f01601f19169290920160200192915050565b6000825161380e818460208701613baf565b9190910192915050565b6000835161382a818460208801613baf565b83519083019061383e818360208801613baf565b01949350505050565b6734b833399d1797b360c11b81526000835161386a816008850160208801613baf565b835190830190613881816008840160208801613baf565b01600801949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906138c0908301846137d0565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561390b5783516001600160a01b0316835292840192918401916001016138e6565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561390b57835183529284019291840191600101613933565b602081016004831061397157634e487b7160e01b600052602160045260246000fd5b91905290565b602081526000612f2460208301846137d0565b6020808252600e908201526d3737ba1030903932bb34b2bbb2b960911b604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252600f908201526e1d1c985b9cd9995c8819985a5b1959608a1b604082015260600190565b604051601f8201601f1916810167ffffffffffffffff81118282101715613aa757613aa7613cdb565b604052919050565b600067ffffffffffffffff821115613ac957613ac9613cdb565b5060051b60200190565b60008219821115613ae657613ae6613c83565b500190565b600060ff821660ff84168060ff03821115613b0857613b08613c83565b019392505050565b60006001600160801b0380841680613b2a57613b2a613c99565b92169190910492915050565b600082613b4557613b45613c99565b500490565b60006001600160801b0380831681851681830481118215151615613b7057613b70613c83565b02949350505050565b6000816000190483118215151615613b9357613b93613c83565b500290565b600082821015613baa57613baa613c83565b500390565b60005b83811015613bca578181015183820152602001613bb2565b83811115611bac5750506000910152565b600081613bea57613bea613c83565b506000190190565b600181811c90821680613c0657607f821691505b60208210811415613c2757634e487b7160e01b600052602260045260246000fd5b50919050565b60006001600160801b0380831681811415613c4a57613c4a613c83565b6001019392505050565b6000600019821415613c6857613c68613c83565b5060010190565b600082613c7e57613c7e613c99565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ef557600080fd5b6001600160e01b031981168114610ef557600080fdfea26469706673582212200db83ec027a4e089ec4b00d51f4dca351e9544a9488a502af64a9b9a2e38443c64736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061023f5760003560e01c806382171fbe1161012e578063b2f3f80c116100ab578063e8ca64f41161006f578063e8ca64f4146107db578063e985e9c514610823578063ee335b421461086c578063f2fde38b1461088c578063f7cbb1b2146108ac57600080fd5b8063b2f3f80c1461071c578063b88d4fde14610743578063b99ef1fa14610763578063c87b56dd1461079b578063d699e96d146107bb57600080fd5b8063a22cb465116100f2578063a22cb4651461066f578063a41641b61461068f578063a479030b146106af578063aaa545d0146106dc578063b03e4dd5146106fc57600080fd5b806382171fbe146105895780638da5cb5b146105c457806395d89b41146105e2578063965f055c146105f75780639e1b567c1461062457600080fd5b806338b686cb116101bc5780636352211e116101805780636352211e146104dc57806368929b5c146104fc57806370a0823114610534578063715018a61461055457806373a82b5f1461056957600080fd5b806338b686cb1461041557806342842e0e1461045b5780634badfeb21461047b57806358c84551146104b357806360c7dc47146104c657600080fd5b80630d46ed21116102035780630d46ed21146103545780630d58dd08146103745780630e3c22cb146103b557806323b872dd146103d557806335d9db53146103f557600080fd5b806301ffc9a71461028357806304dcd300146102b857806306fdde03146102e5578063081812fc146102fa578063095ea7b31461033257600080fd5b3661027e57604080513381523460208201527f64c983f10188c30a885d77970aa5aae9a86e80ef9b459ad33cc620eb5999e070910160405180910390a1005b600080fd5b34801561028f57600080fd5b506102a361029e366004613691565b6108dc565b60405190151581526020015b60405180910390f35b3480156102c457600080fd5b506102d86102d3366004613770565b61092e565b6040516102af9190613977565b3480156102f157600080fd5b506102d86109c8565b34801561030657600080fd5b5061031a610315366004613770565b610a5a565b6040516001600160a01b0390911681526020016102af565b34801561033e57600080fd5b5061035261034d3660046134e9565b610ae7565b005b34801561036057600080fd5b5061035261036f366004613789565b610bfd565b34801561038057600080fd5b5061031a61038f3660046136cb565b80516020818301810180516011825292820191909301209152546001600160a01b031681565b3480156103c157600080fd5b506103526103d036600461339f565b610c4b565b3480156103e157600080fd5b506103526103f03660046133f5565b610caf565b34801561040157600080fd5b50610352610410366004613770565b610ce0565b34801561042157600080fd5b5061044d6104303660046136cb565b805160208183018101805160198252928201919093012091525481565b6040519081526020016102af565b34801561046757600080fd5b506103526104763660046133f5565b610d14565b34801561048757600080fd5b50600c5461049b906001600160801b031681565b6040516001600160801b0390911681526020016102af565b6103526104c13660046136cb565b610d2f565b3480156104d257600080fd5b5061044d600a5481565b3480156104e857600080fd5b5061031a6104f7366004613770565b610ef8565b34801561050857600080fd5b5061044d6105173660046136cb565b805160208183018101805160168252928201919093012091525481565b34801561054057600080fd5b5061044d61054f36600461339f565b610f6f565b34801561056057600080fd5b50610352610ff6565b34801561057557600080fd5b5061035261058436600461339f565b61105c565b34801561059557600080fd5b506102a36105a43660046136cb565b805160208183018101805160188252928201919093012091525460ff1681565b3480156105d057600080fd5b506007546001600160a01b031661031a565b3480156105ee57600080fd5b506102d8611153565b34801561060357600080fd5b506106176106123660046136cb565b611162565b6040516102af91906138ca565b34801561063057600080fd5b506102a361063f366004613700565b81516020818401810180516017825292820194820194909420919093529091526000908152604090205460ff1681565b34801561067b57600080fd5b5061035261068a3660046134b6565b6111dc565b34801561069b57600080fd5b506103526106aa3660046136cb565b6112a1565b3480156106bb57600080fd5b506106cf6106ca36600461359b565b6115cf565b6040516102af9190613917565b3480156106e857600080fd5b506106176106f73660046136cb565b611aab565b34801561070857600080fd5b50610352610717366004613747565b611abd565b34801561072857600080fd5b50600c5461049b90600160801b90046001600160801b031681565b34801561074f57600080fd5b5061035261075e366004613436565b611b7a565b34801561076f57600080fd5b5061044d61077e3660046136cb565b805160208183018101805160158252928201919093012091525481565b3480156107a757600080fd5b506102d86107b6366004613770565b611bb2565b3480156107c757600080fd5b506103526107d6366004613515565b611d29565b3480156107e757600080fd5b506108166107f63660046136cb565b805160208183018101805160148252928201919093012091525460ff1681565b6040516102af919061394f565b34801561082f57600080fd5b506102a361083e3660046133bc565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561087857600080fd5b50610352610887366004613700565b6123f7565b34801561089857600080fd5b506103526108a736600461339f565b612703565b3480156108b857600080fd5b506102a36108c736600461339f565b600b6020526000908152604090205460ff1681565b60006001600160e01b031982166380ac58cd60e01b148061090d57506001600160e01b03198216635b5e139f60e01b145b8061092857506301ffc9a760e01b6001600160e01b03198316145b92915050565b6013602052600090815260409020805461094790613bf2565b80601f016020809104026020016040519081016040528092919081815260200182805461097390613bf2565b80156109c05780601f10610995576101008083540402835291602001916109c0565b820191906000526020600020905b8154815290600101906020018083116109a357829003601f168201915b505050505081565b6060600080546109d790613bf2565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0390613bf2565b8015610a505780601f10610a2557610100808354040283529160200191610a50565b820191906000526020600020905b815481529060010190602001808311610a3357829003601f168201915b5050505050905090565b6000610a65826127cb565b610acb5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610af282610ef8565b9050806001600160a01b0316836001600160a01b03161415610b605760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610ac2565b336001600160a01b0382161480610b7c5750610b7c813361083e565b610bee5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610ac2565b610bf883836127e8565b505050565b336000908152600b602052604090205460ff16610c2c5760405162461bcd60e51b8152600401610ac29061398a565b60008281526013602090815260409091208251610bf89284019061315e565b336000908152600b602052604090205460ff16610c7a5760405162461bcd60e51b8152600401610ac29061398a565b6001600160a01b038116610c8d57600080fd5b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b610cb93382612856565b610cd55760405162461bcd60e51b8152600401610ac290613a04565b610bf883838361293c565b336000908152600b602052604090205460ff16610d0f5760405162461bcd60e51b8152600401610ac29061398a565b600a55565b610bf883838360405180602001604052806000815250611b7a565b60006001600160a01b0316601182604051610d4a91906137fc565b908152604051908190036020019020546001600160a01b031614610da95760405162461bcd60e51b8152602060048201526016602482015275185b1c9958591e481c1c9bda9958dd081dd85b1b195d60521b6044820152606401610ac2565b600a54341015610def5760405162461bcd60e51b81526020600482015260116024820152701b9bdd08195b9bdd59da081cdd185ad959607a1b6044820152606401610ac2565b33601182604051610e0091906137fc565b908152602001604051809103902060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600a54601282604051610e4591906137fc565b90815260405190819003602001902055600a54341115610ef557600a546000903390610e719034613b98565b604051600081818185875af1925050503d8060008114610ead576040519150601f19603f3d011682016040523d82523d6000602084013e610eb2565b606091505b5050905080610ef35760405162461bcd60e51b815260206004820152600d60248201526c19985a5b1959081c99599d5b99609a1b6044820152606401610ac2565b505b50565b6000818152600260205260408120546001600160a01b0316806109285760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610ac2565b60006001600160a01b038216610fda5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610ac2565b506001600160a01b031660009081526003602052604090205490565b6007546001600160a01b031633146110505760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ac2565b61105a6000612adc565b565b336000908152600b602052604090205460ff1661108b5760405162461bcd60e51b8152600401610ac29061398a565b6001600160a01b0381166000908152600b602052604090205460ff16156110e75760405162461bcd60e51b815260206004820152601060248201526f30b63932b0b23c903932bb34b2bbb2b960811b6044820152606401610ac2565b6001600160a01b0381166000908152600b60205260409020805460ff19166001179055600c80546001600160801b03600160801b9091041690601061112b83613c2d565b91906101000a8154816001600160801b0302191690836001600160801b031602179055505050565b6060600180546109d790613bf2565b606060108260405161117491906137fc565b90815260408051918290036020908101832080548083028501830190935282845291908301828280156111d057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116111b2575b50505050509050919050565b6001600160a01b0382163314156112355760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610ac2565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b336000908152600b602052604090205460ff166112d05760405162461bcd60e51b8152600401610ac29061398a565b60016014826040516112e291906137fc565b9081526040519081900360200190205460ff16600381111561130657611306613caf565b146113495760405162461bcd60e51b815260206004820152601360248201527270726f6a656374206e6f742070656e64696e6760681b6044820152606401610ac2565b60178160405161135991906137fc565b908152602001604051809103902060006113703390565b6001600160a01b0316815260208101919091526040016000205460ff16156113da5760405162461bcd60e51b815260206004820152601e60248201527f616c726561647920766f74656420666f7220746869732070726f6a65637400006044820152606401610ac2565b6016816040516113ea91906137fc565b908152604051908190036020019020805490600061140783613c54565b9190505550600160178260405161141e91906137fc565b908152602001604051809103902060006114353390565b6001600160a01b0316815260208101919091526040016000908120805460ff191692151592909217909155600c5460649061148390600160801b81046001600160801b039081169116613b4a565b61148d9190613b10565b600c546001600160801b0391821692506114b191600160801b820481169116613b4a565b6001600160801b03166114c5826064613b79565b10156114d957806114d581613c54565b9150505b806016836040516114ea91906137fc565b90815260200160405180910390205410610ef357600260148360405161151091906137fc565b908152604051908190036020019020805460ff1916600183600381111561153957611539613caf565b0217905550600d546040516000916001600160a01b03169060129061155f9086906137fc565b9081526040519081900360200181205490600081818185875af1925050503d80600081146115a9576040519150601f19603f3d011682016040523d82523d6000602084013e6115ae565b606091505b5050905080610bf85760405162461bcd60e51b8152600401610ac290613a55565b336000908152600b602052604090205460609060ff166116015760405162461bcd60e51b8152600401610ac29061398a565b600360148360405161161391906137fc565b9081526040519081900360200190205460ff16600381111561163757611637613caf565b1461167b5760405162461bcd60e51b81526020600482015260146024820152731a9bd8881b9bdd08185c1c1c9bdd9959081e595d60621b6044820152606401610ac2565b60188260405161168b91906137fc565b9081526040519081900360200190205460ff16156116dc5760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481b5a5b9d195960921b6044820152606401610ac2565b8251845114801561170c5750600f826040516116f891906137fc565b908152604051908190036020019020548451145b6117495760405162461bcd60e51b815260206004820152600e60248201526d696e636f7272656374206172727360901b6044820152606401610ac2565b6000600f8360405161175b91906137fc565b9081526040519081900360200190205467ffffffffffffffff81111561178357611783613cdb565b6040519080825280602002602001820160405280156117ac578160200160208202803683370190505b5090506000606060005b600f866040516117c691906137fc565b90815260405190819003602001902054811015611a6c576117eb600880546001019055565b600854925061181288828151811061180557611805613cc5565b6020026020010151612b2e565b61183488838151811061182757611827613cc5565b6020026020010151612bd1565b604051602001611845929190613847565b60405160208183030381529060405291506118a3600f8760405161186991906137fc565b9081526020016040518091039020828154811061188857611888613cc5565b6000918252602090912001546001600160a01b031684612c62565b6118ad8383612d95565b600e546040516000916001600160a01b0316907fc50441ae845872978b51f82be155098d8562f1c2acdfbdcd81e2617131c30d5f906118f0908a90602401613977565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161192e91906137fc565b6000604051808303816000865af19150503d806000811461196b576040519150601f19603f3d011682016040523d82523d6000602084013e611970565b606091505b50509050806119c15760405162461bcd60e51b815260206004820152601760248201527f6469616d6f6e6420617070726f76616c206661696c65640000000000000000006044820152606401610ac2565b866040516119cf91906137fc565b6040518091039020836040516119e591906137fc565b6040518091039020600f896040516119fd91906137fc565b90815260200160405180910390208481548110611a1c57611a1c613cc5565b60009182526020822001546040516001600160a01b03909116917f7ae1edbeb69892774d94c2010b6183269d48e647bbfddb34d22d5aaf08dd4ad491a45080611a6481613c54565b9150506117b6565b506001601886604051611a7f91906137fc565b908152604051908190036020019020805491151560ff1990921691909117905550909150509392505050565b6060600f8260405161117491906137fc565b336000908152600b602052604090205460ff16611aec5760405162461bcd60e51b8152600401610ac29061398a565b6000816001600160801b0316118015611b0f57506064816001600160801b031611155b611b4f5760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a59081d1a1c995cda1bdb19607a1b6044820152606401610ac2565b600c80546fffffffffffffffffffffffffffffffff19166001600160801b0392909216919091179055565b611b843383612856565b611ba05760405162461bcd60e51b8152600401610ac290613a04565b611bac84848484612e20565b50505050565b6060611bbd826127cb565b611c235760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b6064820152608401610ac2565b60008281526006602052604081208054611c3c90613bf2565b80601f0160208091040260200160405190810160405280929190818152602001828054611c6890613bf2565b8015611cb55780601f10611c8a57610100808354040283529160200191611cb5565b820191906000526020600020905b815481529060010190602001808311611c9857829003601f168201915b505050505090506000611cd360408051602081019091526000815290565b9050805160001415611ce6575092915050565b815115611d18578082604051602001611d00929190613818565b60405160208183030381529060405292505050919050565b611d2184612e53565b949350505050565b336000908152600b602052604090205460ff16611d585760405162461bcd60e51b8152600401610ac29061398a565b6002601482604051611d6a91906137fc565b9081526040519081900360200190205460ff166003811115611d8e57611d8e613caf565b14158015611dd057506003601482604051611da991906137fc565b9081526040519081900360200190205460ff166003811115611dcd57611dcd613caf565b14155b611e105760405162461bcd60e51b8152602060048201526011602482015270199a5b985b1a5e9959081c1c9bda9958dd607a1b6044820152606401610ac2565b601781604051611e2091906137fc565b90815260200160405180910390206000611e373390565b6001600160a01b0316815260208101919091526040016000205460ff1615611ea15760405162461bcd60e51b815260206004820152601e60248201527f616c726561647920766f74656420666f7220746869732070726f6a65637400006044820152606401610ac2565b601581604051611eb191906137fc565b9081526040519081900360200190208054906000611ece83613c54565b91905055506001601782604051611ee591906137fc565b90815260200160405180910390206000611efc3390565b6001600160a01b0316815260208101919091526040016000908120805460ff191692151592909217909155601482604051611f3791906137fc565b9081526040519081900360200190205460ff166003811115611f5b57611f5b613caf565b1415612226576000845111611fa05760405162461bcd60e51b815260206004820152600b60248201526a656d70747920617272617960a81b6044820152606401610ac2565b600082118015611fb1575060648211155b611ff15760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a59081d1a1c995cda1bdb19607a1b6044820152606401610ac2565b83600f8260405161200291906137fc565b908152602001604051809103902090805190602001906120239291906131e2565b508160198260405161203591906137fc565b9081526020016040518091039020819055508260108260405161205891906137fc565b908152602001604051809103902090805190602001906120799291906131e2565b50600c5460649061209c906001600160801b03600160801b820481169116613b4a565b6120a69190613b10565b6001600160801b03166121e15760036014826040516120c591906137fc565b908152604051908190036020019020805460ff191660018360038111156120ee576120ee613caf565b0217905550600060118260405161210591906137fc565b908152604051908190036020018120546001600160a01b03169060129061212d9085906137fc565b9081526040519081900360200181205490600081818185875af1925050503d8060008114612177576040519150601f19603f3d011682016040523d82523d6000602084013e61217c565b606091505b505090508061219d5760405162461bcd60e51b8152600401610ac290613a55565b816040516121ab91906137fc565b604051908190038120907fae4295c58d61bc95278d93c0ce50389c66907d23767828ed2cf0c1b0cb80483e90600090a250611bac565b60016014826040516121f391906137fc565b908152604051908190036020019020805460ff1916600183600381111561221c5761221c613caf565b0217905550611bac565b600c5460009060649061224b906001600160801b03600160801b820481169116613b4a565b6122559190613b10565b600c546001600160801b03918216925061227991600160801b820481169116613b4a565b6001600160801b031661228d826064613b79565b10156122a1578061229d81613c54565b9150505b806015836040516122b291906137fc565b908152602001604051809103902054106123f05760036014836040516122d891906137fc565b908152604051908190036020019020805460ff1916600183600381111561230157612301613caf565b0217905550600060118360405161231891906137fc565b908152604051908190036020018120546001600160a01b0316906012906123409086906137fc565b9081526040519081900360200181205490600081818185875af1925050503d806000811461238a576040519150601f19603f3d011682016040523d82523d6000602084013e61238f565b606091505b50509050806123b05760405162461bcd60e51b8152600401610ac290613a55565b826040516123be91906137fc565b604051908190038120907fae4295c58d61bc95278d93c0ce50389c66907d23767828ed2cf0c1b0cb80483e90600090a2505b5050505050565b600060148360405161240991906137fc565b9081526040519081900360200190205460ff16600381111561242d5761242d613caf565b14156124735760405162461bcd60e51b81526020600482015260156024820152741c1c9bda9958dd08191bd95cdb89dd08195e1a5cdd605a1b6044820152606401610ac2565b60188260405161248391906137fc565b9081526040519081900360200190205460ff16156124dc5760405162461bcd60e51b81526020600482015260166024820152751c1c9bda9958dd08185b1c9958591e481b5a5b9d195960521b6044820152606401610ac2565b336000908152600b602052604090205460ff16600181612602576000600f8560405161250891906137fc565b908152604080519182900360209081018320805480830285018301909352828452919083018282801561256457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612546575b5050505050905060005b81518110156125ff5781818151811061258957612589613cc5565b60200260200101516001600160a01b03166125a13390565b6001600160a01b031614156125b557600193505b8181815181106125c7576125c7613cc5565b60200260200101516001600160a01b0316856001600160a01b031614156125ed57600092505b806125f781613c54565b91505061256e565b50505b816126615760405162461bcd60e51b815260206004820152602960248201527f6d75737420626520612070726f6a65637420636f6e7472696275746f72206f72604482015268103932bb34b2bbb2b960b91b6064820152608401610ac2565b806126ae5760405162461bcd60e51b815260206004820181905260248201527f616c7265616479206120636f6e7472696275746f72206f6e2070726f6a6563746044820152606401610ac2565b600f846040516126be91906137fc565b90815260405160209181900382019020805460018101825560009182529190200180546001600160a01b0319166001600160a01b039490941693909317909255505050565b6007546001600160a01b0316331461275d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ac2565b6001600160a01b0381166127c25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610ac2565b610ef581612adc565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061281d82610ef8565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000612861826127cb565b6128c25760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610ac2565b60006128cd83610ef8565b9050806001600160a01b0316846001600160a01b031614806129085750836001600160a01b03166128fd84610a5a565b6001600160a01b0316145b80611d2157506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16611d21565b826001600160a01b031661294f82610ef8565b6001600160a01b0316146129b75760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610ac2565b6001600160a01b038216612a195760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610ac2565b612a246000826127e8565b6001600160a01b0383166000908152600360205260408120805460019290612a4d908490613b98565b90915550506001600160a01b0382166000908152600360205260408120805460019290612a7b908490613ad3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60408051600880825281830190925260609160009190602082018180368337019050509050600f60085b8015612bc857612b69828616612f2b565b60f81b83612b78600184613b98565b81518110612b8857612b88613cc5565b60200101906001600160f81b031916908160001a9053506001811115612bb65760048563ffffffff16901c94505b80612bc081613bdb565b915050612b58565b50909392505050565b60408051818152606081810183529160009190602082018180368337019050509050600f60405b8015612bc857612c09828616612f2b565b60f81b83612c18600184613b98565b81518110612c2857612c28613cc5565b60200101906001600160f81b031916908160001a9053506001811115612c5057600485901c94505b80612c5a81613bdb565b915050612bf8565b6001600160a01b038216612cb85760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610ac2565b612cc1816127cb565b15612d0e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610ac2565b6001600160a01b0382166000908152600360205260408120805460019290612d37908490613ad3565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b612d9e826127cb565b612e015760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610ac2565b60008281526006602090815260409091208251610bf89284019061315e565b612e2b84848461293c565b612e3784848484612f53565b611bac5760405162461bcd60e51b8152600401610ac2906139b2565b6060612e5e826127cb565b612ec25760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610ac2565b6000612ed960408051602081019091526000815290565b90506000815111612ef95760405180602001604052806000815250612f24565b80612f0384613060565b604051602001612f14929190613818565b6040516020818303038152906040525b9392505050565b600060098260ff1611612f4857612f43826030613aeb565b610928565b610928826057613aeb565b60006001600160a01b0384163b1561305557604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612f9790339089908890889060040161388d565b602060405180830381600087803b158015612fb157600080fd5b505af1925050508015612fe1575060408051601f3d908101601f19168201909252612fde918101906136ae565b60015b61303b573d80801561300f576040519150601f19603f3d011682016040523d82523d6000602084013e613014565b606091505b5080516130335760405162461bcd60e51b8152600401610ac2906139b2565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611d21565b506001949350505050565b6060816130845750506040805180820190915260018152600360fc1b602082015290565b8160005b81156130ae578061309881613c54565b91506130a79050600a83613b36565b9150613088565b60008167ffffffffffffffff8111156130c9576130c9613cdb565b6040519080825280601f01601f1916602001820160405280156130f3576020820181803683370190505b5090505b8415611d2157613108600183613b98565b9150613115600a86613c6f565b613120906030613ad3565b60f81b81838151811061313557613135613cc5565b60200101906001600160f81b031916908160001a905350613157600a86613b36565b94506130f7565b82805461316a90613bf2565b90600052602060002090601f01602090048101928261318c57600085556131d2565b82601f106131a557805160ff19168380011785556131d2565b828001600101855582156131d2579182015b828111156131d25782518255916020019190600101906131b7565b506131de929150613237565b5090565b8280548282559060005260206000209081019282156131d2579160200282015b828111156131d257825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190613202565b5b808211156131de5760008155600101613238565b600067ffffffffffffffff83111561326657613266613cdb565b613279601f8401601f1916602001613a7e565b905082815283838301111561328d57600080fd5b828260208301376000602084830101529392505050565b600082601f8301126132b557600080fd5b813560206132ca6132c583613aaf565b613a7e565b80838252828201915082860187848660051b89010111156132ea57600080fd5b60005b8581101561331257813561330081613cf1565b845292840192908401906001016132ed565b5090979650505050505050565b600082601f83011261333057600080fd5b813560206133406132c583613aaf565b80838252828201915082860187848660051b890101111561336057600080fd5b60005b8581101561331257813584529284019290840190600101613363565b600082601f83011261339057600080fd5b612f248383356020850161324c565b6000602082840312156133b157600080fd5b8135612f2481613cf1565b600080604083850312156133cf57600080fd5b82356133da81613cf1565b915060208301356133ea81613cf1565b809150509250929050565b60008060006060848603121561340a57600080fd5b833561341581613cf1565b9250602084013561342581613cf1565b929592945050506040919091013590565b6000806000806080858703121561344c57600080fd5b843561345781613cf1565b9350602085013561346781613cf1565b925060408501359150606085013567ffffffffffffffff81111561348a57600080fd5b8501601f8101871361349b57600080fd5b6134aa8782356020840161324c565b91505092959194509250565b600080604083850312156134c957600080fd5b82356134d481613cf1565b9150602083013580151581146133ea57600080fd5b600080604083850312156134fc57600080fd5b823561350781613cf1565b946020939093013593505050565b6000806000806080858703121561352b57600080fd5b843567ffffffffffffffff8082111561354357600080fd5b61354f888389016132a4565b9550602087013591508082111561356557600080fd5b613571888389016132a4565b945060408701359350606087013591508082111561358e57600080fd5b506134aa8782880161337f565b6000806000606084860312156135b057600080fd5b833567ffffffffffffffff808211156135c857600080fd5b818601915086601f8301126135dc57600080fd5b813560206135ec6132c583613aaf565b8083825282820191508286018b848660051b890101111561360c57600080fd5b600096505b8487101561364157803563ffffffff8116811461362d57600080fd5b835260019690960195918301918301613611565b509750508701359250508082111561365857600080fd5b6136648783880161331f565b9350604086013591508082111561367a57600080fd5b506136878682870161337f565b9150509250925092565b6000602082840312156136a357600080fd5b8135612f2481613d06565b6000602082840312156136c057600080fd5b8151612f2481613d06565b6000602082840312156136dd57600080fd5b813567ffffffffffffffff8111156136f457600080fd5b611d218482850161337f565b6000806040838503121561371357600080fd5b823567ffffffffffffffff81111561372a57600080fd5b6137368582860161337f565b92505060208301356133ea81613cf1565b60006020828403121561375957600080fd5b81356001600160801b0381168114612f2457600080fd5b60006020828403121561378257600080fd5b5035919050565b6000806040838503121561379c57600080fd5b82359150602083013567ffffffffffffffff8111156137ba57600080fd5b6137c68582860161337f565b9150509250929050565b600081518084526137e8816020860160208601613baf565b601f01601f19169290920160200192915050565b6000825161380e818460208701613baf565b9190910192915050565b6000835161382a818460208801613baf565b83519083019061383e818360208801613baf565b01949350505050565b6734b833399d1797b360c11b81526000835161386a816008850160208801613baf565b835190830190613881816008840160208801613baf565b01600801949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906138c0908301846137d0565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561390b5783516001600160a01b0316835292840192918401916001016138e6565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561390b57835183529284019291840191600101613933565b602081016004831061397157634e487b7160e01b600052602160045260246000fd5b91905290565b602081526000612f2460208301846137d0565b6020808252600e908201526d3737ba1030903932bb34b2bbb2b960911b604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252600f908201526e1d1c985b9cd9995c8819985a5b1959608a1b604082015260600190565b604051601f8201601f1916810167ffffffffffffffff81118282101715613aa757613aa7613cdb565b604052919050565b600067ffffffffffffffff821115613ac957613ac9613cdb565b5060051b60200190565b60008219821115613ae657613ae6613c83565b500190565b600060ff821660ff84168060ff03821115613b0857613b08613c83565b019392505050565b60006001600160801b0380841680613b2a57613b2a613c99565b92169190910492915050565b600082613b4557613b45613c99565b500490565b60006001600160801b0380831681851681830481118215151615613b7057613b70613c83565b02949350505050565b6000816000190483118215151615613b9357613b93613c83565b500290565b600082821015613baa57613baa613c83565b500390565b60005b83811015613bca578181015183820152602001613bb2565b83811115611bac5750506000910152565b600081613bea57613bea613c83565b506000190190565b600181811c90821680613c0657607f821691505b60208210811415613c2757634e487b7160e01b600052602260045260246000fd5b50919050565b60006001600160801b0380831681811415613c4a57613c4a613c83565b6001019392505050565b6000600019821415613c6857613c68613c83565b5060010190565b600082613c7e57613c7e613c99565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ef557600080fd5b6001600160e01b031981168114610ef557600080fdfea26469706673582212200db83ec027a4e089ec4b00d51f4dca351e9544a9488a502af64a9b9a2e38443c64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 395,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 397,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 401,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 405,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 409,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 415,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1670,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 273,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 3975,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Counter)2168_storage"
      },
      {
        "astId": 3978,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_multiSigRequest",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(Counter)2168_storage"
      },
      {
        "astId": 3981,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "stakeAmount",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3985,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "reviewers",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3987,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "multiSigThreshold",
        "offset": 0,
        "slot": "12",
        "type": "t_uint128"
      },
      {
        "astId": 3989,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "numReviewers",
        "offset": 16,
        "slot": "12",
        "type": "t_uint128"
      },
      {
        "astId": 3991,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "appWallet",
        "offset": 0,
        "slot": "13",
        "type": "t_address_payable"
      },
      {
        "astId": 3993,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "appDiamond",
        "offset": 0,
        "slot": "14",
        "type": "t_address_payable"
      },
      {
        "astId": 4003,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "contributors",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 4008,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "approvedERC20Addrs",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 4012,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "projectWallets",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 4016,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "stakePerProject",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 4020,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "statusStrings",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 4025,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "status",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_string_memory_ptr,t_enum(ProjectStatus)3998)"
      },
      {
        "astId": 4029,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "votes",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 4033,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "votesReject",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 4039,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "reviewerVotes",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4043,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "projectMinted",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 4047,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "projectThresholds",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(ProjectStatus)3998": {
        "encoding": "inplace",
        "label": "enum ProjectNFT.ProjectStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_enum(ProjectStatus)3998)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => enum ProjectNFT.ProjectStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(ProjectStatus)3998"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2168_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2167,
            "contract": "contracts/ProjectNFT.sol:ProjectNFT",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
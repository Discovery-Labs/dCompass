{
  "address": "0x9f0f6853ae0CDE82558f5456403482DD1bC44077",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_serverAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_approvers",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_senderAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_objectId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_parentId",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "name": "metaDataVerify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "noncesParentIdChildId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "serverAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "setServerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "thresholdNoncesById",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_senderAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_objectId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "votesNeeded",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "name": "thresholdVerify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0a275b2509f7e886a7bbb316da6a1a634ad69ba1555c5205dd88ee654fa80c0e",
  "receipt": {
    "to": null,
    "from": "0x7E13623dd5D070967c8568066bE81a3E5bF75226",
    "contractAddress": "0x9f0f6853ae0CDE82558f5456403482DD1bC44077",
    "transactionIndex": 2,
    "gasUsed": "889183",
    "logsBloom": "0x
    "blockHash": "0x0484936dfb42d0ba9fd4f6657c0b097c41cef80e3b7643adb84ad9c3f53120a0",
    "transactionHash": "0x0a275b2509f7e886a7bbb316da6a1a634ad69ba1555c5205dd88ee654fa80c0e",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 29226647,
        "transactionHash": "0x0a275b2509f7e886a7bbb316da6a1a634ad69ba1555c5205dd88ee654fa80c0e",
        "address": "0x9f0f6853ae0CDE82558f5456403482DD1bC44077",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007e13623dd5d070967c8568066be81a3e5bf75226"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x0484936dfb42d0ba9fd4f6657c0b097c41cef80e3b7643adb84ad9c3f53120a0"
      }
    ],
    "blockNumber": 29226647,
    "cumulativeGasUsed": "1009801",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5eF593FF381b7d36028c795B51e138428d009C20",
    [
      "0x7E13623dd5D070967c8568066bE81a3E5bF75226",
      "0xA072f8Bd3847E21C8EdaAf38D7425631a2A63631",
      "0x2c0B08C414A8EE088596832cf64eFcA283D46703",
      "0x16eBE01dCae1338f8d1802C63712C5279e768d29",
      "0x3E31155a1c17c9F85e74828447aec412090a4622",
      "0x4678854dB7421fF1B3C5ACAe6c5C11e73f4F5702",
      "0xDAFf97a69408Cdb4AeFE331eA029a55e189ef60b"
    ]
  ],
  "solcInputHash": "8fc4b6516f55665ff46823cd784174a7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_serverAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_approvers\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_senderAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_objectId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_parentId\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"metaDataVerify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"noncesParentIdChildId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serverAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setServerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"thresholdNoncesById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_senderAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_objectId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"votesNeeded\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"thresholdVerify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Verify.sol\":\"Verify\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/Verify.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n//import '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\n\\ncontract Verify is Ownable{\\n    //using ECDSA for bytes32;\\n  \\n  mapping(string => mapping(string => uint)) public noncesParentIdChildId; //nonce for each parentId and childid (e.g. projectId and  courseId or CourseId and questId)\\n  mapping(string => uint) public thresholdNoncesById;//nonce for each parentId Threshold (e.g. projectId for course and Course Id for quest)\\n  address public serverAddress;\\n  mapping (address => bool) public approvers;\\n  \\n  constructor(address _serverAddress, address[] memory _approvers){\\n      require(_serverAddress != address(0));\\n      serverAddress = _serverAddress;\\n      for (uint i=0; i< _approvers.length; i++){\\n        approvers[_approvers[i]] = true;\\n      }\\n  }\\n  \\n  function getHash(address _senderAddress, string memory _objectId, string memory _parentId, address _contractAddress) internal view returns (bytes32) {\\n    return keccak256(abi.encodePacked(noncesParentIdChildId[_parentId][_objectId], _senderAddress, _contractAddress, address(this), _objectId));\\n  }\\n\\n  function metaDataVerify(address _senderAddress, string memory _objectId, string memory _parentId, bytes32 r, bytes32 s, uint8 v) public returns(bool) {\\n    bytes32 hashRecover = getHash(_senderAddress, _objectId, _parentId, _msgSender());\\n    address signer = ecrecover(keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",hashRecover)), v, r, s);\\n    require( signer == serverAddress,\\\"SIGNER MUST BE SERVER\\\"); \\n    noncesParentIdChildId[_parentId][_objectId]++;\\n    return signer == serverAddress;\\n  }\\n\\n  function thresholdVerify(address _senderAddress, string memory _objectId, uint votesNeeded, bytes32 r, bytes32 s, uint8 v) public returns(bool){\\n    bytes32 hashRecover = keccak256(abi.encodePacked(thresholdNoncesById[_objectId], votesNeeded, _senderAddress, _msgSender(), address(this), _objectId));\\n    address signer = ecrecover(keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",hashRecover)), v, r, s);\\n    require( signer == serverAddress,\\\"SIGNER MUST BE SERVER\\\"); \\n    thresholdNoncesById[_objectId]++;\\n    return signer == serverAddress;\\n  }\\n\\n  function setServerAddress(address _newAddress) public{\\n    require(approvers[_msgSender()], \\\"must be approved\\\");\\n    require(_newAddress != address(0));\\n    serverAddress = _newAddress;\\n  } \\n}\",\"keccak256\":\"0x2b304f097527a35d12e9dc873eec9b9e00d09f8cc51f7218f0de8e0a1be53547\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000dd938038062000dd9833981016040819052620000349162000153565b6200003f33620000e6565b6001600160a01b0382166200005357600080fd5b600380546001600160a01b0319166001600160a01b03841617905560005b8151811015620000dd576001600460008484815181106200009657620000966200026d565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580620000d48162000243565b91505062000071565b50505062000299565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200014e57600080fd5b919050565b600080604083850312156200016757600080fd5b620001728362000136565b602084810151919350906001600160401b03808211156200019257600080fd5b818601915086601f830112620001a757600080fd5b815181811115620001bc57620001bc62000283565b8060051b604051601f19603f83011681018181108582111715620001e457620001e462000283565b604052828152858101935084860182860187018b10156200020457600080fd5b600095505b8386101562000232576200021d8162000136565b85526001959095019493860193860162000209565b508096505050505050509250929050565b60006000198214156200026657634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b610b3080620002a96000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063715018a611610066578063715018a61461016c5780638da5cb5b14610174578063db420fe314610199578063dfc718d0146101ac578063f2fde38b146101d757600080fd5b8063040c8c7a146100a35780630a144391146100fe5780631206510614610131578063466cc53e1461014457806347b64eb014610157575b600080fd5b6100eb6100b136600461096f565b8151602081840181018051600182529282019482019490942091909352815180830184018051928152908401929093019190912091525481565b6040519081526020015b60405180910390f35b61012161010c36600461080b565b60046020526000908152604090205460ff1681565b60405190151581526020016100f5565b61012161013f36600461082d565b6101ea565b6101216101523660046108c4565b610367565b61016a61016536600461080b565b6104d4565b005b61016a61055b565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100f5565b600354610181906001600160a01b031681565b6100eb6101ba366004610932565b805160208183018101805160028252928201919093012091525481565b61016a6101e536600461080b565b6105c1565b6000806101f98888883361068c565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052909150600090600190605c0160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018890526080810187905260a0016020604051602081039080840390855afa158015610293573d6000803e3d6000fd5b5050604051601f1901516003549092506001600160a01b0380841691161490506102fc5760405162461bcd60e51b815260206004820152601560248201527429a4a3a722a91026aaa9aa1021229029a2a92b22a960591b60448201526064015b60405180910390fd5b60018760405161030c9190610a0e565b9081526020016040518091039020886040516103289190610a0e565b908152604051908190036020019020805490600061034583610abb565b90915550506003546001600160a01b0390811691161498975050505050505050565b60008060028760405161037a9190610a0e565b90815260200160405180910390205486896103923390565b308b6040516020016103a996959493929190610a67565b604051602081830303815290604052805190602001209050600060018260405160200161040291907f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b60408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018890526080810187905260a0016020604051602081039080840390855afa158015610460573d6000803e3d6000fd5b5050604051601f1901516003549092506001600160a01b0380841691161490506104c45760405162461bcd60e51b815260206004820152601560248201527429a4a3a722a91026aaa9aa1021229029a2a92b22a960591b60448201526064016102f3565b6002886040516103289190610a0e565b3360009081526004602052604090205460ff166105265760405162461bcd60e51b815260206004820152601060248201526f1b5d5cdd08189948185c1c1c9bdd995960821b60448201526064016102f3565b6001600160a01b03811661053957600080fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146105b55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102f3565b6105bf6000610701565b565b6000546001600160a01b0316331461061b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102f3565b6001600160a01b0381166106805760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f3565b61068981610701565b50565b600060018360405161069e9190610a0e565b9081526020016040518091039020846040516106ba9190610a0e565b908152602001604051809103902054858330876040516020016106e1959493929190610a1a565b604051602081830303815290604052805190602001209050949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461076857600080fd5b919050565b600082601f83011261077e57600080fd5b813567ffffffffffffffff8082111561079957610799610ae4565b604051601f8301601f19908116603f011681019082821181831017156107c1576107c1610ae4565b816040528381528660208588010111156107da57600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff8116811461076857600080fd5b60006020828403121561081d57600080fd5b61082682610751565b9392505050565b60008060008060008060c0878903121561084657600080fd5b61084f87610751565b9550602087013567ffffffffffffffff8082111561086c57600080fd5b6108788a838b0161076d565b9650604089013591508082111561088e57600080fd5b5061089b89828a0161076d565b94505060608701359250608087013591506108b860a088016107fa565b90509295509295509295565b60008060008060008060c087890312156108dd57600080fd5b6108e687610751565b9550602087013567ffffffffffffffff81111561090257600080fd5b61090e89828a0161076d565b9550506040870135935060608701359250608087013591506108b860a088016107fa565b60006020828403121561094457600080fd5b813567ffffffffffffffff81111561095b57600080fd5b6109678482850161076d565b949350505050565b6000806040838503121561098257600080fd5b823567ffffffffffffffff8082111561099a57600080fd5b6109a68683870161076d565b935060208501359150808211156109bc57600080fd5b506109c98582860161076d565b9150509250929050565b6000815160005b818110156109f457602081850181015186830152016109da565b81811115610a03576000828601525b509290920192915050565b600061082682846109d3565b85815260006bffffffffffffffffffffffff19808760601b166020840152808660601b166034840152808560601b16604884015250610a5c605c8301846109d3565b979650505050505050565b86815285602082015260006bffffffffffffffffffffffff19808760601b166040840152808660601b166054840152808560601b16606884015250610aaf607c8301846109d3565b98975050505050505050565b6000600019821415610add57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea26469706673582212206f7a6875659c468aaa0825fbd9f069148b78279c6a34365f6b9c1478c598839a64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063715018a611610066578063715018a61461016c5780638da5cb5b14610174578063db420fe314610199578063dfc718d0146101ac578063f2fde38b146101d757600080fd5b8063040c8c7a146100a35780630a144391146100fe5780631206510614610131578063466cc53e1461014457806347b64eb014610157575b600080fd5b6100eb6100b136600461096f565b8151602081840181018051600182529282019482019490942091909352815180830184018051928152908401929093019190912091525481565b6040519081526020015b60405180910390f35b61012161010c36600461080b565b60046020526000908152604090205460ff1681565b60405190151581526020016100f5565b61012161013f36600461082d565b6101ea565b6101216101523660046108c4565b610367565b61016a61016536600461080b565b6104d4565b005b61016a61055b565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100f5565b600354610181906001600160a01b031681565b6100eb6101ba366004610932565b805160208183018101805160028252928201919093012091525481565b61016a6101e536600461080b565b6105c1565b6000806101f98888883361068c565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052909150600090600190605c0160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018890526080810187905260a0016020604051602081039080840390855afa158015610293573d6000803e3d6000fd5b5050604051601f1901516003549092506001600160a01b0380841691161490506102fc5760405162461bcd60e51b815260206004820152601560248201527429a4a3a722a91026aaa9aa1021229029a2a92b22a960591b60448201526064015b60405180910390fd5b60018760405161030c9190610a0e565b9081526020016040518091039020886040516103289190610a0e565b908152604051908190036020019020805490600061034583610abb565b90915550506003546001600160a01b0390811691161498975050505050505050565b60008060028760405161037a9190610a0e565b90815260200160405180910390205486896103923390565b308b6040516020016103a996959493929190610a67565b604051602081830303815290604052805190602001209050600060018260405160200161040291907f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b60408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018890526080810187905260a0016020604051602081039080840390855afa158015610460573d6000803e3d6000fd5b5050604051601f1901516003549092506001600160a01b0380841691161490506104c45760405162461bcd60e51b815260206004820152601560248201527429a4a3a722a91026aaa9aa1021229029a2a92b22a960591b60448201526064016102f3565b6002886040516103289190610a0e565b3360009081526004602052604090205460ff166105265760405162461bcd60e51b815260206004820152601060248201526f1b5d5cdd08189948185c1c1c9bdd995960821b60448201526064016102f3565b6001600160a01b03811661053957600080fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146105b55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102f3565b6105bf6000610701565b565b6000546001600160a01b0316331461061b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102f3565b6001600160a01b0381166106805760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f3565b61068981610701565b50565b600060018360405161069e9190610a0e565b9081526020016040518091039020846040516106ba9190610a0e565b908152602001604051809103902054858330876040516020016106e1959493929190610a1a565b604051602081830303815290604052805190602001209050949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461076857600080fd5b919050565b600082601f83011261077e57600080fd5b813567ffffffffffffffff8082111561079957610799610ae4565b604051601f8301601f19908116603f011681019082821181831017156107c1576107c1610ae4565b816040528381528660208588010111156107da57600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff8116811461076857600080fd5b60006020828403121561081d57600080fd5b61082682610751565b9392505050565b60008060008060008060c0878903121561084657600080fd5b61084f87610751565b9550602087013567ffffffffffffffff8082111561086c57600080fd5b6108788a838b0161076d565b9650604089013591508082111561088e57600080fd5b5061089b89828a0161076d565b94505060608701359250608087013591506108b860a088016107fa565b90509295509295509295565b60008060008060008060c087890312156108dd57600080fd5b6108e687610751565b9550602087013567ffffffffffffffff81111561090257600080fd5b61090e89828a0161076d565b9550506040870135935060608701359250608087013591506108b860a088016107fa565b60006020828403121561094457600080fd5b813567ffffffffffffffff81111561095b57600080fd5b6109678482850161076d565b949350505050565b6000806040838503121561098257600080fd5b823567ffffffffffffffff8082111561099a57600080fd5b6109a68683870161076d565b935060208501359150808211156109bc57600080fd5b506109c98582860161076d565b9150509250929050565b6000815160005b818110156109f457602081850181015186830152016109da565b81811115610a03576000828601525b509290920192915050565b600061082682846109d3565b85815260006bffffffffffffffffffffffff19808760601b166020840152808660601b166034840152808560601b16604884015250610a5c605c8301846109d3565b979650505050505050565b86815285602082015260006bffffffffffffffffffffffff19808760601b166040840152808660601b166054840152808560601b16606884015250610aaf607c8301846109d3565b98975050505050505050565b6000600019821415610add57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea26469706673582212206f7a6875659c468aaa0825fbd9f069148b78279c6a34365f6b9c1478c598839a64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 273,
        "contract": "contracts/Verify.sol:Verify",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4998,
        "contract": "contracts/Verify.sol:Verify",
        "label": "noncesParentIdChildId",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_string_memory_ptr,t_uint256))"
      },
      {
        "astId": 5002,
        "contract": "contracts/Verify.sol:Verify",
        "label": "thresholdNoncesById",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 5004,
        "contract": "contracts/Verify.sol:Verify",
        "label": "serverAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 5008,
        "contract": "contracts/Verify.sol:Verify",
        "label": "approvers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_string_memory_ptr,t_uint256))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(string => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
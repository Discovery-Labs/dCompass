{
  "address": "0xAB087AC3b091ea0584Cce918A5243F19069708B1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_walletAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_reviewers",
          "type": "address[]"
        },
        {
          "internalType": "uint128",
          "name": "_initialThreshold",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "_questId",
          "type": "string"
        }
      ],
      "name": "NFTProjectMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "_projectId",
          "type": "string"
        }
      ],
      "name": "ProjectApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "ReceiveCalled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_projectId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "newContributor",
          "type": "address"
        }
      ],
      "name": "addProjectContributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_projectId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_projectWallet",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "level",
          "type": "string"
        }
      ],
      "name": "addProjectWallet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reviewer",
          "type": "address"
        }
      ],
      "name": "addReviewer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "appWallet",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_projectId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "newAddr",
          "type": "address"
        }
      ],
      "name": "changeProjectWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "firstURIParts",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "secondURIParts",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "_projectId",
          "type": "string"
        }
      ],
      "name": "createToken",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAppDiamond",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_projectId",
          "type": "string"
        }
      ],
      "name": "getContributors",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSFTAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multiSigThreshold",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numReviewers",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "projectMinted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_projectId",
          "type": "string"
        }
      ],
      "name": "projectRefund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "projectThresholds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "projectWallets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "refundPerProject",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "reviewerVotes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "reviewers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_appDiamond",
          "type": "address"
        }
      ],
      "name": "setAppDiamond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_SFTAddr",
          "type": "address"
        }
      ],
      "name": "setSFTAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newName",
          "type": "string"
        }
      ],
      "name": "setStatusString",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_newThreshold",
          "type": "uint128"
        }
      ],
      "name": "setThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "sponsorLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "stakePerProject",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "status",
      "outputs": [
        {
          "internalType": "enum ProjectNFT.ProjectStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "statusStrings",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_projectId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "newLevel",
          "type": "string"
        }
      ],
      "name": "updateSponsorLevel",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_contributors",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_projectId",
          "type": "string"
        }
      ],
      "name": "voteForApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_projectId",
          "type": "string"
        }
      ],
      "name": "voteForRejection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "votesReject",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0697961c6d20f390bf5af0bd276eaa0d20bfea986fe5db424cde04ce310ae0ad",
  "receipt": {
    "to": null,
    "from": "0x5D9f534E380E541a63a7dF62547e199A0f7489b5",
    "contractAddress": "0xAB087AC3b091ea0584Cce918A5243F19069708B1",
    "transactionIndex": 37,
    "gasUsed": "4847592",
    "logsBloom": "0x00000400000000000000000000000000000000000000000000800010000000000000000000000020000000000000000000008000000000000000000000000000000000000000000000000000000000800001000000000000000100000000000000000000020000000000000000000800000000000000000080000000000000400000000000800000000000000000000000000000000010000000000000000000200000000000000000000000000000000000000000000000000000000000004000040000000000000001000000000000000000000000000000100000001020000200000000000000000000000000000000000000000000000000000000140000",
    "blockHash": "0x18df8e57eb2b35e3297bcfee9a4a8720f64c49a169a5297aa533601485e4dc3f",
    "transactionHash": "0x0697961c6d20f390bf5af0bd276eaa0d20bfea986fe5db424cde04ce310ae0ad",
    "logs": [
      {
        "transactionIndex": 37,
        "blockNumber": 26284473,
        "transactionHash": "0x0697961c6d20f390bf5af0bd276eaa0d20bfea986fe5db424cde04ce310ae0ad",
        "address": "0xAB087AC3b091ea0584Cce918A5243F19069708B1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005d9f534e380e541a63a7df62547e199a0f7489b5"
        ],
        "data": "0x",
        "logIndex": 418,
        "blockHash": "0x18df8e57eb2b35e3297bcfee9a4a8720f64c49a169a5297aa533601485e4dc3f"
      },
      {
        "transactionIndex": 37,
        "blockNumber": 26284473,
        "transactionHash": "0x0697961c6d20f390bf5af0bd276eaa0d20bfea986fe5db424cde04ce310ae0ad",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005d9f534e380e541a63a7df62547e199a0f7489b5",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000019d549f2c398000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000010649cf59c52b179d620000000000000000000000000000000000000000000000000dc6e169b4a0680000000000000000000000000000000000000000000000010649e92f0f1ddb3562",
        "logIndex": 419,
        "blockHash": "0x18df8e57eb2b35e3297bcfee9a4a8720f64c49a169a5297aa533601485e4dc3f"
      }
    ],
    "blockNumber": 26284473,
    "cumulativeGasUsed": "18358247",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5D9f534E380E541a63a7dF62547e199A0f7489b5",
    [
      "0x5D9f534E380E541a63a7dF62547e199A0f7489b5",
      "0xA072f8Bd3847E21C8EdaAf38D7425631a2A63631",
      "0x2c0B08C414A8EE088596832cf64eFcA283D46703",
      "0x16eBE01dCae1338f8d1802C63712C5279e768d29",
      "0x3E31155a1c17c9F85e74828447aec412090a4622",
      "0x4678854dB7421fF1B3C5ACAe6c5C11e73f4F5702",
      "0xDAFf97a69408Cdb4AeFE331eA029a55e189ef60b",
      "0xD39C3Cdb811f6544067ECFeDEf40855578cA0C52"
    ],
    10
  ],
  "numDeployments": 2,
  "solcInputHash": "e900b873528671424b2623cdf1b46bc1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_walletAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_reviewers\",\"type\":\"address[]\"},{\"internalType\":\"uint128\",\"name\":\"_initialThreshold\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_questId\",\"type\":\"string\"}],\"name\":\"NFTProjectMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_projectId\",\"type\":\"string\"}],\"name\":\"ProjectApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ReceiveCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_projectId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"newContributor\",\"type\":\"address\"}],\"name\":\"addProjectContributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_projectId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_projectWallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"level\",\"type\":\"string\"}],\"name\":\"addProjectWallet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reviewer\",\"type\":\"address\"}],\"name\":\"addReviewer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"appWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_projectId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"changeProjectWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"firstURIParts\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"secondURIParts\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_projectId\",\"type\":\"string\"}],\"name\":\"createToken\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAppDiamond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_projectId\",\"type\":\"string\"}],\"name\":\"getContributors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSFTAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiSigThreshold\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numReviewers\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"projectMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_projectId\",\"type\":\"string\"}],\"name\":\"projectRefund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"projectThresholds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"projectWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"refundPerProject\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reviewerVotes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reviewers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_appDiamond\",\"type\":\"address\"}],\"name\":\"setAppDiamond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_SFTAddr\",\"type\":\"address\"}],\"name\":\"setSFTAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"setStatusString\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_newThreshold\",\"type\":\"uint128\"}],\"name\":\"setThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"sponsorLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"stakePerProject\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum ProjectNFT.ProjectStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"statusStrings\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_projectId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newLevel\",\"type\":\"string\"}],\"name\":\"updateSponsorLevel\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_projectId\",\"type\":\"string\"}],\"name\":\"voteForApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_projectId\",\"type\":\"string\"}],\"name\":\"voteForRejection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"votesReject\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProjectNFT.sol\":\"ProjectNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1cbe42915bc66227970fe99bc0f783eb1de30f2b48f984af01ad45edb9658698\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ProjectNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title dCompassProjectNFT\\n * @dev NFTs for creating project\\n*/\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract ProjectNFT is ERC721URIStorage, Ownable, ReentrancyGuard{\\n    using Counters for Counters.Counter;\\n    \\n    Counters.Counter private _tokenIds;\\n    Counters.Counter private _multiSigRequest;\\n    \\n    //uint public stakeAmount = 0.001 ether;\\n    mapping (address => bool) public reviewers;\\n    uint128 public multiSigThreshold; //gives minimum multisig percentage (30 = 30% )\\n    uint128 public numReviewers;//number of Reviewers. Needed for threshold calculation\\n    address payable public appWallet;//sign in a script and also withdraw slashed stakes\\n    address payable appDiamond;//address of the app level diamond\\n    address payable sponsorSFTAddr;//address of ERC-1155 that controls sponsor staking\\n    enum ProjectStatus{ NONEXISTENT, PENDING, DENIED, APPROVED }\\n    \\n    mapping (string => address[]) internal contributors;\\n    //mapping (string => address[]) internal approvedERC20Addrs;\\n    mapping (string => address) public projectWallets;\\n    mapping (string => uint) public stakePerProject;\\n    mapping (string => uint) public refundPerProject;\\n    mapping (string => uint) public sponsorLevel;\\n    mapping (string => uint) sponsorLevels;\\n    mapping (uint => string) public statusStrings;\\n    mapping (string => ProjectStatus) public status;\\n    mapping (string => uint) public votes;//tally of approved votes;\\n    mapping (string => uint) public votesReject;//tally of rejection votes;\\n    mapping (string => mapping(address => bool)) public reviewerVotes;//vote record of reviewers for ProjectId\\n    //mapping (string => uint16[]) public rarities; // rarities of each image uint16 used for pakcing purposes\\n    mapping (string => bool) public projectMinted; // tracks if mint has been done\\n    mapping (string => uint) public projectThresholds;// threshold for the project contributors to approve courses\\n    \\n    event NFTProjectMinted(address indexed _to, string indexed _tokenURI, string indexed _questId);\\n    event ReceiveCalled(address _caller, uint _value);\\n    event ProjectApproved(string indexed _projectId);\\n\\n    constructor(address payable _walletAddress, address[] memory _reviewers, uint128 _initialThreshold) ERC721(\\\"dCompassProject\\\", \\\"DCOMPROJ\\\"){\\n        require(_reviewers.length > 0, \\\"Must have at least 1 reviewer\\\");\\n        require(_initialThreshold > 0 && _initialThreshold <=100, \\\"invalid threshold\\\");\\n        multiSigThreshold = _initialThreshold;\\n        appWallet = _walletAddress;\\n        for (uint i=0; i<_reviewers.length; i++){\\n            if(_reviewers[i]!= address(0) && !reviewers[_reviewers[i]]){\\n                reviewers[_reviewers[i]] = true;\\n                numReviewers++;\\n            }\\n        }\\n        statusStrings[0] = \\\"NONEXISTENT\\\";\\n        statusStrings[1] = \\\"PENDING\\\";\\n        statusStrings[2] = \\\"DENIED\\\";\\n        statusStrings[3] = \\\"APPROVED\\\";\\n        sponsorLevels[\\\"SILVER\\\"] = 1;\\n        sponsorLevels[\\\"GOLD\\\"] = 2;\\n        sponsorLevels[\\\"DIAMOND\\\"] = 3;\\n    } \\n\\n    modifier onlyReviewer(){\\n        require(reviewers[_msgSender()], \\\"not a reviewer\\\");\\n        _;\\n    }\\n\\n    receive() external payable {\\n        emit ReceiveCalled(msg.sender, msg.value);\\n    }\\n    \\n    function voteForApproval(address[] memory _contributors, uint _threshold, string memory _projectId) public onlyReviewer{\\n        require(\\n            status[_projectId] == ProjectStatus.PENDING,\\n            \\\"status not pending\\\"\\n        );\\n        require(!reviewerVotes[_projectId][_msgSender()], \\\"already voted for this project\\\");\\n        require (projectWallets[_projectId] != address(0), \\\"no project wallet\\\");\\n        votes[_projectId]++;\\n        reviewerVotes[_projectId][_msgSender()] = true;\\n        if(votes[_projectId] == 1){\\n            require(_contributors.length >0, \\\"empty array\\\");\\n            require(_threshold > 0 && _threshold <= 100, \\\"invalid threshold\\\");\\n            //rarities[_projectId] = _rarities;\\n            contributors[_projectId] = _contributors;\\n            projectThresholds[_projectId] = _threshold;\\n            //approvedERC20Addrs[_projectId] = approvedAddrs;\\n            if(multiSigThreshold*numReviewers/100 == 0){\\n                status[_projectId] = ProjectStatus.APPROVED;\\n                (bool success,) = appWallet.call{value : stakePerProject[_projectId]}(\\\"\\\");\\n                require(success, \\\"transfer failed\\\");\\n                emit ProjectApproved(_projectId);\\n                //approveMint(_projectId);\\n            }\\n        }\\n        else{\\n            uint minVotes = multiSigThreshold*numReviewers/100;\\n            if(minVotes * 100 < multiSigThreshold*numReviewers){\\n                minVotes++;\\n            }\\n            if(votes[_projectId] >= minVotes){\\n                status[_projectId] = ProjectStatus.APPROVED;\\n                (bool success,) = appWallet.call{value : stakePerProject[_projectId]}(\\\"\\\");\\n                require(success, \\\"transfer failed\\\");\\n                emit ProjectApproved(_projectId);\\n                //approveMint(_projectId);\\n            }  \\n        }\\n    }\\n\\n    function voteForRejection(string memory _projectId) public onlyReviewer{\\n        require(status[_projectId] == ProjectStatus.PENDING, \\\"project not pending\\\");\\n        require(!reviewerVotes[_projectId][_msgSender()], \\\"already voted for this project\\\");\\n        votesReject[_projectId]++;\\n        reviewerVotes[_projectId][_msgSender()] = true;\\n        uint minVotes = multiSigThreshold*numReviewers/100;\\n        if(minVotes * 100 < multiSigThreshold*numReviewers){\\n            minVotes++;\\n        }\\n        if(votesReject[_projectId] >= minVotes){\\n            status[_projectId] = ProjectStatus.DENIED;\\n            (bool success,) = payable(projectWallets[_projectId]).call{value : stakePerProject[_projectId]}(\\\"\\\");\\n            require(success, \\\"transfer failed\\\");\\n        }\\n    }\\n    \\n    function createToken(uint32[] memory firstURIParts, uint256[] memory secondURIParts, string memory _projectId) public onlyReviewer returns(uint[] memory){\\n        require(status[_projectId] == ProjectStatus.APPROVED, \\\"job not approved yet\\\");\\n        require(!projectMinted[_projectId], \\\"already minted\\\");\\n        require(firstURIParts.length == secondURIParts.length && firstURIParts.length == contributors[_projectId].length, \\\"incorrect arrs\\\");\\n\\n        //batch minting\\n        uint256[] memory newItems = new uint256[](contributors[_projectId].length);\\n        uint256 newItemId;\\n        string memory _tokenURI;\\n\\n        for(uint i =0; i< contributors[_projectId].length; i++){\\n        _tokenIds.increment();\\n        newItemId = _tokenIds.current();\\n        _tokenURI = string(abi.encodePacked(\\\"ipfs://f\\\",uint32tohexstr(firstURIParts[i]),uint256tohexstr(secondURIParts[i])));\\n        \\n        _mint(contributors[_projectId][i], newItemId);\\n        _setTokenURI(newItemId, _tokenURI);\\n        \\n        emit NFTProjectMinted(contributors[_projectId][i], _tokenURI, _projectId);\\n        }\\n        //set the approval within app Diamond contract\\n        (bool success, ) = appDiamond.call(abi.encodeWithSelector(bytes4(keccak256(\\\"setApproved(string)\\\")), _projectId));\\n        require(success, \\\"diamond approval failed\\\");\\n\\n        //mint SFT here\\n        (success,) = sponsorSFTAddr.call(abi.encodeWithSelector(bytes4(keccak256(\\\"mint(uint256,address,string)\\\")), sponsorLevel[_projectId], projectWallets[_projectId], _projectId));\\n        require(success, \\\"sponsor mint failed\\\");\\n\\n        projectMinted[_projectId] = true;\\n        return newItems;    \\n    }\\n\\n    function addProjectWallet(string memory _projectId, address _projectWallet, string memory level) external payable{\\n        require (projectWallets[_projectId] == address(0), \\\"already project wallet\\\");\\n        //require(status[_projectId] == ProjectStatus.NONEXISTENT);\\n        uint pendingSponsorLevel = sponsorLevels[level];\\n        require (pendingSponsorLevel > 0, \\\"invalid sponsor stake\\\");\\n        (bool success, bytes memory data) = sponsorSFTAddr.call(abi.encodeWithSelector(bytes4(keccak256(\\\"stakeAmounts(uint256)\\\")), pendingSponsorLevel));\\n        require(success);\\n        uint stakeAmount = abi.decode(data, (uint256)); \\n        require (msg.value >= stakeAmount, \\\"not enough staked\\\");\\n        /*(success, data) = sponsorSFTAddr.call(abi.encodeWithSelector(bytes4(keccak256(\\\"isAddrOwner(address)\\\")), _projectWallet));\\n        require(success);\\n        bool isActive = abi.decode(data, (bool));\\n        require(!isActive, \\\"address already linked with active project\\\");*/\\n        projectWallets[_projectId] = _projectWallet;\\n        stakePerProject[_projectId] = stakeAmount;\\n        sponsorLevel[_projectId] = pendingSponsorLevel;\\n        status[_projectId]= ProjectStatus.PENDING;\\n        if(msg.value > stakeAmount){\\n            (success, ) = payable(_msgSender()).call{value : msg.value - stakeAmount}(\\\"\\\");\\n            require(success, \\\"failed refund\\\");\\n        }\\n    }\\n\\n    function changeProjectWallet(string memory _projectId, address newAddr) external {\\n        require(_msgSender() == sponsorSFTAddr, \\\"ProjectNFT: wrong caller\\\");\\n        require (projectWallets[_projectId] != address(0), \\\"no project wallet\\\");\\n        projectWallets[_projectId] = newAddr;\\n    }\\n\\n    function projectRefund(string memory _projectId) external payable{\\n        require(status[_projectId] == ProjectStatus.PENDING || status[_projectId] == ProjectStatus.APPROVED, \\\"incorrect status\\\");\\n        require(_msgSender() == appWallet, \\\"wrong sender\\\");//multiSig Wallet of app\\n        refundPerProject[_projectId] += msg.value;\\n    }\\n\\n    function updateSponsorLevel(string memory _projectId, string memory newLevel) external payable nonReentrant {\\n        require(status[_projectId] == ProjectStatus.PENDING || status[_projectId] == ProjectStatus.APPROVED, \\\"incorrect status\\\");\\n        require(_msgSender() == projectWallets[_projectId], \\\"wrong sender\\\");\\n        uint newSponsorLevel = sponsorLevels[newLevel];\\n        require (newSponsorLevel > 0, \\\"invalid level\\\");\\n        (bool success, bytes memory data) = sponsorSFTAddr.call(abi.encodeWithSelector(bytes4(keccak256(\\\"stakeAmounts(uint256)\\\")), newSponsorLevel));\\n        require(success);\\n        uint stakeAmount = abi.decode(data, (uint256));\\n        uint pastAmount = stakePerProject[_projectId];\\n        uint currLevel = sponsorLevel[_projectId];\\n        if(currLevel == newSponsorLevel){\\n            if(status[_projectId] == ProjectStatus.PENDING){\\n                if(stakeAmount < pastAmount){\\n                    stakePerProject[_projectId] = stakeAmount;\\n                    (success, ) = payable(_msgSender()).call{value : pastAmount - stakeAmount}(\\\"\\\");\\n                    require(success, \\\"failed refund\\\");\\n                    \\n                }\\n            }\\n            else{\\n                stakePerProject[_projectId] = stakeAmount;\\n                uint256 refund = refundPerProject[_projectId];\\n                delete refundPerProject[_projectId];\\n                (success, ) = payable(_msgSender()).call{value : refund}(\\\"\\\");\\n                require(success, \\\"failed refund\\\");                \\n                }\\n            return;\\n        }\\n        stakePerProject[_projectId] = stakeAmount;\\n        sponsorLevel[_projectId] = newSponsorLevel;\\n        if (stakeAmount <= pastAmount){\\n            if(status[_projectId] == ProjectStatus.PENDING){\\n                (success, ) = payable(_msgSender()).call{value : pastAmount - stakeAmount}(\\\"\\\");\\n                require(success, \\\"failed refund\\\");\\n                \\n            }\\n            else{\\n                uint256 refund = refundPerProject[_projectId];\\n                delete refundPerProject[_projectId];\\n                (success, ) = payable(_msgSender()).call{value : refund}(\\\"\\\");\\n                require(success, \\\"failed refund\\\");\\n            }\\n        }\\n        else{\\n            require(msg.value >= stakeAmount - pastAmount, \\\"insufficent funds for new level\\\");\\n            if(msg.value > stakeAmount - pastAmount){\\n            (success, ) = payable(_msgSender()).call{value : msg.value + pastAmount - stakeAmount}(\\\"\\\");\\n            require(success, \\\"failed refund\\\");\\n            }\\n        }\\n        if(projectMinted[_projectId]){\\n            (success, data) = sponsorSFTAddr.call(abi.encodeWithSelector(bytes4(keccak256(\\\"updateLevel(uint256,address,string,uint256)\\\")), currLevel, projectWallets[_projectId], _projectId, newSponsorLevel));\\n            require(success);\\n        }\\n        // stakePerProject[_projectId] = stakeAmount;\\n        // sponsorLevel[_projectId] = newSponsorLevel;\\n    }\\n\\n    function addReviewer(address _reviewer) public onlyReviewer {\\n        require (!reviewers[_reviewer], \\\"already reviewer\\\");\\n        reviewers[_reviewer]=true;\\n        numReviewers++;\\n    }\\n\\n    function setStatusString(uint index, string memory newName) external onlyReviewer{\\n        statusStrings[index] = newName;\\n    }\\n\\n    function addProjectContributor(string memory _projectId, address newContributor) external{\\n        require(status[_projectId]!= ProjectStatus.NONEXISTENT, \\\"project doesn't exist\\\");\\n        require(!projectMinted[_projectId], \\\"project already minted\\\");\\n        bool isAllowed = reviewers[_msgSender()];\\n        bool notContributor = true;\\n        address[] memory currContributors = contributors[_projectId];\\n        for(uint i=0; i<currContributors.length; i++){\\n            if(!isAllowed && _msgSender() == currContributors[i]){\\n                isAllowed = true;\\n            }\\n            if(newContributor == currContributors[i]){\\n                notContributor = false;\\n            }\\n        }\\n        require(isAllowed, \\\"must be a project contributor or reviewer\\\");\\n        require(notContributor, \\\"already a contributor on project\\\");\\n        contributors[_projectId].push(newContributor);\\n    }\\n\\n    function setThreshold(uint128 _newThreshold) public onlyReviewer{\\n        require(_newThreshold > 0 && _newThreshold <=100, \\\"invalid threshold\\\");\\n        multiSigThreshold = _newThreshold;\\n    }\\n    \\n    //helpers for building URIs\\n    function uint8tohexchar(uint8 i) internal pure returns (uint8) {\\n        return (i > 9) ?\\n            (i + 87) : // ascii a-f\\n            (i + 48); // ascii 0-9\\n    }\\n    \\n    function uint32tohexstr(uint32 i) internal pure returns (string memory) {\\n            bytes memory o = new bytes(8);\\n            uint32 mask = 0x0000000f;\\n            uint count =8;\\n            while (count>0){\\n                o[count-1]=bytes1(uint8tohexchar(uint8(i & mask)));\\n                if(count>1){\\n                    i = i >> 4;\\n                }\\n                count--;\\n            }\\n            return string(o);\\n        }\\n \\n    function uint256tohexstr(uint256 i) internal pure returns (string memory) {\\n        bytes memory o = new bytes(64);\\n        uint256 mask = 0x0000000000000000000000000000000f;\\n        \\n        uint count = 64;\\n        while (count>0){\\n            o[count-1]=bytes1(uint8tohexchar(uint8(i & mask)));\\n            if(count>1){\\n                i = i >> 4;\\n            }\\n            count--; \\n        }\\n        return string(o);\\n    }\\n\\n    function getContributors(string memory _projectId) external view returns(address[] memory){\\n        return contributors[_projectId];\\n    }\\n\\n    function setAppDiamond(address payable _appDiamond) external onlyReviewer{\\n        require(_appDiamond != address(0));\\n        appDiamond = _appDiamond;\\n    }\\n\\n    function getAppDiamond() external view returns(address){\\n        return appDiamond;\\n    }\\n\\n    function setSFTAddr(address payable _SFTAddr) external onlyReviewer{\\n        require(_SFTAddr != address(0));\\n        sponsorSFTAddr = _SFTAddr;\\n    }\\n\\n    function getSFTAddr() external view returns(address){\\n        return sponsorSFTAddr;\\n    }\\n\\n}\",\"keccak256\":\"0xf372038d0b30bdda9bc1ea2d8d4fc8c2545c50c0c0a71b359d5dcbd24cb8c01d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200555838038062005558833981016040819052620000349162000606565b604080518082018252600f81526e1910dbdb5c185cdcd41c9bda9958dd608a1b6020808301918252835180850190945260088452672221a7a6a82927a560c11b9084015281519192916200008b9160009162000536565b508051620000a190600190602084019062000536565b505050620000be620000b8620004e060201b60201c565b620004e4565b60016008558151620001175760405162461bcd60e51b815260206004820152601d60248201527f4d7573742068617665206174206c65617374203120726576696577657200000060448201526064015b60405180910390fd5b6000816001600160801b03161180156200013b57506064816001600160801b031611155b6200017d5760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a59081d1a1c995cda1bdb19607a1b60448201526064016200010e565b600c80546001600160801b0319166001600160801b038316179055600d80546001600160a01b0319166001600160a01b03851617905560005b8251811015620002ed5760006001600160a01b0316838281518110620001e057620001e0620007a5565b60200260200101516001600160a01b0316141580156200023d5750600b6000848381518110620002145762000214620007a5565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16155b15620002d8576001600b60008584815181106200025e576200025e620007a5565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600c8054600160801b90046001600160801b0316906010620002b28362000747565b91906101000a8154816001600160801b0302191690836001600160801b03160217905550505b80620002e48162000771565b915050620001b6565b5060408051808201909152600b81526a1393d391561254d511539560aa1b6020808301918252600080526016905290516200034a917f0263c2b778d062355049effc2dece97bc6547ff8a88a3258daa512061c2153dd9162000536565b5060408051808201909152600781526650454e44494e4760c81b60208083019182526001600052601690529051620003a4917f4c4dc693d7db52f85fe052106f4b4b920e78e8ef37dee82878a60ab8585faf499162000536565b5060408051808201909152600681526511115392515160d21b60208083019182526002600052601690529051620003fd917fcaff291fe014adc6b72a172705750b4cabe8f8667664d2924a166caab28856489162000536565b506040805180820190915260088152671054141493d5915160c21b6020808301918252600360005260169052905162000458917ff06d282f967055cb1eee17e04aa005b9682a620f4bbcfaee55ba78607a3d87ae9162000536565b506001601560405162000477906529a4a62b22a960d11b815260060190565b908152604051908190036020018120919091556311d3d31160e21b815260029060159060040190815260405190819003602001812091909155661112505353d39160ca1b81526003906015906007019081526040519081900360200190205550620007ea915050565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b82805462000544906200070a565b90600052602060002090601f016020900481019282620005685760008555620005b3565b82601f106200058357805160ff1916838001178555620005b3565b82800160010185558215620005b3579182015b82811115620005b357825182559160200191906001019062000596565b50620005c1929150620005c5565b5090565b5b80821115620005c15760008155600101620005c6565b8051620005e981620007d1565b919050565b80516001600160801b0381168114620005e957600080fd5b6000806000606084860312156200061c57600080fd5b83516200062981620007d1565b602085810151919450906001600160401b03808211156200064957600080fd5b818701915087601f8301126200065e57600080fd5b815181811115620006735762000673620007bb565b8060051b604051601f19603f830116810181811085821117156200069b576200069b620007bb565b604052828152858101935084860182860187018c1015620006bb57600080fd5b600095505b83861015620006e957620006d481620005dc565b855260019590950194938601938601620006c0565b508097505050505050506200070160408501620005ee565b90509250925092565b600181811c908216806200071f57607f821691505b602082108114156200074157634e487b7160e01b600052602260045260246000fd5b50919050565b60006001600160801b03828116808214156200076757620007676200078f565b6001019392505050565b60006000198214156200078857620007886200078f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620007e757600080fd5b50565b614d5e80620007fa6000396000f3fe60806040526004361061028c5760003560e01c806382171fbe1161015a578063b2f3f80c116100c1578063e985e9c51161007a578063e985e9c514610939578063ee335b4214610982578063f1e3fad9146109a2578063f2fde38b146109b5578063f7cbb1b2146109d5578063fa824ea414610a0557600080fd5b8063b2f3f80c14610832578063b88d4fde14610859578063b99ef1fa14610879578063c87b56dd146108b1578063d57c9c82146108d1578063e8ca64f4146108f157600080fd5b8063a479030b11610113578063a479030b14610774578063a94cb7fd146107a1578063aaa545d0146107bf578063ac6f0e05146107ec578063ace8a365146107ff578063b03e4dd51461081257600080fd5b806382171fbe1461067b5780638da5cb5b146106b657806395d89b41146106d45780639e1b567c146106e9578063a22cb46514610734578063a41641b61461075457600080fd5b806323b872dd116101fe578063500b5bd6116101b7578063500b5bd6146105b05780636352211e146105ce57806368929b5c146105ee57806370a0823114610626578063715018a61461064657806373a82b5f1461065b57600080fd5b806323b872dd146104c05780632751c4e1146104e05780633876e05e1461050057806338b686cb1461052057806342842e0e146105585780634badfeb21461057857600080fd5b80630d46ed21116102505780630d46ed21146103a15780630d58dd08146103c15780630e3c22cb1461040257806310cd3a9c1461042257806315e5aaab146104685780631e97aa5c146104a057600080fd5b806301ffc9a7146102d057806304dcd3001461030557806306fdde0314610332578063081812fc14610347578063095ea7b31461037f57600080fd5b366102cb57604080513381523460208201527f64c983f10188c30a885d77970aa5aae9a86e80ef9b459ad33cc620eb5999e070910160405180910390a1005b600080fd5b3480156102dc57600080fd5b506102f06102eb36600461453b565b610a3d565b60405190151581526020015b60405180910390f35b34801561031157600080fd5b506103256103203660046146db565b610a8f565b6040516102fc91906148f0565b34801561033e57600080fd5b50610325610b29565b34801561035357600080fd5b506103676103623660046146db565b610bbb565b6040516001600160a01b0390911681526020016102fc565b34801561038b57600080fd5b5061039f61039a366004614360565b610c48565b005b3480156103ad57600080fd5b5061039f6103bc36600461470d565b610d5e565b3480156103cd57600080fd5b506103676103dc366004614575565b80516020818301810180516011825292820191909301209152546001600160a01b031681565b34801561040e57600080fd5b5061039f61041d366004614217565b610dac565b34801561042e57600080fd5b5061045a61043d366004614575565b805160208183018101805160138252928201919093012091525481565b6040519081526020016102fc565b34801561047457600080fd5b5061045a610483366004614575565b805160208183018101805160128252928201919093012091525481565b3480156104ac57600080fd5b5061039f6104bb36600461438c565b610e10565b3480156104cc57600080fd5b5061039f6104db36600461426d565b611453565b3480156104ec57600080fd5b5061039f6104fb366004614217565b611484565b34801561050c57600080fd5b50600d54610367906001600160a01b031681565b34801561052c57600080fd5b5061045a61053b366004614575565b8051602081830181018051601c8252928201919093012091525481565b34801561056457600080fd5b5061039f61057336600461426d565b6114e8565b34801561058457600080fd5b50600c54610598906001600160801b031681565b6040516001600160801b0390911681526020016102fc565b3480156105bc57600080fd5b50600e546001600160a01b0316610367565b3480156105da57600080fd5b506103676105e93660046146db565b611503565b3480156105fa57600080fd5b5061045a610609366004614575565b805160208183018101805160198252928201919093012091525481565b34801561063257600080fd5b5061045a610641366004614217565b61157a565b34801561065257600080fd5b5061039f611601565b34801561066757600080fd5b5061039f610676366004614217565b611667565b34801561068757600080fd5b506102f0610696366004614575565b8051602081830181018051601b8252928201919093012091525460ff1681565b3480156106c257600080fd5b506007546001600160a01b0316610367565b3480156106e057600080fd5b5061032561175e565b3480156106f557600080fd5b506102f06107043660046145a9565b8151602081840181018051601a825292820194820194909420919093529091526000908152604090205460ff1681565b34801561074057600080fd5b5061039f61074f36600461432d565b61176d565b34801561076057600080fd5b5061039f61076f366004614575565b61177c565b34801561078057600080fd5b5061079461078f36600461445d565b611ac3565b6040516102fc9190614890565b3480156107ad57600080fd5b50600f546001600160a01b0316610367565b3480156107cb57600080fd5b506107df6107da366004614575565b6120f3565b6040516102fc9190614843565b61039f6107fa3660046145ef565b61216d565b61039f61080d366004614575565b61249f565b34801561081e57600080fd5b5061039f61082d3660046146b2565b6125db565b34801561083e57600080fd5b50600c5461059890600160801b90046001600160801b031681565b34801561086557600080fd5b5061039f6108743660046142ae565b612698565b34801561088557600080fd5b5061045a610894366004614575565b805160208183018101805160188252928201919093012091525481565b3480156108bd57600080fd5b506103256108cc3660046146db565b6126ca565b3480156108dd57600080fd5b5061039f6108ec3660046145a9565b612841565b3480156108fd57600080fd5b5061092c61090c366004614575565b805160208183018101805160178252928201919093012091525460ff1681565b6040516102fc91906148c8565b34801561094557600080fd5b506102f0610954366004614234565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561098e57600080fd5b5061039f61099d3660046145a9565b61295e565b61039f6109b036600461464f565b612c71565b3480156109c157600080fd5b5061039f6109d0366004614217565b613515565b3480156109e157600080fd5b506102f06109f0366004614217565b600b6020526000908152604090205460ff1681565b348015610a1157600080fd5b5061045a610a20366004614575565b805160208183018101805160148252928201919093012091525481565b60006001600160e01b031982166380ac58cd60e01b1480610a6e57506001600160e01b03198216635b5e139f60e01b145b80610a8957506301ffc9a760e01b6001600160e01b03198316145b92915050565b60166020526000908152604090208054610aa890614bfe565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad490614bfe565b8015610b215780601f10610af657610100808354040283529160200191610b21565b820191906000526020600020905b815481529060010190602001808311610b0457829003601f168201915b505050505081565b606060008054610b3890614bfe565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6490614bfe565b8015610bb15780601f10610b8657610100808354040283529160200191610bb1565b820191906000526020600020905b815481529060010190602001808311610b9457829003601f168201915b5050505050905090565b6000610bc6826135e0565b610c2c5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610c5382611503565b9050806001600160a01b0316836001600160a01b03161415610cc15760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610c23565b336001600160a01b0382161480610cdd5750610cdd8133610954565b610d4f5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610c23565b610d5983836135fd565b505050565b336000908152600b602052604090205460ff16610d8d5760405162461bcd60e51b8152600401610c2390614903565b60008281526016602090815260409091208251610d5992840190614040565b336000908152600b602052604090205460ff16610ddb5760405162461bcd60e51b8152600401610c2390614903565b6001600160a01b038116610dee57600080fd5b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b336000908152600b602052604090205460ff16610e3f5760405162461bcd60e51b8152600401610c2390614903565b6001601782604051610e519190614775565b9081526040519081900360200190205460ff166003811115610e7557610e75614cbb565b14610eb75760405162461bcd60e51b8152602060048201526012602482015271737461747573206e6f742070656e64696e6760701b6044820152606401610c23565b601a81604051610ec79190614775565b90815260200160405180910390206000610ede3390565b6001600160a01b0316815260208101919091526040016000205460ff1615610f485760405162461bcd60e51b815260206004820152601e60248201527f616c726561647920766f74656420666f7220746869732070726f6a65637400006044820152606401610c23565b60006001600160a01b0316601182604051610f639190614775565b908152604051908190036020019020546001600160a01b03161415610fbe5760405162461bcd60e51b81526020600482015260116024820152701b9bc81c1c9bda9958dd081dd85b1b195d607a1b6044820152606401610c23565b601881604051610fce9190614775565b9081526040519081900360200190208054906000610feb83614c60565b91905055506001601a826040516110029190614775565b908152602001604051809103902060006110193390565b6001600160a01b0316815260208101919091526040908101600020805460ff19169215159290921790915551601890611053908390614775565b9081526020016040518091039020546001141561129c5760008351116110a95760405162461bcd60e51b815260206004820152600b60248201526a656d70747920617272617960a81b6044820152606401610c23565b6000821180156110ba575060648211155b6110fa5760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a59081d1a1c995cda1bdb19607a1b6044820152606401610c23565b8260108260405161110b9190614775565b9081526020016040518091039020908051906020019061112c9291906140c4565b5081601c8260405161113e9190614775565b90815260405190819003602001902055600c54606490611170906001600160801b03600160801b820481169116614b56565b61117a9190614b1c565b6001600160801b0316610d595760036017826040516111999190614775565b908152604051908190036020019020805460ff191660018360038111156111c2576111c2614cbb565b0217905550600d546040516000916001600160a01b0316906012906111e8908590614775565b9081526040519081900360200181205490600081818185875af1925050503d8060008114611232576040519150601f19603f3d011682016040523d82523d6000602084013e611237565b606091505b50509050806112585760405162461bcd60e51b8152600401610c23906149f5565b816040516112669190614775565b604051908190038120907fae4295c58d61bc95278d93c0ce50389c66907d23767828ed2cf0c1b0cb80483e90600090a250505050565b600c546000906064906112c1906001600160801b03600160801b820481169116614b56565b6112cb9190614b1c565b600c546001600160801b0391821692506112ef91600160801b820481169116614b56565b6001600160801b0316611303826064614b85565b1015611317578061131381614c60565b9150505b806018836040516113289190614775565b9081526020016040518091039020541061144d57600360178360405161134e9190614775565b908152604051908190036020019020805460ff1916600183600381111561137757611377614cbb565b0217905550600d546040516000916001600160a01b03169060129061139d908690614775565b9081526040519081900360200181205490600081818185875af1925050503d80600081146113e7576040519150601f19603f3d011682016040523d82523d6000602084013e6113ec565b606091505b505090508061140d5760405162461bcd60e51b8152600401610c23906149f5565b8260405161141b9190614775565b604051908190038120907fae4295c58d61bc95278d93c0ce50389c66907d23767828ed2cf0c1b0cb80483e90600090a2505b50505050565b61145d338261366b565b6114795760405162461bcd60e51b8152600401610c23906149a4565b610d59838383613754565b336000908152600b602052604090205460ff166114b35760405162461bcd60e51b8152600401610c2390614903565b6001600160a01b0381166114c657600080fd5b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b610d5983838360405180602001604052806000815250612698565b6000818152600260205260408120546001600160a01b031680610a895760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610c23565b60006001600160a01b0382166115e55760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610c23565b506001600160a01b031660009081526003602052604090205490565b6007546001600160a01b0316331461165b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c23565b61166560006138f0565b565b336000908152600b602052604090205460ff166116965760405162461bcd60e51b8152600401610c2390614903565b6001600160a01b0381166000908152600b602052604090205460ff16156116f25760405162461bcd60e51b815260206004820152601060248201526f30b63932b0b23c903932bb34b2bbb2b960811b6044820152606401610c23565b6001600160a01b0381166000908152600b60205260409020805460ff19166001179055600c80546001600160801b03600160801b9091041690601061173683614c39565b91906101000a8154816001600160801b0302191690836001600160801b031602179055505050565b606060018054610b3890614bfe565b611778338383613942565b5050565b336000908152600b602052604090205460ff166117ab5760405162461bcd60e51b8152600401610c2390614903565b60016017826040516117bd9190614775565b9081526040519081900360200190205460ff1660038111156117e1576117e1614cbb565b146118245760405162461bcd60e51b815260206004820152601360248201527270726f6a656374206e6f742070656e64696e6760681b6044820152606401610c23565b601a816040516118349190614775565b9081526020016040518091039020600061184b3390565b6001600160a01b0316815260208101919091526040016000205460ff16156118b55760405162461bcd60e51b815260206004820152601e60248201527f616c726561647920766f74656420666f7220746869732070726f6a65637400006044820152606401610c23565b6019816040516118c59190614775565b90815260405190819003602001902080549060006118e283614c60565b91905055506001601a826040516118f99190614775565b908152602001604051809103902060006119103390565b6001600160a01b0316815260208101919091526040016000908120805460ff191692151592909217909155600c5460649061195e90600160801b81046001600160801b039081169116614b56565b6119689190614b1c565b600c546001600160801b03918216925061198c91600160801b820481169116614b56565b6001600160801b03166119a0826064614b85565b10156119b457806119b081614c60565b9150505b806019836040516119c59190614775565b908152602001604051809103902054106117785760026017836040516119eb9190614775565b908152604051908190036020019020805460ff19166001836003811115611a1457611a14614cbb565b02179055506000601183604051611a2b9190614775565b908152604051908190036020018120546001600160a01b031690601290611a53908690614775565b9081526040519081900360200181205490600081818185875af1925050503d8060008114611a9d576040519150601f19603f3d011682016040523d82523d6000602084013e611aa2565b606091505b5050905080610d595760405162461bcd60e51b8152600401610c23906149f5565b336000908152600b602052604090205460609060ff16611af55760405162461bcd60e51b8152600401610c2390614903565b6003601783604051611b079190614775565b9081526040519081900360200190205460ff166003811115611b2b57611b2b614cbb565b14611b6f5760405162461bcd60e51b81526020600482015260146024820152731a9bd8881b9bdd08185c1c1c9bdd9959081e595d60621b6044820152606401610c23565b601b82604051611b7f9190614775565b9081526040519081900360200190205460ff1615611bd05760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481b5a5b9d195960921b6044820152606401610c23565b82518451148015611c005750601082604051611bec9190614775565b908152604051908190036020019020548451145b611c3d5760405162461bcd60e51b815260206004820152600e60248201526d696e636f7272656374206172727360901b6044820152606401610c23565b6000601083604051611c4f9190614775565b908152604051908190036020019020546001600160401b03811115611c7657611c76614ce7565b604051908082528060200260200182016040528015611c9f578160200160208202803683370190505b5090506000606060005b601086604051611cb99190614775565b90815260405190819003602001902054811015611e4a57611cde600980546001019055565b6009549250611d05888281518110611cf857611cf8614cd1565b6020026020010151613a11565b611d27888381518110611d1a57611d1a614cd1565b6020026020010151613ab4565b604051602001611d389291906147c0565b6040516020818303038152906040529150611d96601087604051611d5c9190614775565b90815260200160405180910390208281548110611d7b57611d7b614cd1565b6000918252602090912001546001600160a01b031684613b45565b611da08383613c78565b85604051611dae9190614775565b604051809103902082604051611dc49190614775565b6040518091039020601088604051611ddc9190614775565b90815260200160405180910390208381548110611dfb57611dfb614cd1565b60009182526020822001546040516001600160a01b03909116917f7ae1edbeb69892774d94c2010b6183269d48e647bbfddb34d22d5aaf08dd4ad491a480611e4281614c60565b915050611ca9565b50600e546040516000916001600160a01b0316907fc50441ae845872978b51f82be155098d8562f1c2acdfbdcd81e2617131c30d5f90611e8e9089906024016148f0565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611ecc9190614775565b6000604051808303816000865af19150503d8060008114611f09576040519150601f19603f3d011682016040523d82523d6000602084013e611f0e565b606091505b5050905080611f5f5760405162461bcd60e51b815260206004820152601760248201527f6469616d6f6e6420617070726f76616c206661696c65640000000000000000006044820152606401610c23565b600f546040516001600160a01b03909116907fe67e402ca6beeaacd513fae4bbf646bf7d901d594bb12deef43930a6d4a510da90601490611fa1908a90614775565b908152602001604051809103902054601189604051611fc09190614775565b90815260405190819003602001812054611feb92916001600160a01b03909116908b90602401614a1e565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516120299190614775565b6000604051808303816000865af19150503d8060008114612066576040519150601f19603f3d011682016040523d82523d6000602084013e61206b565b606091505b505080915050806120b45760405162461bcd60e51b81526020600482015260136024820152721cdc1bdb9cdbdc881b5a5b9d0819985a5b1959606a1b6044820152606401610c23565b6001601b876040516120c69190614775565b908152604051908190036020019020805491151560ff199092169190911790555091925050509392505050565b60606010826040516121059190614775565b908152604080519182900360209081018320805480830285018301909352828452919083018282801561216157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612143575b50505050509050919050565b60006001600160a01b03166011846040516121889190614775565b908152604051908190036020019020546001600160a01b0316146121e75760405162461bcd60e51b8152602060048201526016602482015275185b1c9958591e481c1c9bda9958dd081dd85b1b195d60521b6044820152606401610c23565b60006015826040516121f99190614775565b9081526020016040518091039020549050600081116122525760405162461bcd60e51b8152602060048201526015602482015274696e76616c69642073706f6e736f72207374616b6560581b6044820152606401610c23565b600f5460408051602480820185905282518083039091018152604490910182526020810180516001600160e01b0316630e0da79d60e11b179052905160009283926001600160a01b03909116916122a99190614775565b6000604051808303816000865af19150503d80600081146122e6576040519150601f19603f3d011682016040523d82523d6000602084013e6122eb565b606091505b5091509150816122fa57600080fd5b60008180602001905181019061231091906146f4565b9050803410156123565760405162461bcd60e51b81526020600482015260116024820152701b9bdd08195b9bdd59da081cdd185ad959607a1b6044820152606401610c23565b856011886040516123679190614775565b908152602001604051809103902060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550806012886040516123aa9190614775565b908152602001604051809103902081905550836014886040516123cd9190614775565b90815260200160405180910390208190555060016017886040516123f19190614775565b908152604051908190036020019020805460ff1916600183600381111561241a5761241a614cbb565b02179055508034111561249657336124328234614ba4565b604051600081818185875af1925050503d806000811461246e576040519150601f19603f3d011682016040523d82523d6000602084013e612473565b606091505b505080935050826124965760405162461bcd60e51b8152600401610c239061497d565b50505050505050565b60016017826040516124b19190614775565b9081526040519081900360200190205460ff1660038111156124d5576124d5614cbb565b1480612514575060036017826040516124ee9190614775565b9081526040519081900360200190205460ff16600381111561251257612512614cbb565b145b6125535760405162461bcd60e51b815260206004820152601060248201526f696e636f72726563742073746174757360801b6044820152606401610c23565b600d546001600160a01b0316336001600160a01b0316146125a55760405162461bcd60e51b815260206004820152600c60248201526b3bb937b7339039b2b73232b960a11b6044820152606401610c23565b346013826040516125b69190614775565b908152602001604051809103902060008282546125d39190614adf565b909155505050565b336000908152600b602052604090205460ff1661260a5760405162461bcd60e51b8152600401610c2390614903565b6000816001600160801b031611801561262d57506064816001600160801b031611155b61266d5760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a59081d1a1c995cda1bdb19607a1b6044820152606401610c23565b600c80546fffffffffffffffffffffffffffffffff19166001600160801b0392909216919091179055565b6126a2338361366b565b6126be5760405162461bcd60e51b8152600401610c23906149a4565b61144d84848484613d03565b60606126d5826135e0565b61273b5760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b6064820152608401610c23565b6000828152600660205260408120805461275490614bfe565b80601f016020809104026020016040519081016040528092919081815260200182805461278090614bfe565b80156127cd5780601f106127a2576101008083540402835291602001916127cd565b820191906000526020600020905b8154815290600101906020018083116127b057829003601f168201915b5050505050905060006127eb60408051602081019091526000815290565b90508051600014156127fe575092915050565b815115612830578082604051602001612818929190614791565b60405160208183030381529060405292505050919050565b61283984613d36565b949350505050565b600f546001600160a01b0316336001600160a01b0316146128a45760405162461bcd60e51b815260206004820152601860248201527f50726f6a6563744e46543a2077726f6e672063616c6c657200000000000000006044820152606401610c23565b60006001600160a01b03166011836040516128bf9190614775565b908152604051908190036020019020546001600160a01b0316141561291a5760405162461bcd60e51b81526020600482015260116024820152701b9bc81c1c9bda9958dd081dd85b1b195d607a1b6044820152606401610c23565b8060118360405161292b9190614775565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b03199092169190911790555050565b60006017836040516129709190614775565b9081526040519081900360200190205460ff16600381111561299457612994614cbb565b14156129da5760405162461bcd60e51b81526020600482015260156024820152741c1c9bda9958dd08191bd95cdb89dd08195e1a5cdd605a1b6044820152606401610c23565b601b826040516129ea9190614775565b9081526040519081900360200190205460ff1615612a435760405162461bcd60e51b81526020600482015260166024820152751c1c9bda9958dd08185b1c9958591e481b5a5b9d195960521b6044820152606401610c23565b336000908152600b602052604080822054905160ff90911691600191601090612a6d908790614775565b9081526040805191829003602090810183208054808302850183019093528284529190830182828015612ac957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612aab575b5050505050905060005b8151811015612b6e5783158015612b1a5750818181518110612af757612af7614cd1565b60200260200101516001600160a01b0316612b0f3390565b6001600160a01b0316145b15612b2457600193505b818181518110612b3657612b36614cd1565b60200260200101516001600160a01b0316856001600160a01b03161415612b5c57600092505b80612b6681614c60565b915050612ad3565b5082612bce5760405162461bcd60e51b815260206004820152602960248201527f6d75737420626520612070726f6a65637420636f6e7472696275746f72206f72604482015268103932bb34b2bbb2b960b91b6064820152608401610c23565b81612c1b5760405162461bcd60e51b815260206004820181905260248201527f616c7265616479206120636f6e7472696275746f72206f6e2070726f6a6563746044820152606401610c23565b601085604051612c2b9190614775565b90815260405160209181900382019020805460018101825560009182529190200180546001600160a01b0319166001600160a01b03959095169490941790935550505050565b60026008541415612cc45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610c23565b60026008556001601783604051612cdb9190614775565b9081526040519081900360200190205460ff166003811115612cff57612cff614cbb565b1480612d3e57506003601783604051612d189190614775565b9081526040519081900360200190205460ff166003811115612d3c57612d3c614cbb565b145b612d7d5760405162461bcd60e51b815260206004820152601060248201526f696e636f72726563742073746174757360801b6044820152606401610c23565b601182604051612d8d9190614775565b908152604051908190036020019020546001600160a01b0316612dad3390565b6001600160a01b031614612df25760405162461bcd60e51b815260206004820152600c60248201526b3bb937b7339039b2b73232b960a11b6044820152606401610c23565b6000601582604051612e049190614775565b908152602001604051809103902054905060008111612e555760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081b195d995b609a1b6044820152606401610c23565b600f5460408051602480820185905282518083039091018152604490910182526020810180516001600160e01b0316630e0da79d60e11b179052905160009283926001600160a01b0390911691612eac9190614775565b6000604051808303816000865af19150503d8060008114612ee9576040519150601f19603f3d011682016040523d82523d6000602084013e612eee565b606091505b509150915081612efd57600080fd5b600081806020019051810190612f1391906146f4565b90506000601287604051612f279190614775565b90815260200160405180910390205490506000601488604051612f4a9190614775565b908152602001604051809103902054905085811415613139576001601789604051612f759190614775565b9081526040519081900360200190205460ff166003811115612f9957612f99614cbb565b141561304b57818310156130465782601289604051612fb89190614775565b90815260405190819003602001902055612fcf3390565b6001600160a01b0316612fe28484614ba4565b604051600081818185875af1925050503d806000811461301e576040519150601f19603f3d011682016040523d82523d6000602084013e613023565b606091505b505080955050846130465760405162461bcd60e51b8152600401610c239061497d565b61312e565b8260128960405161305c9190614775565b90815260200160405180910390208190555060006013896040516130809190614775565b90815260200160405180910390205490506013896040516130a19190614775565b9081526020016040518091039020600090556130ba3390565b6001600160a01b03168160405160006040518083038185875af1925050503d8060008114613104576040519150601f19603f3d011682016040523d82523d6000602084013e613109565b606091505b5050809650508561312c5760405162461bcd60e51b8152600401610c239061497d565b505b50505050505061350c565b8260128960405161314a9190614775565b9081526020016040518091039020819055508560148960405161316d9190614775565b908152604051908190036020019020558183116132f85760016017896040516131969190614775565b9081526040519081900360200190205460ff1660038111156131ba576131ba614cbb565b141561323457336131cb8484614ba4565b604051600081818185875af1925050503d8060008114613207576040519150601f19603f3d011682016040523d82523d6000602084013e61320c565b606091505b5050809550508461322f5760405162461bcd60e51b8152600401610c239061497d565b6133dc565b60006013896040516132469190614775565b90815260200160405180910390205490506013896040516132679190614775565b9081526020016040518091039020600090556132803390565b6001600160a01b03168160405160006040518083038185875af1925050503d80600081146132ca576040519150601f19603f3d011682016040523d82523d6000602084013e6132cf565b606091505b505080965050856132f25760405162461bcd60e51b8152600401610c239061497d565b506133dc565b6133028284614ba4565b3410156133515760405162461bcd60e51b815260206004820152601f60248201527f696e737566666963656e742066756e647320666f72206e6577206c6576656c006044820152606401610c23565b61335b8284614ba4565b3411156133dc57338361336e8434614adf565b6133789190614ba4565b604051600081818185875af1925050503d80600081146133b4576040519150601f19603f3d011682016040523d82523d6000602084013e6133b9565b606091505b505080955050846133dc5760405162461bcd60e51b8152600401610c239061497d565b601b886040516133ec9190614775565b9081526040519081900360200190205460ff161561350557600f546040516001600160a01b03909116907f8f58ecc17b5391b137156cd2f17ee22d7e2ee685d8a264a53294baf38f62e16e908390601190613448908d90614775565b9081526040519081900360200181205461347592916001600160a01b03909116908d908c90602401614a51565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516134b39190614775565b6000604051808303816000865af19150503d80600081146134f0576040519150601f19603f3d011682016040523d82523d6000602084013e6134f5565b606091505b5090955093508461350557600080fd5b5050505050505b50506001600855565b6007546001600160a01b0316331461356f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c23565b6001600160a01b0381166135d45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c23565b6135dd816138f0565b50565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061363282611503565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000613676826135e0565b6136d75760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610c23565b60006136e283611503565b9050806001600160a01b0316846001600160a01b0316148061372957506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806128395750836001600160a01b031661374284610bbb565b6001600160a01b031614949350505050565b826001600160a01b031661376782611503565b6001600160a01b0316146137cb5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610c23565b6001600160a01b03821661382d5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610c23565b6138386000826135fd565b6001600160a01b0383166000908152600360205260408120805460019290613861908490614ba4565b90915550506001600160a01b038216600090815260036020526040812080546001929061388f908490614adf565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156139a45760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610c23565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60408051600880825281830190925260609160009190602082018180368337019050509050600f60085b8015613aab57613a4c828616613e0e565b60f81b83613a5b600184614ba4565b81518110613a6b57613a6b614cd1565b60200101906001600160f81b031916908160001a9053506001811115613a995760048563ffffffff16901c94505b80613aa381614be7565b915050613a3b565b50909392505050565b60408051818152606081810183529160009190602082018180368337019050509050600f60405b8015613aab57613aec828616613e0e565b60f81b83613afb600184614ba4565b81518110613b0b57613b0b614cd1565b60200101906001600160f81b031916908160001a9053506001811115613b3357600485901c94505b80613b3d81614be7565b915050613adb565b6001600160a01b038216613b9b5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610c23565b613ba4816135e0565b15613bf15760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610c23565b6001600160a01b0382166000908152600360205260408120805460019290613c1a908490614adf565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b613c81826135e0565b613ce45760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610c23565b60008281526006602090815260409091208251610d5992840190614040565b613d0e848484613754565b613d1a84848484613e36565b61144d5760405162461bcd60e51b8152600401610c239061492b565b6060613d41826135e0565b613da55760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610c23565b6000613dbc60408051602081019091526000815290565b90506000815111613ddc5760405180602001604052806000815250613e07565b80613de684613f43565b604051602001613df7929190614791565b6040516020818303038152906040525b9392505050565b600060098260ff1611613e2b57613e26826030614af7565b610a89565b610a89826057614af7565b60006001600160a01b0384163b15613f3857604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613e7a903390899088908890600401614806565b602060405180830381600087803b158015613e9457600080fd5b505af1925050508015613ec4575060408051601f3d908101601f19168201909252613ec191810190614558565b60015b613f1e573d808015613ef2576040519150601f19603f3d011682016040523d82523d6000602084013e613ef7565b606091505b508051613f165760405162461bcd60e51b8152600401610c239061492b565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612839565b506001949350505050565b606081613f675750506040805180820190915260018152600360fc1b602082015290565b8160005b8115613f915780613f7b81614c60565b9150613f8a9050600a83614b42565b9150613f6b565b6000816001600160401b03811115613fab57613fab614ce7565b6040519080825280601f01601f191660200182016040528015613fd5576020820181803683370190505b5090505b841561283957613fea600183614ba4565b9150613ff7600a86614c7b565b614002906030614adf565b60f81b81838151811061401757614017614cd1565b60200101906001600160f81b031916908160001a905350614039600a86614b42565b9450613fd9565b82805461404c90614bfe565b90600052602060002090601f01602090048101928261406e57600085556140b4565b82601f1061408757805160ff19168380011785556140b4565b828001600101855582156140b4579182015b828111156140b4578251825591602001919060010190614099565b506140c0929150614119565b5090565b8280548282559060005260206000209081019282156140b4579160200282015b828111156140b457825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906140e4565b5b808211156140c0576000815560010161411a565b60006001600160401b0383111561414757614147614ce7565b61415a601f8401601f1916602001614a8c565b905082815283838301111561416e57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261419657600080fd5b813560206141ab6141a683614abc565b614a8c565b80838252828201915082860187848660051b89010111156141cb57600080fd5b60005b858110156141ea578135845292840192908401906001016141ce565b5090979650505050505050565b600082601f83011261420857600080fd5b613e078383356020850161412e565b60006020828403121561422957600080fd5b8135613e0781614cfd565b6000806040838503121561424757600080fd5b823561425281614cfd565b9150602083013561426281614cfd565b809150509250929050565b60008060006060848603121561428257600080fd5b833561428d81614cfd565b9250602084013561429d81614cfd565b929592945050506040919091013590565b600080600080608085870312156142c457600080fd5b84356142cf81614cfd565b935060208501356142df81614cfd565b92506040850135915060608501356001600160401b0381111561430157600080fd5b8501601f8101871361431257600080fd5b6143218782356020840161412e565b91505092959194509250565b6000806040838503121561434057600080fd5b823561434b81614cfd565b91506020830135801515811461426257600080fd5b6000806040838503121561437357600080fd5b823561437e81614cfd565b946020939093013593505050565b6000806000606084860312156143a157600080fd5b83356001600160401b03808211156143b857600080fd5b818601915086601f8301126143cc57600080fd5b813560206143dc6141a683614abc565b8083825282820191508286018b848660051b89010111156143fc57600080fd5b600096505b8487101561442857803561441481614cfd565b835260019690960195918301918301614401565b50975050870135945050604086013591508082111561444657600080fd5b50614453868287016141f7565b9150509250925092565b60008060006060848603121561447257600080fd5b83356001600160401b038082111561448957600080fd5b818601915086601f83011261449d57600080fd5b813560206144ad6141a683614abc565b8083825282820191508286018b848660051b89010111156144cd57600080fd5b600096505b8487101561450257803563ffffffff811681146144ee57600080fd5b8352600196909601959183019183016144d2565b509750508701359250508082111561451957600080fd5b61452587838801614185565b9350604086013591508082111561444657600080fd5b60006020828403121561454d57600080fd5b8135613e0781614d12565b60006020828403121561456a57600080fd5b8151613e0781614d12565b60006020828403121561458757600080fd5b81356001600160401b0381111561459d57600080fd5b612839848285016141f7565b600080604083850312156145bc57600080fd5b82356001600160401b038111156145d257600080fd5b6145de858286016141f7565b925050602083013561426281614cfd565b60008060006060848603121561460457600080fd5b83356001600160401b038082111561461b57600080fd5b614627878388016141f7565b94506020860135915061463982614cfd565b9092506040850135908082111561444657600080fd5b6000806040838503121561466257600080fd5b82356001600160401b038082111561467957600080fd5b614685868387016141f7565b9350602085013591508082111561469b57600080fd5b506146a8858286016141f7565b9150509250929050565b6000602082840312156146c457600080fd5b81356001600160801b0381168114613e0757600080fd5b6000602082840312156146ed57600080fd5b5035919050565b60006020828403121561470657600080fd5b5051919050565b6000806040838503121561472057600080fd5b8235915060208301356001600160401b0381111561473d57600080fd5b6146a8858286016141f7565b60008151808452614761816020860160208601614bbb565b601f01601f19169290920160200192915050565b60008251614787818460208701614bbb565b9190910192915050565b600083516147a3818460208801614bbb565b8351908301906147b7818360208801614bbb565b01949350505050565b6734b833399d1797b360c11b8152600083516147e3816008850160208801614bbb565b8351908301906147fa816008840160208801614bbb565b01600801949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061483990830184614749565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156148845783516001600160a01b03168352928401929184019160010161485f565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015614884578351835292840192918401916001016148ac565b60208101600483106148ea57634e487b7160e01b600052602160045260246000fd5b91905290565b602081526000613e076020830184614749565b6020808252600e908201526d3737ba1030903932bb34b2bbb2b960911b604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252600d908201526c19985a5b1959081c99599d5b99609a1b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252600f908201526e1d1c985b9cd9995c8819985a5b1959608a1b604082015260600190565b8381526001600160a01b0383166020820152606060408201819052600090614a4890830184614749565b95945050505050565b8481526001600160a01b0384166020820152608060408201819052600090614a7b90830185614749565b905082606083015295945050505050565b604051601f8201601f191681016001600160401b0381118282101715614ab457614ab4614ce7565b604052919050565b60006001600160401b03821115614ad557614ad5614ce7565b5060051b60200190565b60008219821115614af257614af2614c8f565b500190565b600060ff821660ff84168060ff03821115614b1457614b14614c8f565b019392505050565b60006001600160801b0380841680614b3657614b36614ca5565b92169190910492915050565b600082614b5157614b51614ca5565b500490565b60006001600160801b0380831681851681830481118215151615614b7c57614b7c614c8f565b02949350505050565b6000816000190483118215151615614b9f57614b9f614c8f565b500290565b600082821015614bb657614bb6614c8f565b500390565b60005b83811015614bd6578181015183820152602001614bbe565b8381111561144d5750506000910152565b600081614bf657614bf6614c8f565b506000190190565b600181811c90821680614c1257607f821691505b60208210811415614c3357634e487b7160e01b600052602260045260246000fd5b50919050565b60006001600160801b0380831681811415614c5657614c56614c8f565b6001019392505050565b6000600019821415614c7457614c74614c8f565b5060010190565b600082614c8a57614c8a614ca5565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146135dd57600080fd5b6001600160e01b0319811681146135dd57600080fdfea26469706673582212205b7513b357da02a1c3ad0f4604656f7bb142219904ee1a3f4055256352586fcb64736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061028c5760003560e01c806382171fbe1161015a578063b2f3f80c116100c1578063e985e9c51161007a578063e985e9c514610939578063ee335b4214610982578063f1e3fad9146109a2578063f2fde38b146109b5578063f7cbb1b2146109d5578063fa824ea414610a0557600080fd5b8063b2f3f80c14610832578063b88d4fde14610859578063b99ef1fa14610879578063c87b56dd146108b1578063d57c9c82146108d1578063e8ca64f4146108f157600080fd5b8063a479030b11610113578063a479030b14610774578063a94cb7fd146107a1578063aaa545d0146107bf578063ac6f0e05146107ec578063ace8a365146107ff578063b03e4dd51461081257600080fd5b806382171fbe1461067b5780638da5cb5b146106b657806395d89b41146106d45780639e1b567c146106e9578063a22cb46514610734578063a41641b61461075457600080fd5b806323b872dd116101fe578063500b5bd6116101b7578063500b5bd6146105b05780636352211e146105ce57806368929b5c146105ee57806370a0823114610626578063715018a61461064657806373a82b5f1461065b57600080fd5b806323b872dd146104c05780632751c4e1146104e05780633876e05e1461050057806338b686cb1461052057806342842e0e146105585780634badfeb21461057857600080fd5b80630d46ed21116102505780630d46ed21146103a15780630d58dd08146103c15780630e3c22cb1461040257806310cd3a9c1461042257806315e5aaab146104685780631e97aa5c146104a057600080fd5b806301ffc9a7146102d057806304dcd3001461030557806306fdde0314610332578063081812fc14610347578063095ea7b31461037f57600080fd5b366102cb57604080513381523460208201527f64c983f10188c30a885d77970aa5aae9a86e80ef9b459ad33cc620eb5999e070910160405180910390a1005b600080fd5b3480156102dc57600080fd5b506102f06102eb36600461453b565b610a3d565b60405190151581526020015b60405180910390f35b34801561031157600080fd5b506103256103203660046146db565b610a8f565b6040516102fc91906148f0565b34801561033e57600080fd5b50610325610b29565b34801561035357600080fd5b506103676103623660046146db565b610bbb565b6040516001600160a01b0390911681526020016102fc565b34801561038b57600080fd5b5061039f61039a366004614360565b610c48565b005b3480156103ad57600080fd5b5061039f6103bc36600461470d565b610d5e565b3480156103cd57600080fd5b506103676103dc366004614575565b80516020818301810180516011825292820191909301209152546001600160a01b031681565b34801561040e57600080fd5b5061039f61041d366004614217565b610dac565b34801561042e57600080fd5b5061045a61043d366004614575565b805160208183018101805160138252928201919093012091525481565b6040519081526020016102fc565b34801561047457600080fd5b5061045a610483366004614575565b805160208183018101805160128252928201919093012091525481565b3480156104ac57600080fd5b5061039f6104bb36600461438c565b610e10565b3480156104cc57600080fd5b5061039f6104db36600461426d565b611453565b3480156104ec57600080fd5b5061039f6104fb366004614217565b611484565b34801561050c57600080fd5b50600d54610367906001600160a01b031681565b34801561052c57600080fd5b5061045a61053b366004614575565b8051602081830181018051601c8252928201919093012091525481565b34801561056457600080fd5b5061039f61057336600461426d565b6114e8565b34801561058457600080fd5b50600c54610598906001600160801b031681565b6040516001600160801b0390911681526020016102fc565b3480156105bc57600080fd5b50600e546001600160a01b0316610367565b3480156105da57600080fd5b506103676105e93660046146db565b611503565b3480156105fa57600080fd5b5061045a610609366004614575565b805160208183018101805160198252928201919093012091525481565b34801561063257600080fd5b5061045a610641366004614217565b61157a565b34801561065257600080fd5b5061039f611601565b34801561066757600080fd5b5061039f610676366004614217565b611667565b34801561068757600080fd5b506102f0610696366004614575565b8051602081830181018051601b8252928201919093012091525460ff1681565b3480156106c257600080fd5b506007546001600160a01b0316610367565b3480156106e057600080fd5b5061032561175e565b3480156106f557600080fd5b506102f06107043660046145a9565b8151602081840181018051601a825292820194820194909420919093529091526000908152604090205460ff1681565b34801561074057600080fd5b5061039f61074f36600461432d565b61176d565b34801561076057600080fd5b5061039f61076f366004614575565b61177c565b34801561078057600080fd5b5061079461078f36600461445d565b611ac3565b6040516102fc9190614890565b3480156107ad57600080fd5b50600f546001600160a01b0316610367565b3480156107cb57600080fd5b506107df6107da366004614575565b6120f3565b6040516102fc9190614843565b61039f6107fa3660046145ef565b61216d565b61039f61080d366004614575565b61249f565b34801561081e57600080fd5b5061039f61082d3660046146b2565b6125db565b34801561083e57600080fd5b50600c5461059890600160801b90046001600160801b031681565b34801561086557600080fd5b5061039f6108743660046142ae565b612698565b34801561088557600080fd5b5061045a610894366004614575565b805160208183018101805160188252928201919093012091525481565b3480156108bd57600080fd5b506103256108cc3660046146db565b6126ca565b3480156108dd57600080fd5b5061039f6108ec3660046145a9565b612841565b3480156108fd57600080fd5b5061092c61090c366004614575565b805160208183018101805160178252928201919093012091525460ff1681565b6040516102fc91906148c8565b34801561094557600080fd5b506102f0610954366004614234565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561098e57600080fd5b5061039f61099d3660046145a9565b61295e565b61039f6109b036600461464f565b612c71565b3480156109c157600080fd5b5061039f6109d0366004614217565b613515565b3480156109e157600080fd5b506102f06109f0366004614217565b600b6020526000908152604090205460ff1681565b348015610a1157600080fd5b5061045a610a20366004614575565b805160208183018101805160148252928201919093012091525481565b60006001600160e01b031982166380ac58cd60e01b1480610a6e57506001600160e01b03198216635b5e139f60e01b145b80610a8957506301ffc9a760e01b6001600160e01b03198316145b92915050565b60166020526000908152604090208054610aa890614bfe565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad490614bfe565b8015610b215780601f10610af657610100808354040283529160200191610b21565b820191906000526020600020905b815481529060010190602001808311610b0457829003601f168201915b505050505081565b606060008054610b3890614bfe565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6490614bfe565b8015610bb15780601f10610b8657610100808354040283529160200191610bb1565b820191906000526020600020905b815481529060010190602001808311610b9457829003601f168201915b5050505050905090565b6000610bc6826135e0565b610c2c5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610c5382611503565b9050806001600160a01b0316836001600160a01b03161415610cc15760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610c23565b336001600160a01b0382161480610cdd5750610cdd8133610954565b610d4f5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610c23565b610d5983836135fd565b505050565b336000908152600b602052604090205460ff16610d8d5760405162461bcd60e51b8152600401610c2390614903565b60008281526016602090815260409091208251610d5992840190614040565b336000908152600b602052604090205460ff16610ddb5760405162461bcd60e51b8152600401610c2390614903565b6001600160a01b038116610dee57600080fd5b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b336000908152600b602052604090205460ff16610e3f5760405162461bcd60e51b8152600401610c2390614903565b6001601782604051610e519190614775565b9081526040519081900360200190205460ff166003811115610e7557610e75614cbb565b14610eb75760405162461bcd60e51b8152602060048201526012602482015271737461747573206e6f742070656e64696e6760701b6044820152606401610c23565b601a81604051610ec79190614775565b90815260200160405180910390206000610ede3390565b6001600160a01b0316815260208101919091526040016000205460ff1615610f485760405162461bcd60e51b815260206004820152601e60248201527f616c726561647920766f74656420666f7220746869732070726f6a65637400006044820152606401610c23565b60006001600160a01b0316601182604051610f639190614775565b908152604051908190036020019020546001600160a01b03161415610fbe5760405162461bcd60e51b81526020600482015260116024820152701b9bc81c1c9bda9958dd081dd85b1b195d607a1b6044820152606401610c23565b601881604051610fce9190614775565b9081526040519081900360200190208054906000610feb83614c60565b91905055506001601a826040516110029190614775565b908152602001604051809103902060006110193390565b6001600160a01b0316815260208101919091526040908101600020805460ff19169215159290921790915551601890611053908390614775565b9081526020016040518091039020546001141561129c5760008351116110a95760405162461bcd60e51b815260206004820152600b60248201526a656d70747920617272617960a81b6044820152606401610c23565b6000821180156110ba575060648211155b6110fa5760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a59081d1a1c995cda1bdb19607a1b6044820152606401610c23565b8260108260405161110b9190614775565b9081526020016040518091039020908051906020019061112c9291906140c4565b5081601c8260405161113e9190614775565b90815260405190819003602001902055600c54606490611170906001600160801b03600160801b820481169116614b56565b61117a9190614b1c565b6001600160801b0316610d595760036017826040516111999190614775565b908152604051908190036020019020805460ff191660018360038111156111c2576111c2614cbb565b0217905550600d546040516000916001600160a01b0316906012906111e8908590614775565b9081526040519081900360200181205490600081818185875af1925050503d8060008114611232576040519150601f19603f3d011682016040523d82523d6000602084013e611237565b606091505b50509050806112585760405162461bcd60e51b8152600401610c23906149f5565b816040516112669190614775565b604051908190038120907fae4295c58d61bc95278d93c0ce50389c66907d23767828ed2cf0c1b0cb80483e90600090a250505050565b600c546000906064906112c1906001600160801b03600160801b820481169116614b56565b6112cb9190614b1c565b600c546001600160801b0391821692506112ef91600160801b820481169116614b56565b6001600160801b0316611303826064614b85565b1015611317578061131381614c60565b9150505b806018836040516113289190614775565b9081526020016040518091039020541061144d57600360178360405161134e9190614775565b908152604051908190036020019020805460ff1916600183600381111561137757611377614cbb565b0217905550600d546040516000916001600160a01b03169060129061139d908690614775565b9081526040519081900360200181205490600081818185875af1925050503d80600081146113e7576040519150601f19603f3d011682016040523d82523d6000602084013e6113ec565b606091505b505090508061140d5760405162461bcd60e51b8152600401610c23906149f5565b8260405161141b9190614775565b604051908190038120907fae4295c58d61bc95278d93c0ce50389c66907d23767828ed2cf0c1b0cb80483e90600090a2505b50505050565b61145d338261366b565b6114795760405162461bcd60e51b8152600401610c23906149a4565b610d59838383613754565b336000908152600b602052604090205460ff166114b35760405162461bcd60e51b8152600401610c2390614903565b6001600160a01b0381166114c657600080fd5b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b610d5983838360405180602001604052806000815250612698565b6000818152600260205260408120546001600160a01b031680610a895760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610c23565b60006001600160a01b0382166115e55760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610c23565b506001600160a01b031660009081526003602052604090205490565b6007546001600160a01b0316331461165b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c23565b61166560006138f0565b565b336000908152600b602052604090205460ff166116965760405162461bcd60e51b8152600401610c2390614903565b6001600160a01b0381166000908152600b602052604090205460ff16156116f25760405162461bcd60e51b815260206004820152601060248201526f30b63932b0b23c903932bb34b2bbb2b960811b6044820152606401610c23565b6001600160a01b0381166000908152600b60205260409020805460ff19166001179055600c80546001600160801b03600160801b9091041690601061173683614c39565b91906101000a8154816001600160801b0302191690836001600160801b031602179055505050565b606060018054610b3890614bfe565b611778338383613942565b5050565b336000908152600b602052604090205460ff166117ab5760405162461bcd60e51b8152600401610c2390614903565b60016017826040516117bd9190614775565b9081526040519081900360200190205460ff1660038111156117e1576117e1614cbb565b146118245760405162461bcd60e51b815260206004820152601360248201527270726f6a656374206e6f742070656e64696e6760681b6044820152606401610c23565b601a816040516118349190614775565b9081526020016040518091039020600061184b3390565b6001600160a01b0316815260208101919091526040016000205460ff16156118b55760405162461bcd60e51b815260206004820152601e60248201527f616c726561647920766f74656420666f7220746869732070726f6a65637400006044820152606401610c23565b6019816040516118c59190614775565b90815260405190819003602001902080549060006118e283614c60565b91905055506001601a826040516118f99190614775565b908152602001604051809103902060006119103390565b6001600160a01b0316815260208101919091526040016000908120805460ff191692151592909217909155600c5460649061195e90600160801b81046001600160801b039081169116614b56565b6119689190614b1c565b600c546001600160801b03918216925061198c91600160801b820481169116614b56565b6001600160801b03166119a0826064614b85565b10156119b457806119b081614c60565b9150505b806019836040516119c59190614775565b908152602001604051809103902054106117785760026017836040516119eb9190614775565b908152604051908190036020019020805460ff19166001836003811115611a1457611a14614cbb565b02179055506000601183604051611a2b9190614775565b908152604051908190036020018120546001600160a01b031690601290611a53908690614775565b9081526040519081900360200181205490600081818185875af1925050503d8060008114611a9d576040519150601f19603f3d011682016040523d82523d6000602084013e611aa2565b606091505b5050905080610d595760405162461bcd60e51b8152600401610c23906149f5565b336000908152600b602052604090205460609060ff16611af55760405162461bcd60e51b8152600401610c2390614903565b6003601783604051611b079190614775565b9081526040519081900360200190205460ff166003811115611b2b57611b2b614cbb565b14611b6f5760405162461bcd60e51b81526020600482015260146024820152731a9bd8881b9bdd08185c1c1c9bdd9959081e595d60621b6044820152606401610c23565b601b82604051611b7f9190614775565b9081526040519081900360200190205460ff1615611bd05760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481b5a5b9d195960921b6044820152606401610c23565b82518451148015611c005750601082604051611bec9190614775565b908152604051908190036020019020548451145b611c3d5760405162461bcd60e51b815260206004820152600e60248201526d696e636f7272656374206172727360901b6044820152606401610c23565b6000601083604051611c4f9190614775565b908152604051908190036020019020546001600160401b03811115611c7657611c76614ce7565b604051908082528060200260200182016040528015611c9f578160200160208202803683370190505b5090506000606060005b601086604051611cb99190614775565b90815260405190819003602001902054811015611e4a57611cde600980546001019055565b6009549250611d05888281518110611cf857611cf8614cd1565b6020026020010151613a11565b611d27888381518110611d1a57611d1a614cd1565b6020026020010151613ab4565b604051602001611d389291906147c0565b6040516020818303038152906040529150611d96601087604051611d5c9190614775565b90815260200160405180910390208281548110611d7b57611d7b614cd1565b6000918252602090912001546001600160a01b031684613b45565b611da08383613c78565b85604051611dae9190614775565b604051809103902082604051611dc49190614775565b6040518091039020601088604051611ddc9190614775565b90815260200160405180910390208381548110611dfb57611dfb614cd1565b60009182526020822001546040516001600160a01b03909116917f7ae1edbeb69892774d94c2010b6183269d48e647bbfddb34d22d5aaf08dd4ad491a480611e4281614c60565b915050611ca9565b50600e546040516000916001600160a01b0316907fc50441ae845872978b51f82be155098d8562f1c2acdfbdcd81e2617131c30d5f90611e8e9089906024016148f0565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611ecc9190614775565b6000604051808303816000865af19150503d8060008114611f09576040519150601f19603f3d011682016040523d82523d6000602084013e611f0e565b606091505b5050905080611f5f5760405162461bcd60e51b815260206004820152601760248201527f6469616d6f6e6420617070726f76616c206661696c65640000000000000000006044820152606401610c23565b600f546040516001600160a01b03909116907fe67e402ca6beeaacd513fae4bbf646bf7d901d594bb12deef43930a6d4a510da90601490611fa1908a90614775565b908152602001604051809103902054601189604051611fc09190614775565b90815260405190819003602001812054611feb92916001600160a01b03909116908b90602401614a1e565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516120299190614775565b6000604051808303816000865af19150503d8060008114612066576040519150601f19603f3d011682016040523d82523d6000602084013e61206b565b606091505b505080915050806120b45760405162461bcd60e51b81526020600482015260136024820152721cdc1bdb9cdbdc881b5a5b9d0819985a5b1959606a1b6044820152606401610c23565b6001601b876040516120c69190614775565b908152604051908190036020019020805491151560ff199092169190911790555091925050509392505050565b60606010826040516121059190614775565b908152604080519182900360209081018320805480830285018301909352828452919083018282801561216157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612143575b50505050509050919050565b60006001600160a01b03166011846040516121889190614775565b908152604051908190036020019020546001600160a01b0316146121e75760405162461bcd60e51b8152602060048201526016602482015275185b1c9958591e481c1c9bda9958dd081dd85b1b195d60521b6044820152606401610c23565b60006015826040516121f99190614775565b9081526020016040518091039020549050600081116122525760405162461bcd60e51b8152602060048201526015602482015274696e76616c69642073706f6e736f72207374616b6560581b6044820152606401610c23565b600f5460408051602480820185905282518083039091018152604490910182526020810180516001600160e01b0316630e0da79d60e11b179052905160009283926001600160a01b03909116916122a99190614775565b6000604051808303816000865af19150503d80600081146122e6576040519150601f19603f3d011682016040523d82523d6000602084013e6122eb565b606091505b5091509150816122fa57600080fd5b60008180602001905181019061231091906146f4565b9050803410156123565760405162461bcd60e51b81526020600482015260116024820152701b9bdd08195b9bdd59da081cdd185ad959607a1b6044820152606401610c23565b856011886040516123679190614775565b908152602001604051809103902060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550806012886040516123aa9190614775565b908152602001604051809103902081905550836014886040516123cd9190614775565b90815260200160405180910390208190555060016017886040516123f19190614775565b908152604051908190036020019020805460ff1916600183600381111561241a5761241a614cbb565b02179055508034111561249657336124328234614ba4565b604051600081818185875af1925050503d806000811461246e576040519150601f19603f3d011682016040523d82523d6000602084013e612473565b606091505b505080935050826124965760405162461bcd60e51b8152600401610c239061497d565b50505050505050565b60016017826040516124b19190614775565b9081526040519081900360200190205460ff1660038111156124d5576124d5614cbb565b1480612514575060036017826040516124ee9190614775565b9081526040519081900360200190205460ff16600381111561251257612512614cbb565b145b6125535760405162461bcd60e51b815260206004820152601060248201526f696e636f72726563742073746174757360801b6044820152606401610c23565b600d546001600160a01b0316336001600160a01b0316146125a55760405162461bcd60e51b815260206004820152600c60248201526b3bb937b7339039b2b73232b960a11b6044820152606401610c23565b346013826040516125b69190614775565b908152602001604051809103902060008282546125d39190614adf565b909155505050565b336000908152600b602052604090205460ff1661260a5760405162461bcd60e51b8152600401610c2390614903565b6000816001600160801b031611801561262d57506064816001600160801b031611155b61266d5760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a59081d1a1c995cda1bdb19607a1b6044820152606401610c23565b600c80546fffffffffffffffffffffffffffffffff19166001600160801b0392909216919091179055565b6126a2338361366b565b6126be5760405162461bcd60e51b8152600401610c23906149a4565b61144d84848484613d03565b60606126d5826135e0565b61273b5760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b6064820152608401610c23565b6000828152600660205260408120805461275490614bfe565b80601f016020809104026020016040519081016040528092919081815260200182805461278090614bfe565b80156127cd5780601f106127a2576101008083540402835291602001916127cd565b820191906000526020600020905b8154815290600101906020018083116127b057829003601f168201915b5050505050905060006127eb60408051602081019091526000815290565b90508051600014156127fe575092915050565b815115612830578082604051602001612818929190614791565b60405160208183030381529060405292505050919050565b61283984613d36565b949350505050565b600f546001600160a01b0316336001600160a01b0316146128a45760405162461bcd60e51b815260206004820152601860248201527f50726f6a6563744e46543a2077726f6e672063616c6c657200000000000000006044820152606401610c23565b60006001600160a01b03166011836040516128bf9190614775565b908152604051908190036020019020546001600160a01b0316141561291a5760405162461bcd60e51b81526020600482015260116024820152701b9bc81c1c9bda9958dd081dd85b1b195d607a1b6044820152606401610c23565b8060118360405161292b9190614775565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b03199092169190911790555050565b60006017836040516129709190614775565b9081526040519081900360200190205460ff16600381111561299457612994614cbb565b14156129da5760405162461bcd60e51b81526020600482015260156024820152741c1c9bda9958dd08191bd95cdb89dd08195e1a5cdd605a1b6044820152606401610c23565b601b826040516129ea9190614775565b9081526040519081900360200190205460ff1615612a435760405162461bcd60e51b81526020600482015260166024820152751c1c9bda9958dd08185b1c9958591e481b5a5b9d195960521b6044820152606401610c23565b336000908152600b602052604080822054905160ff90911691600191601090612a6d908790614775565b9081526040805191829003602090810183208054808302850183019093528284529190830182828015612ac957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612aab575b5050505050905060005b8151811015612b6e5783158015612b1a5750818181518110612af757612af7614cd1565b60200260200101516001600160a01b0316612b0f3390565b6001600160a01b0316145b15612b2457600193505b818181518110612b3657612b36614cd1565b60200260200101516001600160a01b0316856001600160a01b03161415612b5c57600092505b80612b6681614c60565b915050612ad3565b5082612bce5760405162461bcd60e51b815260206004820152602960248201527f6d75737420626520612070726f6a65637420636f6e7472696275746f72206f72604482015268103932bb34b2bbb2b960b91b6064820152608401610c23565b81612c1b5760405162461bcd60e51b815260206004820181905260248201527f616c7265616479206120636f6e7472696275746f72206f6e2070726f6a6563746044820152606401610c23565b601085604051612c2b9190614775565b90815260405160209181900382019020805460018101825560009182529190200180546001600160a01b0319166001600160a01b03959095169490941790935550505050565b60026008541415612cc45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610c23565b60026008556001601783604051612cdb9190614775565b9081526040519081900360200190205460ff166003811115612cff57612cff614cbb565b1480612d3e57506003601783604051612d189190614775565b9081526040519081900360200190205460ff166003811115612d3c57612d3c614cbb565b145b612d7d5760405162461bcd60e51b815260206004820152601060248201526f696e636f72726563742073746174757360801b6044820152606401610c23565b601182604051612d8d9190614775565b908152604051908190036020019020546001600160a01b0316612dad3390565b6001600160a01b031614612df25760405162461bcd60e51b815260206004820152600c60248201526b3bb937b7339039b2b73232b960a11b6044820152606401610c23565b6000601582604051612e049190614775565b908152602001604051809103902054905060008111612e555760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081b195d995b609a1b6044820152606401610c23565b600f5460408051602480820185905282518083039091018152604490910182526020810180516001600160e01b0316630e0da79d60e11b179052905160009283926001600160a01b0390911691612eac9190614775565b6000604051808303816000865af19150503d8060008114612ee9576040519150601f19603f3d011682016040523d82523d6000602084013e612eee565b606091505b509150915081612efd57600080fd5b600081806020019051810190612f1391906146f4565b90506000601287604051612f279190614775565b90815260200160405180910390205490506000601488604051612f4a9190614775565b908152602001604051809103902054905085811415613139576001601789604051612f759190614775565b9081526040519081900360200190205460ff166003811115612f9957612f99614cbb565b141561304b57818310156130465782601289604051612fb89190614775565b90815260405190819003602001902055612fcf3390565b6001600160a01b0316612fe28484614ba4565b604051600081818185875af1925050503d806000811461301e576040519150601f19603f3d011682016040523d82523d6000602084013e613023565b606091505b505080955050846130465760405162461bcd60e51b8152600401610c239061497d565b61312e565b8260128960405161305c9190614775565b90815260200160405180910390208190555060006013896040516130809190614775565b90815260200160405180910390205490506013896040516130a19190614775565b9081526020016040518091039020600090556130ba3390565b6001600160a01b03168160405160006040518083038185875af1925050503d8060008114613104576040519150601f19603f3d011682016040523d82523d6000602084013e613109565b606091505b5050809650508561312c5760405162461bcd60e51b8152600401610c239061497d565b505b50505050505061350c565b8260128960405161314a9190614775565b9081526020016040518091039020819055508560148960405161316d9190614775565b908152604051908190036020019020558183116132f85760016017896040516131969190614775565b9081526040519081900360200190205460ff1660038111156131ba576131ba614cbb565b141561323457336131cb8484614ba4565b604051600081818185875af1925050503d8060008114613207576040519150601f19603f3d011682016040523d82523d6000602084013e61320c565b606091505b5050809550508461322f5760405162461bcd60e51b8152600401610c239061497d565b6133dc565b60006013896040516132469190614775565b90815260200160405180910390205490506013896040516132679190614775565b9081526020016040518091039020600090556132803390565b6001600160a01b03168160405160006040518083038185875af1925050503d80600081146132ca576040519150601f19603f3d011682016040523d82523d6000602084013e6132cf565b606091505b505080965050856132f25760405162461bcd60e51b8152600401610c239061497d565b506133dc565b6133028284614ba4565b3410156133515760405162461bcd60e51b815260206004820152601f60248201527f696e737566666963656e742066756e647320666f72206e6577206c6576656c006044820152606401610c23565b61335b8284614ba4565b3411156133dc57338361336e8434614adf565b6133789190614ba4565b604051600081818185875af1925050503d80600081146133b4576040519150601f19603f3d011682016040523d82523d6000602084013e6133b9565b606091505b505080955050846133dc5760405162461bcd60e51b8152600401610c239061497d565b601b886040516133ec9190614775565b9081526040519081900360200190205460ff161561350557600f546040516001600160a01b03909116907f8f58ecc17b5391b137156cd2f17ee22d7e2ee685d8a264a53294baf38f62e16e908390601190613448908d90614775565b9081526040519081900360200181205461347592916001600160a01b03909116908d908c90602401614a51565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516134b39190614775565b6000604051808303816000865af19150503d80600081146134f0576040519150601f19603f3d011682016040523d82523d6000602084013e6134f5565b606091505b5090955093508461350557600080fd5b5050505050505b50506001600855565b6007546001600160a01b0316331461356f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c23565b6001600160a01b0381166135d45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c23565b6135dd816138f0565b50565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061363282611503565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000613676826135e0565b6136d75760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610c23565b60006136e283611503565b9050806001600160a01b0316846001600160a01b0316148061372957506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806128395750836001600160a01b031661374284610bbb565b6001600160a01b031614949350505050565b826001600160a01b031661376782611503565b6001600160a01b0316146137cb5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610c23565b6001600160a01b03821661382d5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610c23565b6138386000826135fd565b6001600160a01b0383166000908152600360205260408120805460019290613861908490614ba4565b90915550506001600160a01b038216600090815260036020526040812080546001929061388f908490614adf565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156139a45760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610c23565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60408051600880825281830190925260609160009190602082018180368337019050509050600f60085b8015613aab57613a4c828616613e0e565b60f81b83613a5b600184614ba4565b81518110613a6b57613a6b614cd1565b60200101906001600160f81b031916908160001a9053506001811115613a995760048563ffffffff16901c94505b80613aa381614be7565b915050613a3b565b50909392505050565b60408051818152606081810183529160009190602082018180368337019050509050600f60405b8015613aab57613aec828616613e0e565b60f81b83613afb600184614ba4565b81518110613b0b57613b0b614cd1565b60200101906001600160f81b031916908160001a9053506001811115613b3357600485901c94505b80613b3d81614be7565b915050613adb565b6001600160a01b038216613b9b5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610c23565b613ba4816135e0565b15613bf15760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610c23565b6001600160a01b0382166000908152600360205260408120805460019290613c1a908490614adf565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b613c81826135e0565b613ce45760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610c23565b60008281526006602090815260409091208251610d5992840190614040565b613d0e848484613754565b613d1a84848484613e36565b61144d5760405162461bcd60e51b8152600401610c239061492b565b6060613d41826135e0565b613da55760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610c23565b6000613dbc60408051602081019091526000815290565b90506000815111613ddc5760405180602001604052806000815250613e07565b80613de684613f43565b604051602001613df7929190614791565b6040516020818303038152906040525b9392505050565b600060098260ff1611613e2b57613e26826030614af7565b610a89565b610a89826057614af7565b60006001600160a01b0384163b15613f3857604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613e7a903390899088908890600401614806565b602060405180830381600087803b158015613e9457600080fd5b505af1925050508015613ec4575060408051601f3d908101601f19168201909252613ec191810190614558565b60015b613f1e573d808015613ef2576040519150601f19603f3d011682016040523d82523d6000602084013e613ef7565b606091505b508051613f165760405162461bcd60e51b8152600401610c239061492b565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612839565b506001949350505050565b606081613f675750506040805180820190915260018152600360fc1b602082015290565b8160005b8115613f915780613f7b81614c60565b9150613f8a9050600a83614b42565b9150613f6b565b6000816001600160401b03811115613fab57613fab614ce7565b6040519080825280601f01601f191660200182016040528015613fd5576020820181803683370190505b5090505b841561283957613fea600183614ba4565b9150613ff7600a86614c7b565b614002906030614adf565b60f81b81838151811061401757614017614cd1565b60200101906001600160f81b031916908160001a905350614039600a86614b42565b9450613fd9565b82805461404c90614bfe565b90600052602060002090601f01602090048101928261406e57600085556140b4565b82601f1061408757805160ff19168380011785556140b4565b828001600101855582156140b4579182015b828111156140b4578251825591602001919060010190614099565b506140c0929150614119565b5090565b8280548282559060005260206000209081019282156140b4579160200282015b828111156140b457825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906140e4565b5b808211156140c0576000815560010161411a565b60006001600160401b0383111561414757614147614ce7565b61415a601f8401601f1916602001614a8c565b905082815283838301111561416e57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261419657600080fd5b813560206141ab6141a683614abc565b614a8c565b80838252828201915082860187848660051b89010111156141cb57600080fd5b60005b858110156141ea578135845292840192908401906001016141ce565b5090979650505050505050565b600082601f83011261420857600080fd5b613e078383356020850161412e565b60006020828403121561422957600080fd5b8135613e0781614cfd565b6000806040838503121561424757600080fd5b823561425281614cfd565b9150602083013561426281614cfd565b809150509250929050565b60008060006060848603121561428257600080fd5b833561428d81614cfd565b9250602084013561429d81614cfd565b929592945050506040919091013590565b600080600080608085870312156142c457600080fd5b84356142cf81614cfd565b935060208501356142df81614cfd565b92506040850135915060608501356001600160401b0381111561430157600080fd5b8501601f8101871361431257600080fd5b6143218782356020840161412e565b91505092959194509250565b6000806040838503121561434057600080fd5b823561434b81614cfd565b91506020830135801515811461426257600080fd5b6000806040838503121561437357600080fd5b823561437e81614cfd565b946020939093013593505050565b6000806000606084860312156143a157600080fd5b83356001600160401b03808211156143b857600080fd5b818601915086601f8301126143cc57600080fd5b813560206143dc6141a683614abc565b8083825282820191508286018b848660051b89010111156143fc57600080fd5b600096505b8487101561442857803561441481614cfd565b835260019690960195918301918301614401565b50975050870135945050604086013591508082111561444657600080fd5b50614453868287016141f7565b9150509250925092565b60008060006060848603121561447257600080fd5b83356001600160401b038082111561448957600080fd5b818601915086601f83011261449d57600080fd5b813560206144ad6141a683614abc565b8083825282820191508286018b848660051b89010111156144cd57600080fd5b600096505b8487101561450257803563ffffffff811681146144ee57600080fd5b8352600196909601959183019183016144d2565b509750508701359250508082111561451957600080fd5b61452587838801614185565b9350604086013591508082111561444657600080fd5b60006020828403121561454d57600080fd5b8135613e0781614d12565b60006020828403121561456a57600080fd5b8151613e0781614d12565b60006020828403121561458757600080fd5b81356001600160401b0381111561459d57600080fd5b612839848285016141f7565b600080604083850312156145bc57600080fd5b82356001600160401b038111156145d257600080fd5b6145de858286016141f7565b925050602083013561426281614cfd565b60008060006060848603121561460457600080fd5b83356001600160401b038082111561461b57600080fd5b614627878388016141f7565b94506020860135915061463982614cfd565b9092506040850135908082111561444657600080fd5b6000806040838503121561466257600080fd5b82356001600160401b038082111561467957600080fd5b614685868387016141f7565b9350602085013591508082111561469b57600080fd5b506146a8858286016141f7565b9150509250929050565b6000602082840312156146c457600080fd5b81356001600160801b0381168114613e0757600080fd5b6000602082840312156146ed57600080fd5b5035919050565b60006020828403121561470657600080fd5b5051919050565b6000806040838503121561472057600080fd5b8235915060208301356001600160401b0381111561473d57600080fd5b6146a8858286016141f7565b60008151808452614761816020860160208601614bbb565b601f01601f19169290920160200192915050565b60008251614787818460208701614bbb565b9190910192915050565b600083516147a3818460208801614bbb565b8351908301906147b7818360208801614bbb565b01949350505050565b6734b833399d1797b360c11b8152600083516147e3816008850160208801614bbb565b8351908301906147fa816008840160208801614bbb565b01600801949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061483990830184614749565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156148845783516001600160a01b03168352928401929184019160010161485f565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015614884578351835292840192918401916001016148ac565b60208101600483106148ea57634e487b7160e01b600052602160045260246000fd5b91905290565b602081526000613e076020830184614749565b6020808252600e908201526d3737ba1030903932bb34b2bbb2b960911b604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252600d908201526c19985a5b1959081c99599d5b99609a1b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252600f908201526e1d1c985b9cd9995c8819985a5b1959608a1b604082015260600190565b8381526001600160a01b0383166020820152606060408201819052600090614a4890830184614749565b95945050505050565b8481526001600160a01b0384166020820152608060408201819052600090614a7b90830185614749565b905082606083015295945050505050565b604051601f8201601f191681016001600160401b0381118282101715614ab457614ab4614ce7565b604052919050565b60006001600160401b03821115614ad557614ad5614ce7565b5060051b60200190565b60008219821115614af257614af2614c8f565b500190565b600060ff821660ff84168060ff03821115614b1457614b14614c8f565b019392505050565b60006001600160801b0380841680614b3657614b36614ca5565b92169190910492915050565b600082614b5157614b51614ca5565b500490565b60006001600160801b0380831681851681830481118215151615614b7c57614b7c614c8f565b02949350505050565b6000816000190483118215151615614b9f57614b9f614c8f565b500290565b600082821015614bb657614bb6614c8f565b500390565b60005b83811015614bd6578181015183820152602001614bbe565b8381111561144d5750506000910152565b600081614bf657614bf6614c8f565b506000190190565b600181811c90821680614c1257607f821691505b60208210811415614c3357634e487b7160e01b600052602260045260246000fd5b50919050565b60006001600160801b0380831681811415614c5657614c56614c8f565b6001019392505050565b6000600019821415614c7457614c74614c8f565b5060010190565b600082614c8a57614c8a614ca5565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146135dd57600080fd5b6001600160e01b0319811681146135dd57600080fdfea26469706673582212205b7513b357da02a1c3ad0f4604656f7bb142219904ee1a3f4055256352586fcb64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2361,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2363,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2367,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2371,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2375,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2381,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3686,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 273,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 603,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_status",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 10163,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(Counter)4182_storage"
      },
      {
        "astId": 10166,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "_multiSigRequest",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(Counter)4182_storage"
      },
      {
        "astId": 10170,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "reviewers",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10172,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "multiSigThreshold",
        "offset": 0,
        "slot": "12",
        "type": "t_uint128"
      },
      {
        "astId": 10174,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "numReviewers",
        "offset": 16,
        "slot": "12",
        "type": "t_uint128"
      },
      {
        "astId": 10176,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "appWallet",
        "offset": 0,
        "slot": "13",
        "type": "t_address_payable"
      },
      {
        "astId": 10178,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "appDiamond",
        "offset": 0,
        "slot": "14",
        "type": "t_address_payable"
      },
      {
        "astId": 10180,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "sponsorSFTAddr",
        "offset": 0,
        "slot": "15",
        "type": "t_address_payable"
      },
      {
        "astId": 10190,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "contributors",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 10194,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "projectWallets",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 10198,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "stakePerProject",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 10202,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "refundPerProject",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 10206,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "sponsorLevel",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 10210,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "sponsorLevels",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 10214,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "statusStrings",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 10219,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "status",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_string_memory_ptr,t_enum(ProjectStatus)10185)"
      },
      {
        "astId": 10223,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "votes",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 10227,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "votesReject",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 10233,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "reviewerVotes",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 10237,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "projectMinted",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 10241,
        "contract": "contracts/ProjectNFT.sol:ProjectNFT",
        "label": "projectThresholds",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(ProjectStatus)10185": {
        "encoding": "inplace",
        "label": "enum ProjectNFT.ProjectStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_enum(ProjectStatus)10185)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => enum ProjectNFT.ProjectStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(ProjectStatus)10185"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)4182_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 4181,
            "contract": "contracts/ProjectNFT.sol:ProjectNFT",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { NFTAux, NFTAuxInterface } from "../../contracts/NFTAux";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_projectNFTAddr",
        type: "address",
      },
      {
        internalType: "address",
        name: "_pathwayNFTAddr",
        type: "address",
      },
      {
        internalType: "address",
        name: "_badgeNFTAddr",
        type: "address",
      },
      {
        internalType: "address",
        name: "_verifyAddr",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50604051610131380380610131833981016040819052602c916099565b600080546001600160a01b039586166001600160a01b031991821617909155600180549486169482169490941790935560028054928516928416929092179091556003805491909316911617905560e4565b80516001600160a01b0381168114609457600080fd5b919050565b6000806000806080858703121560ae57600080fd5b60b585607e565b935060c160208601607e565b925060cd60408601607e565b915060d960608601607e565b905092959194509250565b603f806100f26000396000f3fe6080604052600080fdfea26469706673582212208c8683bbff4571b66a9cff9fb609fa5829700ddeaf491576b1dd91784427345664736f6c63430008070033";

type NFTAuxConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NFTAuxConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NFTAux__factory extends ContractFactory {
  constructor(...args: NFTAuxConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _projectNFTAddr: string,
    _pathwayNFTAddr: string,
    _badgeNFTAddr: string,
    _verifyAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<NFTAux> {
    return super.deploy(
      _projectNFTAddr,
      _pathwayNFTAddr,
      _badgeNFTAddr,
      _verifyAddr,
      overrides || {}
    ) as Promise<NFTAux>;
  }
  override getDeployTransaction(
    _projectNFTAddr: string,
    _pathwayNFTAddr: string,
    _badgeNFTAddr: string,
    _verifyAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _projectNFTAddr,
      _pathwayNFTAddr,
      _badgeNFTAddr,
      _verifyAddr,
      overrides || {}
    );
  }
  override attach(address: string): NFTAux {
    return super.attach(address) as NFTAux;
  }
  override connect(signer: Signer): NFTAux__factory {
    return super.connect(signer) as NFTAux__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTAuxInterface {
    return new utils.Interface(_abi) as NFTAuxInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): NFTAux {
    return new Contract(address, _abi, signerOrProvider) as NFTAux;
  }
}

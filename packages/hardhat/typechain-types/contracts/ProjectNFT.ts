/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface ProjectNFTInterface extends utils.Interface {
  functions: {
    "addProjectContributor(string,address)": FunctionFragment;
    "addProjectWallet(string,address,string)": FunctionFragment;
    "addReviewer(address)": FunctionFragment;
    "appWallet()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "changeProjectWallet(string,address)": FunctionFragment;
    "createToken(uint32[],uint256[],string)": FunctionFragment;
    "getAppDiamond()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getContributors(string)": FunctionFragment;
    "getSFTAddr()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "multiSigThreshold()": FunctionFragment;
    "name()": FunctionFragment;
    "numReviewers()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "projectMinted(string)": FunctionFragment;
    "projectRefund(string)": FunctionFragment;
    "projectThresholds(string)": FunctionFragment;
    "projectWallets(string)": FunctionFragment;
    "refundPerProject(string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reviewerVotes(string,address)": FunctionFragment;
    "reviewers(address)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setAppDiamond(address)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setSFTAddr(address)": FunctionFragment;
    "setStatusString(uint256,string)": FunctionFragment;
    "setThreshold(uint128)": FunctionFragment;
    "sponsorLevel(string)": FunctionFragment;
    "stakePerProject(string)": FunctionFragment;
    "status(string)": FunctionFragment;
    "statusStrings(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateSponsorLevel(string,string)": FunctionFragment;
    "voteForApproval(address[],uint256,string)": FunctionFragment;
    "voteForRejection(string)": FunctionFragment;
    "votes(string)": FunctionFragment;
    "votesReject(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addProjectContributor"
      | "addProjectWallet"
      | "addReviewer"
      | "appWallet"
      | "approve"
      | "balanceOf"
      | "changeProjectWallet"
      | "createToken"
      | "getAppDiamond"
      | "getApproved"
      | "getContributors"
      | "getSFTAddr"
      | "isApprovedForAll"
      | "multiSigThreshold"
      | "name"
      | "numReviewers"
      | "owner"
      | "ownerOf"
      | "projectMinted"
      | "projectRefund"
      | "projectThresholds"
      | "projectWallets"
      | "refundPerProject"
      | "renounceOwnership"
      | "reviewerVotes"
      | "reviewers"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setAppDiamond"
      | "setApprovalForAll"
      | "setSFTAddr"
      | "setStatusString"
      | "setThreshold"
      | "sponsorLevel"
      | "stakePerProject"
      | "status"
      | "statusStrings"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
      | "transferOwnership"
      | "updateSponsorLevel"
      | "voteForApproval"
      | "voteForRejection"
      | "votes"
      | "votesReject"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addProjectContributor",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addProjectWallet",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "addReviewer", values: [string]): string;
  encodeFunctionData(functionFragment: "appWallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "changeProjectWallet",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createToken",
    values: [BigNumberish[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAppDiamond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContributors",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSFTAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "multiSigThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numReviewers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projectMinted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "projectRefund",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "projectThresholds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "projectWallets",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "refundPerProject",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reviewerVotes",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "reviewers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAppDiamond",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setSFTAddr", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setStatusString",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sponsorLevel",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakePerProject",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "status", values: [string]): string;
  encodeFunctionData(
    functionFragment: "statusStrings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSponsorLevel",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "voteForApproval",
    values: [string[], BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "voteForRejection",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "votes", values: [string]): string;
  encodeFunctionData(functionFragment: "votesReject", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "addProjectContributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addProjectWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addReviewer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeProjectWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAppDiamond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSFTAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiSigThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numReviewers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "projectMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundPerProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewerVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reviewers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAppDiamond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSFTAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStatusString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sponsorLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakePerProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "statusStrings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSponsorLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteForApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteForRejection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votesReject",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "NFTProjectMinted(address,string,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProjectApproved(string)": EventFragment;
    "ReceiveCalled(address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTProjectMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProjectApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceiveCalled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface NFTProjectMintedEventObject {
  _to: string;
  _tokenURI: string;
  _questId: string;
}
export type NFTProjectMintedEvent = TypedEvent<
  [string, string, string],
  NFTProjectMintedEventObject
>;

export type NFTProjectMintedEventFilter =
  TypedEventFilter<NFTProjectMintedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProjectApprovedEventObject {
  _projectId: string;
}
export type ProjectApprovedEvent = TypedEvent<
  [string],
  ProjectApprovedEventObject
>;

export type ProjectApprovedEventFilter = TypedEventFilter<ProjectApprovedEvent>;

export interface ReceiveCalledEventObject {
  _caller: string;
  _value: BigNumber;
}
export type ReceiveCalledEvent = TypedEvent<
  [string, BigNumber],
  ReceiveCalledEventObject
>;

export type ReceiveCalledEventFilter = TypedEventFilter<ReceiveCalledEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface ProjectNFT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProjectNFTInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addProjectContributor(
      _projectId: string,
      newContributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addProjectWallet(
      _projectId: string,
      _projectWallet: string,
      level: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addReviewer(
      _reviewer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    appWallet(overrides?: CallOverrides): Promise<[string]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    changeProjectWallet(
      _projectId: string,
      newAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createToken(
      firstURIParts: BigNumberish[],
      secondURIParts: BigNumberish[],
      _projectId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAppDiamond(overrides?: CallOverrides): Promise<[string]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getContributors(
      _projectId: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getSFTAddr(overrides?: CallOverrides): Promise<[string]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    multiSigThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    numReviewers(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    projectMinted(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    projectRefund(
      _projectId: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    projectThresholds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    projectWallets(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    refundPerProject(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reviewerVotes(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    reviewers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAppDiamond(
      _appDiamond: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSFTAddr(
      _SFTAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStatusString(
      index: BigNumberish,
      newName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setThreshold(
      _newThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sponsorLevel(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    stakePerProject(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    status(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    statusStrings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSponsorLevel(
      _projectId: string,
      newLevel: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voteForApproval(
      _contributors: string[],
      _threshold: BigNumberish,
      _projectId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voteForRejection(
      _projectId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    votes(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    votesReject(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addProjectContributor(
    _projectId: string,
    newContributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addProjectWallet(
    _projectId: string,
    _projectWallet: string,
    level: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addReviewer(
    _reviewer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  appWallet(overrides?: CallOverrides): Promise<string>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  changeProjectWallet(
    _projectId: string,
    newAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createToken(
    firstURIParts: BigNumberish[],
    secondURIParts: BigNumberish[],
    _projectId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAppDiamond(overrides?: CallOverrides): Promise<string>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getContributors(
    _projectId: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getSFTAddr(overrides?: CallOverrides): Promise<string>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  multiSigThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  numReviewers(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  projectMinted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  projectRefund(
    _projectId: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  projectThresholds(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  projectWallets(arg0: string, overrides?: CallOverrides): Promise<string>;

  refundPerProject(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reviewerVotes(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  reviewers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAppDiamond(
    _appDiamond: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSFTAddr(
    _SFTAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStatusString(
    index: BigNumberish,
    newName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setThreshold(
    _newThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sponsorLevel(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  stakePerProject(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  status(arg0: string, overrides?: CallOverrides): Promise<number>;

  statusStrings(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSponsorLevel(
    _projectId: string,
    newLevel: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voteForApproval(
    _contributors: string[],
    _threshold: BigNumberish,
    _projectId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voteForRejection(
    _projectId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  votes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  votesReject(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addProjectContributor(
      _projectId: string,
      newContributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addProjectWallet(
      _projectId: string,
      _projectWallet: string,
      level: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addReviewer(_reviewer: string, overrides?: CallOverrides): Promise<void>;

    appWallet(overrides?: CallOverrides): Promise<string>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    changeProjectWallet(
      _projectId: string,
      newAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createToken(
      firstURIParts: BigNumberish[],
      secondURIParts: BigNumberish[],
      _projectId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAppDiamond(overrides?: CallOverrides): Promise<string>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getContributors(
      _projectId: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getSFTAddr(overrides?: CallOverrides): Promise<string>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    multiSigThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    numReviewers(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    projectMinted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    projectRefund(_projectId: string, overrides?: CallOverrides): Promise<void>;

    projectThresholds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectWallets(arg0: string, overrides?: CallOverrides): Promise<string>;

    refundPerProject(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reviewerVotes(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    reviewers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setAppDiamond(
      _appDiamond: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setSFTAddr(_SFTAddr: string, overrides?: CallOverrides): Promise<void>;

    setStatusString(
      index: BigNumberish,
      newName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setThreshold(
      _newThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sponsorLevel(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    stakePerProject(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    status(arg0: string, overrides?: CallOverrides): Promise<number>;

    statusStrings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSponsorLevel(
      _projectId: string,
      newLevel: string,
      overrides?: CallOverrides
    ): Promise<void>;

    voteForApproval(
      _contributors: string[],
      _threshold: BigNumberish,
      _projectId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    voteForRejection(
      _projectId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    votes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    votesReject(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "NFTProjectMinted(address,string,string)"(
      _to?: string | null,
      _tokenURI?: string | null,
      _questId?: string | null
    ): NFTProjectMintedEventFilter;
    NFTProjectMinted(
      _to?: string | null,
      _tokenURI?: string | null,
      _questId?: string | null
    ): NFTProjectMintedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ProjectApproved(string)"(
      _projectId?: string | null
    ): ProjectApprovedEventFilter;
    ProjectApproved(_projectId?: string | null): ProjectApprovedEventFilter;

    "ReceiveCalled(address,uint256)"(
      _caller?: null,
      _value?: null
    ): ReceiveCalledEventFilter;
    ReceiveCalled(_caller?: null, _value?: null): ReceiveCalledEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    addProjectContributor(
      _projectId: string,
      newContributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addProjectWallet(
      _projectId: string,
      _projectWallet: string,
      level: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addReviewer(
      _reviewer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    appWallet(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    changeProjectWallet(
      _projectId: string,
      newAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createToken(
      firstURIParts: BigNumberish[],
      secondURIParts: BigNumberish[],
      _projectId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAppDiamond(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContributors(
      _projectId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSFTAddr(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiSigThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    numReviewers(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectMinted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    projectRefund(
      _projectId: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    projectThresholds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectWallets(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    refundPerProject(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reviewerVotes(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reviewers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAppDiamond(
      _appDiamond: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSFTAddr(
      _SFTAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStatusString(
      index: BigNumberish,
      newName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setThreshold(
      _newThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sponsorLevel(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    stakePerProject(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    status(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    statusStrings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSponsorLevel(
      _projectId: string,
      newLevel: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voteForApproval(
      _contributors: string[],
      _threshold: BigNumberish,
      _projectId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voteForRejection(
      _projectId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    votes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    votesReject(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addProjectContributor(
      _projectId: string,
      newContributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addProjectWallet(
      _projectId: string,
      _projectWallet: string,
      level: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addReviewer(
      _reviewer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    appWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeProjectWallet(
      _projectId: string,
      newAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createToken(
      firstURIParts: BigNumberish[],
      secondURIParts: BigNumberish[],
      _projectId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAppDiamond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContributors(
      _projectId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSFTAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiSigThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numReviewers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectMinted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectRefund(
      _projectId: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    projectThresholds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectWallets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    refundPerProject(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reviewerVotes(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reviewers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAppDiamond(
      _appDiamond: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSFTAddr(
      _SFTAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStatusString(
      index: BigNumberish,
      newName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setThreshold(
      _newThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sponsorLevel(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakePerProject(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    status(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    statusStrings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSponsorLevel(
      _projectId: string,
      newLevel: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voteForApproval(
      _contributors: string[],
      _threshold: BigNumberish,
      _projectId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voteForRejection(
      _projectId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    votes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votesReject(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

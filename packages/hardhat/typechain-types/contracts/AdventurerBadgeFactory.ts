/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface AdventurerBadgeFactoryInterface extends utils.Interface {
  functions: {
    "allAddrsLength()": FunctionFragment;
    "appDiamond()": FunctionFragment;
    "badgeNFTAddress()": FunctionFragment;
    "createNFTToken(string,bool,string)": FunctionFragment;
    "dCompERC721TokenImplementation()": FunctionFragment;
    "getAllAddrs()": FunctionFragment;
    "getAllUserBadges(address)": FunctionFragment;
    "getNFTAddrs(string)": FunctionFragment;
    "getType(string)": FunctionFragment;
    "owner()": FunctionFragment;
    "parentIdPerObjectId(string)": FunctionFragment;
    "pathwayNFTAddress()": FunctionFragment;
    "projectNFTAddress()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setUserInfo(address,string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "typeStrings(uint256)": FunctionFragment;
    "userBadgeNumber(address)": FunctionFragment;
    "userBadgesByIndex(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allAddrsLength"
      | "appDiamond"
      | "badgeNFTAddress"
      | "createNFTToken"
      | "dCompERC721TokenImplementation"
      | "getAllAddrs"
      | "getAllUserBadges"
      | "getNFTAddrs"
      | "getType"
      | "owner"
      | "parentIdPerObjectId"
      | "pathwayNFTAddress"
      | "projectNFTAddress"
      | "renounceOwnership"
      | "setUserInfo"
      | "transferOwnership"
      | "typeStrings"
      | "userBadgeNumber"
      | "userBadgesByIndex"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allAddrsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "appDiamond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "badgeNFTAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createNFTToken",
    values: [string, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "dCompERC721TokenImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAddrs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllUserBadges",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getNFTAddrs", values: [string]): string;
  encodeFunctionData(functionFragment: "getType", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "parentIdPerObjectId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "pathwayNFTAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projectNFTAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setUserInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "typeStrings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userBadgeNumber",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userBadgesByIndex",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "allAddrsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appDiamond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "badgeNFTAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNFTToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dCompERC721TokenImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAddrs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllUserBadges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTAddrs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parentIdPerObjectId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pathwayNFTAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectNFTAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "typeStrings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBadgeNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBadgesByIndex",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface AdventurerBadgeFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AdventurerBadgeFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allAddrsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    appDiamond(overrides?: CallOverrides): Promise<[string]>;

    badgeNFTAddress(overrides?: CallOverrides): Promise<[string]>;

    createNFTToken(
      objectId: string,
      isPathway: boolean,
      parentId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dCompERC721TokenImplementation(
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAllAddrs(overrides?: CallOverrides): Promise<[string[]]>;

    getAllUserBadges(
      user: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNFTAddrs(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    getType(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    parentIdPerObjectId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pathwayNFTAddress(overrides?: CallOverrides): Promise<[string]>;

    projectNFTAddress(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUserInfo(
      user: string,
      _questOrPathwayId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    typeStrings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    userBadgeNumber(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userBadgesByIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  allAddrsLength(overrides?: CallOverrides): Promise<BigNumber>;

  appDiamond(overrides?: CallOverrides): Promise<string>;

  badgeNFTAddress(overrides?: CallOverrides): Promise<string>;

  createNFTToken(
    objectId: string,
    isPathway: boolean,
    parentId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dCompERC721TokenImplementation(overrides?: CallOverrides): Promise<string>;

  getAllAddrs(overrides?: CallOverrides): Promise<string[]>;

  getAllUserBadges(user: string, overrides?: CallOverrides): Promise<string>;

  getNFTAddrs(arg0: string, overrides?: CallOverrides): Promise<string>;

  getType(arg0: string, overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  parentIdPerObjectId(arg0: string, overrides?: CallOverrides): Promise<string>;

  pathwayNFTAddress(overrides?: CallOverrides): Promise<string>;

  projectNFTAddress(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUserInfo(
    user: string,
    _questOrPathwayId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  typeStrings(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  userBadgeNumber(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  userBadgesByIndex(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    allAddrsLength(overrides?: CallOverrides): Promise<BigNumber>;

    appDiamond(overrides?: CallOverrides): Promise<string>;

    badgeNFTAddress(overrides?: CallOverrides): Promise<string>;

    createNFTToken(
      objectId: string,
      isPathway: boolean,
      parentId: string,
      overrides?: CallOverrides
    ): Promise<string>;

    dCompERC721TokenImplementation(overrides?: CallOverrides): Promise<string>;

    getAllAddrs(overrides?: CallOverrides): Promise<string[]>;

    getAllUserBadges(user: string, overrides?: CallOverrides): Promise<string>;

    getNFTAddrs(arg0: string, overrides?: CallOverrides): Promise<string>;

    getType(arg0: string, overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    parentIdPerObjectId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    pathwayNFTAddress(overrides?: CallOverrides): Promise<string>;

    projectNFTAddress(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setUserInfo(
      user: string,
      _questOrPathwayId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    typeStrings(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    userBadgeNumber(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userBadgesByIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    allAddrsLength(overrides?: CallOverrides): Promise<BigNumber>;

    appDiamond(overrides?: CallOverrides): Promise<BigNumber>;

    badgeNFTAddress(overrides?: CallOverrides): Promise<BigNumber>;

    createNFTToken(
      objectId: string,
      isPathway: boolean,
      parentId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dCompERC721TokenImplementation(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllAddrs(overrides?: CallOverrides): Promise<BigNumber>;

    getAllUserBadges(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTAddrs(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getType(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    parentIdPerObjectId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pathwayNFTAddress(overrides?: CallOverrides): Promise<BigNumber>;

    projectNFTAddress(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUserInfo(
      user: string,
      _questOrPathwayId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    typeStrings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userBadgeNumber(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userBadgesByIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allAddrsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    appDiamond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    badgeNFTAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createNFTToken(
      objectId: string,
      isPathway: boolean,
      parentId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dCompERC721TokenImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllAddrs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllUserBadges(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTAddrs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getType(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parentIdPerObjectId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pathwayNFTAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projectNFTAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUserInfo(
      user: string,
      _questOrPathwayId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    typeStrings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userBadgeNumber(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userBadgesByIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

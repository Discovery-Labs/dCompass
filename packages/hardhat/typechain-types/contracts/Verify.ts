/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface VerifyInterface extends utils.Interface {
  functions: {
    "approvers(address)": FunctionFragment;
    "deployDiamondVerify(address,string,bytes32,bytes32,uint8)": FunctionFragment;
    "deployNoncesById(string)": FunctionFragment;
    "metaDataVerify(address,string,string,bytes32,bytes32,uint8)": FunctionFragment;
    "noncesParentIdChildId(string,string)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "serverAddress()": FunctionFragment;
    "setServerAddress(address)": FunctionFragment;
    "thresholdNoncesById(string)": FunctionFragment;
    "thresholdVerify(address,string,uint256,bytes32,bytes32,uint8)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approvers"
      | "deployDiamondVerify"
      | "deployNoncesById"
      | "metaDataVerify"
      | "noncesParentIdChildId"
      | "owner"
      | "renounceOwnership"
      | "serverAddress"
      | "setServerAddress"
      | "thresholdNoncesById"
      | "thresholdVerify"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "approvers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deployDiamondVerify",
    values: [string, string, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployNoncesById",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "metaDataVerify",
    values: [string, string, string, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "noncesParentIdChildId",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "serverAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setServerAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "thresholdNoncesById",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "thresholdVerify",
    values: [string, string, BigNumberish, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "approvers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployDiamondVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployNoncesById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metaDataVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "noncesParentIdChildId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serverAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setServerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "thresholdNoncesById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "thresholdVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Verify extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VerifyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approvers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    deployDiamondVerify(
      _senderAddress: string,
      _projectId: string,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployNoncesById(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    metaDataVerify(
      _senderAddress: string,
      _objectId: string,
      _parentId: string,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    noncesParentIdChildId(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    serverAddress(overrides?: CallOverrides): Promise<[string]>;

    setServerAddress(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    thresholdNoncesById(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    thresholdVerify(
      _senderAddress: string,
      _objectId: string,
      votesNeeded: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approvers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  deployDiamondVerify(
    _senderAddress: string,
    _projectId: string,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployNoncesById(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  metaDataVerify(
    _senderAddress: string,
    _objectId: string,
    _parentId: string,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  noncesParentIdChildId(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  serverAddress(overrides?: CallOverrides): Promise<string>;

  setServerAddress(
    _newAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  thresholdNoncesById(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  thresholdVerify(
    _senderAddress: string,
    _objectId: string,
    votesNeeded: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approvers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    deployDiamondVerify(
      _senderAddress: string,
      _projectId: string,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deployNoncesById(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metaDataVerify(
      _senderAddress: string,
      _objectId: string,
      _parentId: string,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    noncesParentIdChildId(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    serverAddress(overrides?: CallOverrides): Promise<string>;

    setServerAddress(
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    thresholdNoncesById(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    thresholdVerify(
      _senderAddress: string,
      _objectId: string,
      votesNeeded: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    approvers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    deployDiamondVerify(
      _senderAddress: string,
      _projectId: string,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployNoncesById(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metaDataVerify(
      _senderAddress: string,
      _objectId: string,
      _parentId: string,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    noncesParentIdChildId(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    serverAddress(overrides?: CallOverrides): Promise<BigNumber>;

    setServerAddress(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    thresholdNoncesById(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    thresholdVerify(
      _senderAddress: string,
      _objectId: string,
      votesNeeded: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approvers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployDiamondVerify(
      _senderAddress: string,
      _projectId: string,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployNoncesById(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    metaDataVerify(
      _senderAddress: string,
      _objectId: string,
      _parentId: string,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    noncesParentIdChildId(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    serverAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setServerAddress(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    thresholdNoncesById(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    thresholdVerify(
      _senderAddress: string,
      _objectId: string,
      votesNeeded: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

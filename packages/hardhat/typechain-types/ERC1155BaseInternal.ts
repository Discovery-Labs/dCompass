/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, Signer, utils } from "ethers";
import { EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ERC1155BaseInternalInterface extends utils.Interface {
  contractName: "ERC1155BaseInternal";
  functions: {};

  events: {
    "InternalApprovalForAll(address,address,bool)": EventFragment;
    "InternalTransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "InternalTransferSingle(address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "InternalApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InternalTransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InternalTransferSingle"): EventFragment;
}

export type InternalApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { account: string; operator: string; approved: boolean }
>;

export type InternalApprovalForAllEventFilter =
  TypedEventFilter<InternalApprovalForAllEvent>;

export type InternalTransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  {
    operator: string;
    from: string;
    to: string;
    ids: BigNumber[];
    values: BigNumber[];
  }
>;

export type InternalTransferBatchEventFilter =
  TypedEventFilter<InternalTransferBatchEvent>;

export type InternalTransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    operator: string;
    from: string;
    to: string;
    id: BigNumber;
    value: BigNumber;
  }
>;

export type InternalTransferSingleEventFilter =
  TypedEventFilter<InternalTransferSingleEvent>;

export interface ERC1155BaseInternal extends BaseContract {
  contractName: "ERC1155BaseInternal";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC1155BaseInternalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "InternalApprovalForAll(address,address,bool)"(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): InternalApprovalForAllEventFilter;
    InternalApprovalForAll(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): InternalApprovalForAllEventFilter;

    "InternalTransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): InternalTransferBatchEventFilter;
    InternalTransferBatch(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): InternalTransferBatchEventFilter;

    "InternalTransferSingle(address,address,address,uint256,uint256)"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): InternalTransferSingleEventFilter;
    InternalTransferSingle(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): InternalTransferSingleEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}

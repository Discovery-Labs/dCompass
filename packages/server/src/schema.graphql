# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input ApproveProjectInput {
  chainId: String!
  id: String!
  reviewerSignature: String!
  tokenUris: [String!]!
}

type ApproveProjectOutput {
  id: String!
  isFeatured: Boolean!
  tokenUris: [String!]!
}

type Course {
  courseType: CourseTypeEnum!

  """Identifies the date and time when the object was created."""
  createdAt: String!
  description: String!
  difficulty: CourseDifficultyEnum!
  gitbook: String!
  id: String!
  projects: [Project!]!
  quests: [Quest!]
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: String!
}

"""
The difficulty of a course, from beginner to wizard where wizard is the most difficult mode
"""
enum CourseDifficultyEnum {
  ADVANCED
  BEGINNER
  EXPERT
  INTERMEDIATE
  WIZARD
}

"""
Branched = theorical lessons and Decrypted = technical hands on lessons
"""
enum CourseTypeEnum {
  BRANCHED
  DECRYPTED
}

input CreateProjectInput {
  creatorSignature: String!
  id: String!
  tokenUris: [String!]!
}

type CreateProjectOutput {
  id: String!
  isFeatured: Boolean!
  tokenUris: [String!]!
}

input EditProjectInput {
  color: String
  description: String
  discord: String
  editorSignature: String!
  github: String
  id: String!
  logo: String
  name: String
  squads: [ProjectSquadsInput!]
  tokenUris: [String!]
  twitter: String
  website: String
  whitepaper: String
}

type Mutation {
  """Approves a new Project in dCompass"""
  approveProject(input: ApproveProjectInput!): [ApproveProjectOutput!]

  """Create a new Project in dCompass"""
  createProject(input: CreateProjectInput!): [CreateProjectOutput!]

  """Edit project in dCompass"""
  editProject(input: EditProjectInput!): Project
}

type Project {
  color: String
  contracts: [String!]!
  courses: [Course!]

  """Identifies the date and time when the object was created."""
  createdAt: String!
  createdBy: String!
  description: String!
  discord: String
  github: String!
  id: String!
  isFeatured: Boolean!
  logo: String
  name: String!
  peerProjects: [String!]
  repos: [String!]
  squads: [Squad!]!
  tags: [Tag!]
  tokenUris: [String!]!
  twitter: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: String!
  updatedBy: String!
  website: String!
  whitepaper: String
}

input ProjectSquadsInput {
  image: String!
  members: [String!]!
  name: String!
}

type Query {
  """Gets all the projects in dCompass"""
  getAllProjects: [Project!]

  """Gets a project by its Stream ID"""
  getProjectById(projectId: String!): Project
}

type Quest {
  completedBy: [String!]
  course: Course!
  courseId: String!

  """Identifies the date and time when the object was created."""
  createdAt: String!
  description: String!
  id: String!
  name: String!
  nfts: [QuestNFT!]
  questions: [Question!]

  """Identifies the date and time when the object was last updated."""
  updatedAt: String!
}

type QuestNFT {
  claimedBy: [String!]!
  name: String!
  rarity: RarityEnum!
  url: String!
}

type Question {
  answer: String!
  choices: [String!]!
  question: String!
}

"""
Rarity of the NFT, from lowest to highest rarity: common, uncommon, epic, legendary
"""
enum RarityEnum {
  COMMON
  EPIC
  LEGENDARY
  UNCOMMON
}

type Squad {
  """Identifies the date and time when the object was created."""
  createdAt: String!
  image: String
  members: [String!]!
  name: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: String!
}

type Tag {
  color: String!

  """Identifies the date and time when the object was created."""
  createdAt: String!
  description: String!
  id: String!
  name: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: String!
}
